{"version":3,"sources":["components/MiniGroup.jsx","components/DataLoader.js","components/ServerSelectOption.jsx","components/Grouping.jsx"],"names":["MiniGroup","props","className","to","server","style","textDecoration","color","fontWeight","fontSize","questName","leaderName","memberCount","fetchArbitraryData","url","type","a","fetch","response","json","text","Fetch","timeout","ret","Promise","resolve","reject","setTimeout","isResolved","then","val","catch","console","log","VerifyLfmData","data","length","missingfields","forEach","undefined","Name","LastUpdateTime","Groups","GroupCount","ServerSelectOption","toLowerCase","marginBottom","marginLeft","number","word","serverNames","noGroupsMessages","Grouping","React","useState","groupData","set_groupData","groupCount","set_groupCount","useEffect","FetchLfmData","set_popupMessages","popupMessages","title","message","icon","fullscreen","reportMessage","refreshdata","setInterval","clearInterval","total","reportFormVisibility","setReportFormVisibility","reportFormReference","Helmet","name","content","ReportIssueForm","page","showLink","visibility","componentReference","hideReportForm","PopupMessage","messages","popMessage","newMessages","slice","Card","pageName","subtitle","Math","floor","random","raidgroups","ServerName","group","Quest","GroupSize","push","GetRaidGroups","map","i","key","Leader","Members","description","tiles"],"mappings":"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","file":"static/js/13.bd81ea2c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MiniGroup = (props) => {\r\n    return (\r\n        <Link\r\n            className=\"mini-group\"\r\n            to={\"/grouping/\" + props.server}\r\n            style={{\r\n                textDecoration: \"none\",\r\n                color: \"var(--text)\",\r\n            }}\r\n        >\r\n            <h5 style={{ fontWeight: \"bold\" }}>{props.server}</h5>\r\n            <span className=\"lfm-number\" style={{ fontSize: \"larger\" }}>\r\n                {props.questName}\r\n            </span>\r\n            <span style={{ fontSize: \"large\" }}>\r\n                {props.leaderName}, {props.memberCount + 1} member\r\n                {props.memberCount + 1 > 1 ? \"s\" : \"\"}\r\n            </span>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default MiniGroup;\r\n","async function fetchArbitraryData(url, type) {\r\n    let response = await fetch(url);\r\n    if (type === \"json\") response = await response.json();\r\n    else if (type === \"text\") response = await response.text();\r\n    return response;\r\n}\r\n\r\nexport async function Fetch(url, timeout) {\r\n    let ret = new Promise(async (resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (!ret.isResolved) {\r\n                reject();\r\n            }\r\n        }, timeout);\r\n\r\n        await fetchArbitraryData(url, \"json\")\r\n            .then((val) => {\r\n                resolve(val);\r\n            })\r\n            .catch((val) => {\r\n                console.log(\"Failed to fetch group data\");\r\n            });\r\n    });\r\n    return ret;\r\n}\r\n\r\nexport function VerifyLfmData(data) {\r\n    if (data === null) return false;\r\n    if (data.length !== 9) return false;\r\n    let missingfields = false;\r\n    data.forEach((server) => {\r\n        if (server.Name === undefined) missingfields = true;\r\n        if (server.LastUpdateTime === undefined) missingfields = true;\r\n        if (server.Groups === undefined) missingfields = true;\r\n        if (server.GroupCount === undefined) missingfields = true;\r\n    });\r\n    if (missingfields) return false;\r\n    return true;\r\n}\r\n\r\n// export default run;\r\n","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nconst ServerSelectOption = (props) => {\r\n    function GetS() {\r\n        if (\r\n            props.number === null ||\r\n            props.number === undefined ||\r\n            props.number === 1\r\n        )\r\n            return \"\";\r\n\r\n        return \"s\";\r\n    }\r\n\r\n    return (\r\n        <Link\r\n            to={\"grouping/\" + props.server.toLowerCase()}\r\n            className=\"server-select-option\"\r\n        >\r\n            <h3 style={{ fontWeight: \"bold\", marginBottom: \"0px\" }}>\r\n                {props.server}\r\n            </h3>\r\n            <span\r\n                className=\"lfm-number\"\r\n                style={{ fontSize: \"x-large\", marginLeft: \"auto\" }}\r\n            >\r\n                {props.number}\r\n            </span>\r\n            <span style={{ fontSize: \"x-large\", marginLeft: \"5px\" }}>\r\n                {props.word}\r\n                {GetS()}\r\n            </span>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default ServerSelectOption;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Card from \"../components/Card\";\r\nimport ReportIssueForm from \"./ReportIssueForm\";\r\nimport PopupMessage from \"./PopupMessage\";\r\nimport MiniGroup from \"./MiniGroup\";\r\nimport ServerSelectOption from \"./ServerSelectOption\";\r\nimport { Fetch, VerifyLfmData } from \"./DataLoader\";\r\n\r\nconst TITLE = \"DDO Live LFM Viewer\";\r\n\r\nconst serverNames = [\r\n    \"Argonnessen\",\r\n    \"Cannith\",\r\n    \"Ghallanda\",\r\n    \"Khyber\",\r\n    \"Orien\",\r\n    \"Sarlona\",\r\n    \"Thelanis\",\r\n    \"Wayfinder\",\r\n    \"Hardcore\",\r\n];\r\n\r\nconst noGroupsMessages = [\r\n    \"Everyone is so shy today.\",\r\n    \"A travesty!\",\r\n    \"Well, you could always go solo...\",\r\n];\r\n\r\nconst Grouping = (props) => {\r\n    // Data\r\n    var [groupData, set_groupData] = React.useState(null);\r\n    var [groupCount, set_groupCount] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        function FetchLfmData() {\r\n            Fetch(\"https://www.playeraudit.com/api/groups\", 5000)\r\n                .then((val) => {\r\n                    if (VerifyLfmData(val)) {\r\n                        set_popupMessages([]);\r\n                        set_groupData(val);\r\n                    } else {\r\n                        set_popupMessages([\r\n                            ...popupMessages,\r\n                            {\r\n                                title: \"Something went wrong\",\r\n                                message:\r\n                                    \"Pretty descriptive, I know. Try refreshing the page. If the issue continues, please report it.\",\r\n                                icon: \"warning\",\r\n                                fullscreen: false,\r\n                                reportMessage:\r\n                                    val || \"Group data returned null\",\r\n                            },\r\n                        ]);\r\n                        set_groupData(null);\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    set_popupMessages([\r\n                        ...popupMessages,\r\n                        {\r\n                            title: \"We're stuck on a loading screen\",\r\n                            message:\r\n                                \"This is taking longer than usual. You can refresh the page or report the issue.\",\r\n                            icon: \"warning\",\r\n                            fullscreen: false,\r\n                            reportMessage:\r\n                                \"Could not fetch Group data. Timeout\",\r\n                        },\r\n                    ]);\r\n                });\r\n        }\r\n        FetchLfmData();\r\n\r\n        const refreshdata = setInterval(() => {\r\n            FetchLfmData();\r\n        }, 60000);\r\n        return () => clearInterval(refreshdata);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (groupData) {\r\n            let total = 0;\r\n            groupData.forEach((server) => {\r\n                total += server.GroupCount;\r\n            });\r\n            set_groupCount(total);\r\n        } else {\r\n            set_groupCount(0);\r\n        }\r\n    }, [groupData]);\r\n\r\n    function GetRaidGroups() {\r\n        if (groupData === null) return [];\r\n        let raidgroups = [];\r\n        groupData.forEach((server) => {\r\n            let ServerName = server.Name;\r\n            server.Groups.forEach((group) => {\r\n                if (group.Quest !== null && group.Quest.GroupSize === \"Raid\") {\r\n                    raidgroups.push({ ...group, ServerName });\r\n                }\r\n            });\r\n        });\r\n\r\n        return raidgroups;\r\n    }\r\n\r\n    // Report Form\r\n    var [reportFormVisibility, setReportFormVisibility] =\r\n        React.useState(\"none\");\r\n    var [reportFormReference, setReportFormReference] = React.useState(null);\r\n    function showReportForm(reference) {\r\n        // Grab relevant info from the tile element that's being reported\r\n        let referenceInfo = {\r\n            title: reference.title,\r\n            type: reference.chartType,\r\n            displayType: reference.displayType,\r\n            trendType: reference.trendType,\r\n            showActions: reference.showActions,\r\n            //data: reference.chartData,\r\n        };\r\n        // Show the report form\r\n        setReportFormReference(referenceInfo);\r\n        setReportFormVisibility(\"block\");\r\n    }\r\n    function hideReportForm() {\r\n        setReportFormVisibility(\"none\");\r\n    }\r\n\r\n    // Popup message\r\n    var [popupMessages, set_popupMessages] = React.useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>{TITLE}</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Browse LFMs from any server with a live LFM panel! Check the LFM panel before you login, or setup notifications and never miss raid night again!\"\r\n                />\r\n            </Helmet>\r\n            <ReportIssueForm\r\n                page=\"servers\"\r\n                showLink={false}\r\n                visibility={reportFormVisibility}\r\n                componentReference={reportFormReference}\r\n                hideReportForm={hideReportForm}\r\n            />\r\n            <PopupMessage\r\n                messages={popupMessages}\r\n                popMessage={() => {\r\n                    if (popupMessages.length) {\r\n                        let newMessages = [...popupMessages];\r\n                        newMessages = newMessages.slice(1);\r\n                        set_popupMessages(newMessages);\r\n                    }\r\n                }}\r\n            />\r\n            <Card\r\n                pageName=\"grouping\"\r\n                showLink={false}\r\n                title=\"Live LFM Viewer\"\r\n                subtitle={\r\n                    groupData ? (\r\n                        <div>\r\n                            <div className=\"grouping-subtitle\">\r\n                                There are currently{\" \"}\r\n                                <span className=\"lfm-number\">{groupCount}</span>{\" \"}\r\n                                groups posted.{\" \"}\r\n                                {groupCount\r\n                                    ? \"If you're not in one, you're missing out!\"\r\n                                    : noGroupsMessages[\r\n                                          Math.floor(Math.random() * 4)\r\n                                      ]}\r\n                            </div>\r\n                            <div\r\n                                className=\"grouping-subtitle-mobile\"\r\n                                style={{ fontSize: \"larger\" }}\r\n                            >\r\n                                Select a server\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                        <div>Loading group data...</div>\r\n                    )\r\n                }\r\n            >\r\n                {groupData ? (\r\n                    <div>\r\n                        <div className=\"grouping-raid-group-container\">\r\n                            {GetRaidGroups().map((group, i) => (\r\n                                <MiniGroup\r\n                                    key={i}\r\n                                    server={group.ServerName}\r\n                                    questName={group.Quest.Name}\r\n                                    leaderName={group.Leader.Name}\r\n                                    memberCount={group.Members.length}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"grouping-server-select-container\">\r\n                            {groupData.map((server, i) => (\r\n                                <ServerSelectOption\r\n                                    key={i}\r\n                                    server={server.Name}\r\n                                    number={server.GroupCount}\r\n                                    word=\"group\"\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"grouping-server-select-container\">\r\n                        {serverNames.map((server, i) => (\r\n                            <ServerSelectOption key={i} server={server} />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </Card>\r\n            <Card\r\n                className=\"grouping-extra-info\"\r\n                pageName=\"grouping\"\r\n                showLink={false}\r\n                title=\"\"\r\n                description=\"\"\r\n                tiles={[\r\n                    {\r\n                        title: \"Live LFM Viewer\",\r\n                        content: (\r\n                            <div>\r\n                                <p style={{ fontSize: \"larger\" }}>\r\n                                    Every LFM on every server, all in one place.\r\n                                </p>\r\n                                <p>\r\n                                    The Live LFM Viewer updates every 15\r\n                                    seconds.\r\n                                </p>\r\n                                <hr />\r\n                                <h4>API</h4>\r\n                                <p>\r\n                                    Need the data for a project of your own?\r\n                                    Visit the API page for more information!\r\n                                </p>\r\n                                <h4>Contributions</h4>\r\n                                <p>\r\n                                    A special thanks to the incredible people\r\n                                    over at Vault of Kundarak for their\r\n                                    invaluable contributions to the Live LFM\r\n                                    Viewer project. This tool would not have\r\n                                    been possible without their knowledge and\r\n                                    data.\r\n                                </p>\r\n                            </div>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Grouping;\r\n"],"sourceRoot":""}