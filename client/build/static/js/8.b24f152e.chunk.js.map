{"version":3,"sources":["assets/global/timeline.svg","components/ChartServerDistributionPie.jsx","components/ChartTimeOfDay.jsx","components/ChartDayOfWeek.jsx","components/ChartClassDistribution.jsx","components/ChartLevelDistribution.jsx","assets/global/online.svg","assets/global/offline.svg","assets/global/pending.svg","components/ServerStatusDisplay.jsx","components/QuestTable.jsx","components/ChartQuestActivity.jsx","components/Quests.jsx"],"names":["_g","_g2","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgTimeline","_ref","svgRef","title","props","createElement","enableBackground","height","viewBox","width","ref","fill","d","ForwardRef","forwardRef","theme","background","textColor","fontSize","tooltip","container","color","borderRadius","boxShadow","padding","basic","whiteSpace","display","alignItems","table","tableCell","ChartServerDistributionPie","className","filters","showServerFilters","style","data","margin","top","right","bottom","left","valueFormat","sortByValue","padAngle","cornerRadius","activeOuterRadiusOffset","colors","scheme","borderWidth","borderColor","from","modifiers","enableArcLinkLabels","arcLinkLabelsSkipAngle","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabel","e","value","total","GetTotalPopulation","toFixed","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","axis","domain","line","stroke","strokeWidth","ticks","grid","crosshair","strokeOpacity","strokeDasharray","ChartTimeOfDay","xScale","type","yScale","min","max","stacked","reverse","curve","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","lineWidth","enablePoints","enableArea","areaOpacity","enableSlices","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","motionConfig","ChartDayOfWeek","indexBy","minValue","groupMode","valueScale","indexScale","round","label","Math","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","animate","motionStiffness","motionDamping","ChartClassDistribution","format","tooltipFormat","ChartLevelDistribution","tickValues","yFormat","_path","_path2","ServerNames","ServerStatusDisplay","fontWeight","dt","LastUpdateTime","Date","toLocaleTimeString","flexDirection","justifyContent","flexWrap","Worlds","map","world","paddingRight","Status","GetSVG","Name","ContentTable","React","useState","filteredData","set_filteredData","useEffect","activeFilter","sort","a","b","activeOrder","Count","filter","quest","Patron","Raid","AdventurePack","maxHeight","QuestName","cursor","textDecoration","onClick","handleSelection","marginLeft","sec","AverageTime","legendBottom","legendLeft","math","require","serverNames","Quests","questnamefiltertimeout","questList","set_questList","filteredQuestList","set_filteredQuestList","durationData","set_durationData","serverDistData","set_serverDistData","standardDeviation","set_standardDeviation","datetimeData","set_datetimeData","average","set_average","questName","set_questName","questNameFilter","set_questNameFilter","url","fetch","response","json","text","fetchArbitraryData","then","val","entry","toLowerCase","includes","reportFormVisibility","setReportFormVisibility","reportFormReference","setReportFormReference","popupMessages","set_popupMessages","Helmet","name","content","ReportIssueForm","page","showLink","visibility","componentReference","hideReportForm","PopupMessage","messages","popMessage","newMessages","slice","Card","pageName","subtitle","tiles","description","htmlFor","maxWidth","id","onChange","clearTimeout","setTimeout","questname","document","getElementById","QuestTable","showLastUpdated","reportReference","reference","referenceInfo","chartType","displayType","trendType","showActions","Id","bincount","values","servercounts","forEach","Duration","push","Server","std","ave","bins","freq","binstep","bin","index","durationdata","Frequency","serverdistrdata","days","instances","hour","dow","Start","getDay","getHours","floor","datetimedata","h","Time","Instances","loadQuest","marginBottom","paddingLeft","ChartQuestActivity"],"mappings":"wGAAA,sCAAIA,EAAIC,EAAR,gBAEIC,EAAY,CAAC,SAAU,SAE3B,SAASC,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAEhT,SAASS,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxMgB,CAA8BZ,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,IAAIoB,EAAc,SAAqBC,GACrC,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQb,EAAyBU,EAAMzB,GAE3C,OAAoB,IAAM6B,cAAc,MAAO5B,EAAS,CACtD6B,iBAAkB,gBAClBC,OAAQ,GACRC,QAAS,YACTC,MAAO,GACPC,IAAKR,GACJE,GAAQD,EAAqB,IAAME,cAAc,QAAS,KAAMF,GAAS,KAAM7B,IAAOA,EAAkB,IAAM+B,cAAc,IAAK,KAAmB,IAAMA,cAAc,OAAQ,CACjLM,KAAM,OACNJ,OAAQ,GACRE,MAAO,OACHlC,IAAQA,EAAmB,IAAM8B,cAAc,IAAK,KAAmB,IAAMA,cAAc,IAAK,KAAmB,IAAMA,cAAc,IAAK,KAAmB,IAAMA,cAAc,OAAQ,CAC/LO,EAAG,8fACHD,KAAM,eAINE,EAA0B,IAAMC,YAAW,SAAUV,EAAOM,GAC9D,OAAoB,IAAML,cAAcL,EAAavB,EAAS,CAC5DyB,OAAQQ,GACPN,OAEU,K,iCCtCf,6BAMMW,EAAQ,CACVC,WAAY,cACZC,UAAW,cACXC,SAAU,GACVC,QAAS,CACLC,UAAW,CACPJ,WAAY,cACZK,MAAO,UACPH,SAAU,UACVI,aAAc,MACdC,UAAW,6BACXC,QAAS,WAEbC,MAAO,CACHC,WAAY,MACZC,QAAS,OACTC,WAAY,UAEhBC,MAAO,GACPC,UAAW,CACPN,QAAS,aAyFNO,IApFoB,SAAC3B,GAUhC,OACI,yBACI4B,UACI5B,EAAM6B,SAAW7B,EAAM8B,kBACjB,mBACA,GAEVC,MAAO,CAAE5B,OAAQ,UAEhBH,EAAMgC,KACH,kBAAC,IAAD,CACIA,KAAMhC,EAAMgC,KACZC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,KACjDC,YAAY,SACZC,aAAa,EAEbC,SAAU,GACVC,aAAc,EACdC,wBAAyB,EACzBC,OAAQ,CAAEC,OAAQ,cAClBC,YAAa,EACbC,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,MAE3BC,qBAAqB,EACrBC,uBAAwB,GACxBC,uBAAwB,EACxBC,mBAAoB,CAAEL,KAAM,SAC5BM,SAAU,SAAUC,GAChB,MAAM,GAAN,QACKA,EAAEC,MAxC3B,WAEI,IADA,IAAIC,EAAQ,EACH/E,EAAI,EAAGA,EAAIuB,EAAMgC,KAAKrD,OAAQF,IACnC+E,GAASxD,EAAMgC,KAAKvD,GAAG8E,MAG3B,OAAOC,EAkCwBC,GACX,KACFC,QAAQ,GAHV,MAKJC,mBAAoB,GACpBC,sBAAuB,GACvBC,mBAAoB,QA0BpBlD,MAAOA,IAGX,yBAAKiB,UAAU,wBACX,mD,iCC5GpB,6BAMMjB,EAAQ,CACVC,WAAY,cACZC,UAAW,cACXC,SAAU,GACVgD,KAAM,CACFC,OAAQ,CACJC,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBC,MAAO,CACHH,KAAM,CACFC,OAAQ,UACRC,YAAa,KAIzBE,KAAM,CACFJ,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBG,UAAW,CACPL,KAAM,CACFC,OAAQ,cACRC,YAAa,EACbI,cAAe,EACfC,gBAAiB,QAGzBxD,QAAS,CACLC,UAAW,CACPJ,WAAY,cACZK,MAAO,UACPH,SAAU,UACVI,aAAc,MACdC,UAAW,6BACXC,QAAS,WAEbC,MAAO,CACHC,WAAY,MACZC,QAAS,OACTC,WAAY,UAEhBC,MAAO,GACPC,UAAW,CACPN,QAAS,aAiGNoD,IA5FQ,SAACxE,GACpB,OACI,yBACI4B,UACI5B,EAAM6B,SAAW7B,EAAM8B,kBACjB,mBACA,GAEVC,MAAO,CAAE5B,OAAQ,UAEhBH,EAAMgC,KACH,kBAAC,IAAD,CACIA,KAAMhC,EAAMgC,KACZC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDoC,OAAQ,CACJC,KAAM,UAGVC,OAAQ,CACJD,KAAM,SACNE,IAAK,EACLC,IAAK,OACLC,SAAS,EACTC,SAAS,GAGbC,MAAM,UACNC,QAAS,KACTC,UAAW,KACXC,WAAY,CACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,OACRC,aAAc,GACdC,eAAgB,UAEpBC,SAAU,CACNP,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,UACRC,cAAe,GACfC,eAAgB,UAEpBE,UAAW,EACXC,cAAc,EACdlD,OAAQ,SAACnC,GAAD,OAAOA,EAAES,OACjB6E,YAAY,EACZC,YAAa,GACbC,aAAa,IACbC,SAAS,EACTC,QAAS,CACL,CACIC,OAAQ,QACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,IACXC,WAAY,GACZC,YAAa,EACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACL,CACIC,GAAI,QACJlF,MAAO,CAEH6E,YAAa,OAMjCM,aAAa,QACbvG,MAAOA,IAGX,yBAAKiB,UAAU,wBACX,mD,iCChJpB,6BAGMjB,EAAQ,CACVC,WAAY,cACZC,UAAW,cACXC,SAAU,GACVgD,KAAM,CACFC,OAAQ,CACJC,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBC,MAAO,CACHH,KAAM,CACFC,OAAQ,UACRC,YAAa,KAIzBE,KAAM,CACFJ,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBG,UAAW,CACPL,KAAM,CACFC,OAAQ,cACRC,YAAa,EACbI,cAAe,EACfC,gBAAiB,QAGzBxD,QAAS,CACLC,UAAW,CACPJ,WAAY,cACZK,MAAO,UACPH,SAAU,UACVI,aAAc,MACdC,UAAW,6BACXC,QAAS,WAEbC,MAAO,CACHC,WAAY,MACZC,QAAS,OACTC,WAAY,UAEhBC,MAAO,GACPC,UAAW,CACPN,QAAS,aAuGN+F,IAlGQ,SAACnH,GACpB,OACI,yBACI4B,UACI5B,EAAM6B,SAAW7B,EAAM8B,kBACjB,mBACA,GAEVC,MAAO,CAAE5B,OAAQ,UAEhBH,EAAMgC,KACH,kBAAC,IAAD,CACIA,KAAMhC,EAAMgC,KACZ1C,KAAM,CACF,cACA,UACA,YACA,SACA,QACA,UACA,WACA,YACA,YAEJ8H,QAAQ,MACRnF,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDjB,QAAS,IACTiG,SAAU,EACVC,UAA6B,YAAlBtH,EAAMuB,QAAwB,UAAY,GACrDgG,WAAY,CAAE7C,KAAM,UACpB8C,WAAY,CAAE9C,KAAM,OAAQ+C,OAAO,GACnC9E,OAAQ,CAAEC,OAAQ,cAClBoD,aAAa,IACblD,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,OAE3BiC,QAAS,KACTC,UAAW,KACXC,WAAY,CACRE,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,GACRE,eAAgB,SAChBD,aAAc,IAElBE,SAAU,CACNN,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,UACRE,eAAgB,SAChBD,cAAe,IAEnBiC,MAAO,SAAClH,GAAD,gBAAUmH,KAAKF,MAAMjH,EAAE+C,SAC9BqE,eAAgB,GAChBC,gBAAiB,GACjBC,eAAgB,QAChB5B,QAAS,CACL,CACI6B,SAAU,OACV5B,OAAQ,QACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdE,UAAW,IACXC,WAAY,GACZG,YAAa,SACbL,cAAe,gBACfG,YAAa,EACbC,WAAY,KAWpBmB,SAAS,EACTrH,MAAOA,EACPsH,gBAAiB,IACjBC,cAAe,KAGnB,yBAAKtG,UAAU,wBACX,mD,iCCnJpB,6BAMMjB,EAAQ,CACVC,WAAY,cACZC,UAAW,cACXC,SAAU,GACVgD,KAAM,CACFC,OAAQ,CACJC,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBC,MAAO,CACHH,KAAM,CACFC,OAAQ,UACRC,YAAa,KAIzBE,KAAM,CACFJ,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBG,UAAW,CACPL,KAAM,CACFC,OAAQ,cACRC,YAAa,EACbI,cAAe,EACfC,gBAAiB,QAGzBxD,QAAS,CACLC,UAAW,CACPJ,WAAY,cACZK,MAAO,UACPH,SAAU,UACVI,aAAc,MACdC,UAAW,6BACXC,QAAS,WAEbC,MAAO,CACHC,WAAY,MACZC,QAAS,OACTC,WAAY,UAEhBC,MAAO,GACPC,UAAW,CACPN,QAAS,aAyGN+G,IApGgB,SAACnI,GAC5B,OACI,yBACI4B,UACI5B,EAAM6B,SAAW7B,EAAM8B,kBACjB,mBACA,GAEVC,MAAO,CAAE5B,OAAQ,UAEhBH,EAAMgC,KACH,kBAAC,IAAD,CACIA,KAAMhC,EAAMgC,KACZ1C,KAAM,CACF,cACA,UACA,YACA,SACA,QACA,UACA,WACA,YACA,YAEJ8H,QAAQ,YACRnF,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDjB,QAAS,IACTiG,SAAU,EACVC,UAA6B,YAAlBtH,EAAMuB,QAAwB,UAAY,GACrDgG,WAAY,CAAE7C,KAAM,UACpB8C,WAAY,CAAE9C,KAAM,OAAQ+C,OAAO,GACnC9E,OAAQ,CAAEC,OAAQ,cAClBE,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,OAE3BiC,QAAS,KACTC,UAAW,KACXC,WAAY,CACRE,SAAU,EACVC,YAAa,EACbC,cAAe,GACfC,OAAQ,GACRE,eAAgB,SAChBD,aAAc,IAElBE,SAAU,CACNN,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,UACRE,eAAgB,SAChBD,cAAe,GACf2C,OAAQ,SAAC7E,GAAD,gBACiB,YAAlBvD,EAAMuB,QAAwBgC,EAAQ,IAAM,MAEvD8E,cAAe,SAAC9E,GAAD,gBAAcA,EAAd,MACfmE,MAAO,SAAClH,GAAD,gBAAUmH,KAAKF,MAAMjH,EAAE+C,OAAvB,MACPqE,eAAgB,GAChBC,gBAAiB,GACjBC,eAAgB,QAChB5B,QAAS,CACL,CACI6B,SAAU,OACV5B,OAAQ,QACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdE,UAAW,IACXC,WAAY,GACZG,YAAa,SACbL,cAAe,gBACfG,YAAa,EACbC,WAAY,KAWpBmB,SAAS,EACTrH,MAAOA,EACPsH,gBAAiB,IACjBC,cAAe,KAGnB,yBAAKtG,UAAU,wBACX,mD,iCCxJpB,6BAMMjB,EAAQ,CACVC,WAAY,cACZC,UAAW,cACXC,SAAU,GACVgD,KAAM,CACFC,OAAQ,CACJC,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBC,MAAO,CACHH,KAAM,CACFC,OAAQ,UACRC,YAAa,KAIzBE,KAAM,CACFJ,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBG,UAAW,CACPL,KAAM,CACFC,OAAQ,cACRC,YAAa,EACbI,cAAe,EACfC,gBAAiB,QAGzBxD,QAAS,CACLC,UAAW,CACPJ,WAAY,cACZK,MAAO,UACPH,SAAU,UACVI,aAAc,MACdC,UAAW,6BACXC,QAAS,WAEbC,MAAO,CACHC,WAAY,MACZC,QAAS,OACTC,WAAY,UAEhBC,MAAO,GACPC,UAAW,CACPN,QAAS,aAqGNkH,IAhGgB,SAACtI,GAC5B,OACI,yBACI4B,UACI5B,EAAM6B,SAAW7B,EAAM8B,kBACjB,mBACA,GAEVC,MAAO,CAAE5B,OAAQ,UAEhBH,EAAMgC,KACH,kBAAC,IAAD,CACIA,KAAMhC,EAAMgC,KACZC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDoC,OAAQ,CACJC,KAAM,SACNE,IAAK,GAGTD,OAAQ,CACJD,KAAM,SACNE,IAAK,EACLC,IAAK,OACLC,SAAS,EACTC,SAAS,GAGbC,MAAM,SACNC,QAAS,KACTC,UAAW,KACXC,WAAY,CACRC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,QACRC,aAAc,GACdC,eAAgB,SAChB6C,WAAY,IAEhB5C,SAAU,CACNP,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,UACRC,cAAe,GACfC,eAAgB,SAChB0C,OAAQ,SAAC7E,GAAD,gBAAcA,EAAQ,OAElCiF,QAAS,SAACjF,GAAD,gBAAcoE,KAAKF,MAAMlE,GAAzB,MACTqC,UAAW,EACXC,cAAc,EACdlD,OAAQ,SAACnC,GAAD,OAAOA,EAAES,OACjB6E,YAAY,EACZC,YAAa,GACbC,aAAa,IACbC,SAAS,EACTC,QAAS,CACL,CACIC,OAAQ,QACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,IACXC,WAAY,GACZC,YAAa,EACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACL,CACIC,GAAI,QACJlF,MAAO,CAEH6E,YAAa,OAMjCM,aAAa,QACbvG,MAAOA,IAGX,yBAAKiB,UAAU,wBACX,mD,qCCpJhB6G,EAAOC,E,gBAEPtK,EAAY,CAAC,SAAU,SAE3B,SAASC,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAEhT,SAASS,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxMgB,CAA8BZ,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,ICZI,EAAO,EDYP,EAAY,SAAmBqB,GACjC,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQb,EAAyBU,EAAMzB,GAE3C,OAAoB,IAAM6B,cAAc,MAAO5B,EAAS,CACtD8B,OAAQ,GACRC,QAAS,YACTC,MAAO,GACPC,IAAKR,GACJE,GAAQD,EAAqB,IAAME,cAAc,QAAS,KAAMF,GAAS,KAAM0I,IAAUA,EAAqB,IAAMxI,cAAc,OAAQ,CAC3IO,EAAG,iCACHD,KAAM,UACHmI,IAAWA,EAAsB,IAAMzI,cAAc,OAAQ,CAChEO,EAAG,4KACHD,KAAM,YAINE,EAA0B,IAAMC,YAAW,SAAUV,EAAOM,GAC9D,OAAoB,IAAML,cAAc,EAAW5B,EAAS,CAC1DyB,OAAQQ,GACPN,OChCD,GDkCW,IClCC,CAAC,SAAU,UAE3B,SAAS,IAA2Q,OAA9P,EAAW1B,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAEhT,SAAS,EAAyBE,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxM,CAA8BI,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,ICZI,EAAO,EDYP,EAAa,SAAoBqB,GACnC,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQ,EAAyBH,EAAM,GAE3C,OAAoB,IAAMI,cAAc,MAAO,EAAS,CACtDE,OAAQ,GACRC,QAAS,YACTC,MAAO,GACPC,IAAKR,GACJE,GAAQD,EAAqB,IAAME,cAAc,QAAS,KAAMF,GAAS,KAAM,IAAU,EAAqB,IAAME,cAAc,OAAQ,CAC3IO,EAAG,gBACHD,KAAM,UACH,IAAW,EAAsB,IAAMN,cAAc,OAAQ,CAChEO,EAAG,4OACHD,KAAM,YAIN,EAA0B,IAAMG,YAAW,SAAUV,EAAOM,GAC9D,OAAoB,IAAML,cAAc,EAAY,EAAS,CAC3DH,OAAQQ,GACPN,OChCD,GDkCW,IClCC,CAAC,SAAU,UAE3B,SAAS,IAA2Q,OAA9P,EAAW1B,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAEhT,SAAS,EAAyBE,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxM,CAA8BI,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,IAAI,EAAa,SAAoBqB,GACnC,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQ,EAAyBH,EAAM,GAE3C,OAAoB,IAAMI,cAAc,MAAO,EAAS,CACtDE,OAAQ,GACRC,QAAS,YACTC,MAAO,GACPC,IAAKR,GACJE,GAAQD,EAAqB,IAAME,cAAc,QAAS,KAAMF,GAAS,KAAM,IAAU,EAAqB,IAAME,cAAc,OAAQ,CAC3IO,EAAG,gBACHD,KAAM,UACH,IAAW,EAAsB,IAAMN,cAAc,OAAQ,CAChEO,EAAG,sPACHD,KAAM,YAIN,EAA0B,IAAMG,YAAW,SAAUV,EAAOM,GAC9D,OAAoB,IAAML,cAAc,EAAY,EAAS,CAC3DH,OAAQQ,GACPN,OC7BC2I,GD+BS,IC/BK,CAChB,cACA,UACA,YACA,SACA,QACA,UACA,WACA,YACA,aA8DWC,IA/Ca,SAAC5I,GAKzB,OACI,6BACI,gCACI,wBAAI+B,MAAO,CAAE8G,WAAY,SACpB,kBACmB,OAAf7I,EAAMgC,MACPhC,EAAMgC,KAAKjD,eAAe,kBACpB,iBAXN+J,EAYiB9I,EAAMgC,KAAK+G,eAXrC,IAAIC,KAAKF,GAAIG,sBAYE,gBAGlB,yBACIlH,MAAO,CACHR,QAAS,OACT2H,cAAe,MACfC,eAAgB,SAChBC,SAAU,SAGbpJ,EAAMgC,MAAQhC,EAAMgC,KAAKqH,OACpBrJ,EAAMgC,KAAKqH,OAAOC,KAAI,SAACC,EAAO9K,GAAR,OAClB,yBAAKI,IAAKJ,EAAGmD,UAAU,2BACnB,yBAAKG,MAAO,CAAEyH,aAAc,QAxC1D,SAAgBD,GACZ,IAAKA,EAAMxK,eAAe,UAAW,OAAO,kBAAC,EAAD,MAC5C,OAAQwK,EAAME,QACV,KAAK,EACD,OAAO,kBAAC,EAAD,MACX,KAAK,EACD,OAAO,kBAAC,EAAD,MACX,QACI,OAAO,kBAAC,EAAD,OAiCgBC,CAAOH,IAEXA,EAAMI,SAGfhB,EAAYW,KAAI,SAACC,EAAO9K,GAAR,OACZ,yBAAKI,IAAKJ,EAAGmD,UAAU,2BACnB,yBAAKG,MAAO,CAAEyH,aAAc,QACxB,kBAAC,EAAD,OAEHD,QAtC3B,IAAoBT,I,uMCoFTc,EA/GM,SAAC5J,GAClB,MAAyC6J,IAAMC,SAAS,MAAxD,mBAAOC,EAAP,KAAqBC,EAArB,KAiDA,OAzCAH,IAAMI,WAAU,WACO,OAAfjK,EAAMgC,OACiB,sBAAvBhC,EAAMkK,aACNF,EACIhK,EAAMgC,KACDmI,MAAK,SAAUC,EAAGC,GACf,MAA6B,kBAAtBrK,EAAMsK,YACPF,EAAEG,MAAQF,EAAEE,MACZF,EAAEE,MAAQH,EAAEG,SAErBC,QAAO,SAACC,GAAD,OAAWA,EAAMF,MAAQ,QAGzCP,EACIhK,EAAMgC,KACDwI,QAAO,SAACC,GAAD,OAA4B,OAAjBA,EAAMC,UACxBF,QAAO,SAACC,GAAD,MACmB,eAAvBzK,EAAMkK,cAAgCO,EAAME,QAE/CH,QAAO,SAACC,GAAD,MACmB,iBAAvBzK,EAAMkK,cACwB,OAAxBO,EAAMG,iBAGfT,MAAK,SAAUC,EAAGC,GACf,MAA6B,kBAAtBrK,EAAMsK,YACPF,EAAEG,MAAQF,EAAEE,MACZF,EAAEE,MAAQH,EAAEG,aAInC,CAACvK,EAAMgC,KAAMhC,EAAMkK,aAAclK,EAAMsK,cAWtC,6BACI,yBACI1I,UAAW,0BACXG,MAAO,CACHR,QAAS,OACT4H,eAAgB,SAChBhJ,OAAQ,cACR0K,UAAW,UAGG,OAAjBd,EACG,yBAAKnI,UAAU,wBACX,gDAGJ,2BAAOA,UAAU,iBACb,+BACI,4BACI,6BACA,qCACA,gDACA,2CAGR,+BACKmI,EAAaT,KAAI,SAACmB,EAAOhM,GAAR,OACd,wBAAII,IAAK4L,EAAMK,WACX,4BAAKrM,EAAI,GACT,4BACI,yBACIsD,MAAO,CACHgJ,OAAQ,UACRC,eAAgB,YAChB3K,MAAO,eAEX4K,QAAS,WACLjL,EAAMkL,gBAAgBT,KAGzBA,EAAMK,UACP,kBAAC,IAAD,CACIlJ,UAAU,YACVG,MAAO,CAAEoJ,WAAY,WAIjC,6BAvDLC,EAwD4BX,EAAMY,aAvD/C,GACA,GAAN,OAAU1D,KAAKF,MAAO2D,EAAM,GAAM,IAAM,GAAxC,YAEM,GAAN,OAAUA,EAAV,aAsDwB,4BAAKX,EAAMF,QA1D3C,IAA2Ba,U,iBC1CzBzK,EAAQ,CACVC,WAAY,cACZC,UAAW,cACXC,SAAU,GACVgD,KAAM,CACFC,OAAQ,CACJC,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBC,MAAO,CACHH,KAAM,CACFC,OAAQ,UACRC,YAAa,KAIzBE,KAAM,CACFJ,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBG,UAAW,CACPL,KAAM,CACFC,OAAQ,cACRC,YAAa,EACbI,cAAe,EACfC,gBAAiB,QAGzBxD,QAAS,CACLC,UAAW,CACPJ,WAAY,cACZK,MAAO,UACPH,SAAU,UACVI,aAAc,MACdC,UAAW,6BACXC,QAAS,WAEbC,MAAO,CACHC,WAAY,MACZC,QAAS,OACTC,WAAY,UAEhBC,MAAO,GACPC,UAAW,CACPN,QAAS,aAsFN+F,EAjFQ,SAACnH,GACpB,OACI,yBAAK4B,UAAW,GAAIG,MAAO,CAAE5B,OAAQ,UAChCH,EAAMgC,KACH,kBAAC,IAAD,CACIA,KAAMhC,EAAMgC,KACZ1C,KAAMU,EAAMV,KACZ8H,QAASpH,EAAMoH,QACfnF,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDjB,QAAS,IACTiG,SAAU,EAEVE,WAAY,CAAE7C,KAAM,UACpB8C,WAAY,CAAE9C,KAAM,OAAQ+C,OAAO,GACnC9E,OAAQ,CAAEC,OAAQ,cAClBoD,aAAa,IACblD,YAAa,CACTC,KAAM,QACNC,UAAW,CAAC,CAAC,SAAU,OAE3BiC,QAAS,KACTC,UAAW,KACXC,WAAY,CACRE,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQxF,EAAMsL,aACd5F,eAAgB,SAChBD,aAAc,IAElBE,SAAU,CACNN,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQxF,EAAMuL,WACd7F,eAAgB,SAChBD,cAAe,IAEnBiC,MAAO,SAAClH,GAAD,gBAAUmH,KAAKF,MAAMjH,EAAE+C,SAC9BqE,eAAgB,GAChBC,gBAAiB,GACjBC,eAAgB,QA0BhBE,SAAS,EACTrH,MAAOA,EACPsH,gBAAiB,IACjBC,cAAe,KAGnB,yBAAKtG,UAAU,wBACX,gECrHd4J,EAAOC,EAAQ,KAIfC,EAAc,CAChB,cACA,UACA,YACA,SACA,QACA,UACA,WACA,YACA,YAqWWC,UAlWA,SAAC3L,GACZ,IA8JI4L,EA9JJ,EAAmC/B,WAAe,MAAlD,mBAAOgC,EAAP,KAAkBC,EAAlB,KACA,EAAmDjC,WAAe,MAAlE,mBAAOkC,EAAP,KAA0BC,EAA1B,KAEA,EAAyCnC,WAAe,MAAxD,mBAAOoC,EAAP,KAAqBC,EAArB,KACA,EAA6CrC,WAAe,MAA5D,mBAAOsC,EAAP,KAAuBC,EAAvB,KACA,EAAmDvC,WAAe,MAAlE,mBAAOwC,EAAP,KAA0BC,EAA1B,KACA,EAAyCzC,WAAe,MAAxD,mBAAO0C,EAAP,KAAqBC,EAArB,KACA,EAA+B3C,WAAe,MAA9C,mBAAO4C,EAAP,KAAgBC,EAAhB,KACA,EAAmC7C,WAAe,MAAlD,mBAAO8C,EAAP,KAAkBC,EAAlB,KACA,EAA+C/C,WAAe,IAA9D,mBAAOgD,EAAP,KAAwBC,EAAxB,KAGAjD,aAAgB,WAAM,4CAClB,WAAkCkD,EAAKrI,GAAvC,eAAA0F,EAAA,sEACyB4C,MAAMD,GAD/B,UACQE,EADR,OAEiB,SAATvI,EAFR,gCAE0CuI,EAASC,OAFnD,OAEyBD,EAFzB,iCAGsB,SAATvI,EAHb,kCAG+CuI,EAASE,OAHxD,QAG8BF,EAH9B,wCAIWA,GAJX,6CADkB,uBAAC,SAAD,qCAQlBG,CACI,2CACA,QACFC,MAAK,SAACC,GACJxB,EAAcwB,QAEnB,IAEHzD,aAAgB,WAKZmC,EAJkB,OAAdH,EAKAA,EAAUrB,QAAO,SAAC+C,GAAD,OACbA,EAAMzC,UAAU0C,cAAcC,SAC1BZ,EAAgBW,kBANF,QAU3B,CAAC3B,EAAWgB,IAgIf,IAAI,EACAhD,WAAe,QADnB,mBAAK6D,GAAL,KAA2BC,GAA3B,KAEI,GAAgD9D,WAAe,MAAnE,qBAAK+D,GAAL,MAA0BC,GAA1B,MAoBA,IAAI,GAAqChE,WAAe,IAAxD,qBAAKiE,GAAL,MAAoBC,GAApB,MAEA,OACI,2BACI,gBAACC,EAAA,EAAD,KACI,6BAlNF,sBAmNE,wBACIC,KAAK,cACLC,QAAQ,qDAGhB,gBAACC,EAAA,EAAD,CACIC,KAAK,SACLC,UAAU,EACVC,WAAYZ,GACZa,mBAAoBX,GACpBY,eArBZ,WACIb,GAAwB,WAsBpB,gBAACc,EAAA,EAAD,CACIC,SAAUZ,GACVa,WAAY,WACR,GAAIb,GAAcnP,OAAQ,CACtB,IAAIiQ,EAAW,YAAOd,IACtBc,EAAcA,EAAYC,MAAM,GAChCd,GAAkBa,OAI9B,gBAACE,EAAA,EAAD,CACIC,SAAS,SACTV,UAAU,EACVtO,MAAM,iBACNiP,SAAS,GACTC,MAAO,CACH,CACIlP,MAAO,kBACPmP,YACI,4EAIJhB,QACI,2BACI,uBACItM,UAAU,sBACVG,MAAO,CAAEmH,cAAe,QAExB,yBACIiG,QAAQ,YACRpN,MAAO,CACHjB,SAAU,WAHlB,yBAQA,yBACIiB,MAAO,CACHqN,SAAU,QACV/O,MAAO,OACPF,OAAQ,cACRgL,WAAY,OAEhBzG,KAAK,OACL2K,GAAG,YACHpB,KAAK,YACLqB,SAAU,kBA/F1CC,aAAa3D,QACbA,EAAyB4D,YAAW,WAChC,IAAIC,EAAYC,SAASC,eAAe,aAAapM,MACrDuJ,EAAoB2C,KACrB,UA8FqB,gBAACG,EAAD,CACI5N,KAAM+J,EACN8D,iBAAiB,EACjBC,gBA1FhC,SAAwBC,GAEpB,IAAIC,EAAgB,CAChBjQ,MAAOgQ,EAAUhQ,MACjB2E,KAAMqL,EAAUE,UAChBC,YAAaH,EAAUG,YACvBC,UAAWJ,EAAUI,UACrBC,YAAaL,EAAUK,aAI3BvC,GAAuBmC,GACvBrC,GAAwB,UA+EIzC,gBAAiB,SAACT,GAAD,OA5NjD,SAAmBA,GAAO,4CAGtB,WAAkCsC,EAAKrI,GAAvC,eAAA0F,EAAA,sEACyB4C,MAAMD,GAD/B,UACQE,EADR,OAEiB,SAATvI,EAFR,gCAE0CuI,EAASC,OAFnD,OAEyBD,EAFzB,iCAGsB,SAATvI,EAHb,kCAG+CuI,EAASE,OAHxD,QAG8BF,EAH9B,wCAIWA,GAJX,6CAHsB,sBAClBN,IAAclC,EAAMK,WADF,6CAUtBsC,CACI,kDAAoD3C,EAAM4F,GAC1D,QACFhD,MAAK,SAACC,GACJ,IAEIgD,EADAzL,EAAM,EAEN0L,EAAS,GAETC,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5ClD,EAAImD,SAAQ,SAAClD,GACLA,EAAMmD,SAAW7L,IAAKA,EAAM0I,EAAMmD,UACtCH,EAAOI,KAAKpD,EAAMmD,UACTnD,EAAMmD,SACfF,EAAa9E,EAAYnM,QAAQgO,EAAMqD,cAG3C,IAAIC,EAAMlJ,KAAKF,MAAM+D,EAAKqF,IAAIN,GAAU,IACpCO,EAAMnJ,KAAKF,MAAMgD,EAAMY,YAAc,IAEzCiF,EAAWzL,EAAM,GAIjB,IAHA,IAAIkM,EAAO,GACPC,EAAO,GACPC,EAAUtJ,KAAKF,MAAM5C,EAAMyL,GACtB7R,EAAI,EAAGA,EAAIkJ,KAAK/C,IAAI0L,EAAUQ,EAAY,EAAND,GAAUpS,IACnDsS,EAAKJ,KAAKlS,EAAIwS,GACdD,EAAKL,KAAK,GAEdrD,EAAImD,SAAQ,SAAClD,GACTwD,EAAKN,SAAQ,SAACS,EAAKC,GAEX5D,EAAMmD,UAAYQ,GAClB3D,EAAMmD,SAAWQ,EAAMD,GAEvBD,EAAKG,WAMjB,IADA,IAAIC,EAAe,GAEX3S,EAAI,EACRA,EAAIkJ,KAAK/C,IAAI0L,EAAUQ,EAA0B,EAApBnJ,KAAK/C,IAAI,GAAIiM,IAC1CpS,IAEA2S,EAAaT,KAAK,CACdD,SAAU/I,KAAKF,OAAOsJ,EAAKtS,GAAKwS,EAAU,GAAK,IAC/CI,UAAWL,EAAKvS,KAGxByN,EACIkF,EAAavC,MAAMlH,KAAK9C,IAAI,EAAGiM,EAA0B,EAApBnJ,KAAK/C,IAAI,GAAIiM,MAEtDjE,EAAcnC,EAAMK,WACpBwB,EAAsBuE,EAAM,GAAK,MAAQA,GACzCnE,EAAYoE,GAGZ,IADA,IAAIQ,EAAkB,GACb7S,EAAI,EAAGA,EAAIiN,EAAY/M,OAAQF,IACpC6S,EAAgBX,KAAK,CACjBtB,GAAI3D,EAAYjN,GAChBiJ,MAAOgE,EAAYjN,GACnB8E,MAAOiN,EAAa/R,KAG5B2N,EAAmBkF,GAInB,IAFA,IAAIC,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAChCC,EAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAChC/S,EAAI,EAAGA,EAAI8S,EAAK5S,OAAQF,IAC7B,IAAK,IAAIgT,EAAO,EAAGA,EAAO,GAAIA,GAlEX,EAmEfF,EAAK9S,GAAGkS,KAAKc,GACbD,EAAU/S,GAAGkS,KAAK,GAG1BrD,EAAImD,SAAQ,SAAClD,GACT,IAAImE,EAAM,IAAI1I,KAAKuE,EAAMoE,OAAOC,SAC5BH,EAAO,IAAIzI,KAAKuE,EAAMoE,OAAOE,WACjCL,EAAUE,GAAK/J,KAAKmK,MAAML,EA1EP,SA6EvB,IADA,IAAIM,EAAe,GACVvR,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIwR,EAAI,EAAGA,EAAI,GAAIA,GA9EL,EA+EfD,EAAapB,KAAK,CACdsB,KAAU,GAAJzR,EAASwR,EACfE,UAAWV,EAAUhR,GAAGmH,KAAKmK,MAAME,EAjFxB,MAqFvBxF,EAAiBuF,MA0HWI,CAAU1H,MAGlB,2BACA,0BAAKkC,GAAa,qBAClB,qBACI5K,MAAO,CACHjB,SAAU,QACVsR,aAAc,QAHtB,oBAMsB,IAClB,wBAAMxQ,UAAU,cACC,OAAZ6K,EAAA,UACQA,EADR,YAEK,OACF,IAXZ,wBAY0B,IACtB,wBAAM7K,UAAU,cACW,OAAtByK,EAAA,UACQA,EADR,YAEK,QAGd,wBACIzK,UAAU,YACVG,MAAO,CAAEsQ,YAAa,QAF1B,uBAMA,gBAACC,EAAD,CACIhT,KAAM,CAAC,aACP8H,QAAS,WACTkE,aAAc,qBACdC,WAAY,YACZvJ,KAAMiK,IAEV,2BACA,0BAAKU,GAAa,qBAClB,qBACI5K,MAAO,CACHjB,SAAU,QACVsR,aAAc,QAHtB,0BAQA,wBACIxQ,UAAU,YACVG,MAAO,CAAEsQ,YAAa,QAF1B,uBAMA,gBAAC1Q,EAAA,EAAD,CACIK,KAAMmK,IAEV,2BACA,0BAAKQ,GAAa,qBAClB,qBACI5K,MAAO,CACHjB,SAAU,QACVsR,aAAc,QAHtB,mCAQA,wBACIxQ,UAAU,YACVG,MAAO,CAAEsQ,YAAa,QAF1B,uBAMA,gBAACC,EAAD,CACIhT,KAAM,CAAC,aACP8H,QAAS,OACTkE,aACI,iDAEJC,WAAY,YACZvJ,KAAMuK","file":"static/js/8.b24f152e.chunk.js","sourcesContent":["var _g, _g2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgTimeline = function SvgTimeline(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    enableBackground: \"new 0 0 24 24\",\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"rect\", {\n    fill: \"none\",\n    height: 24,\n    width: 24\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23,8c0,1.1-0.9,2-2,2c-0.18,0-0.35-0.02-0.51-0.07l-3.56,3.55C16.98,13.64,17,13.82,17,14c0,1.1-0.9,2-2,2s-2-0.9-2-2 c0-0.18,0.02-0.36,0.07-0.52l-2.55-2.55C10.36,10.98,10.18,11,10,11s-0.36-0.02-0.52-0.07l-4.55,4.56C4.98,15.65,5,15.82,5,16 c0,1.1-0.9,2-2,2s-2-0.9-2-2s0.9-2,2-2c0.18,0,0.35,0.02,0.51,0.07l4.56-4.55C8.02,9.36,8,9.18,8,9c0-1.1,0.9-2,2-2s2,0.9,2,2 c0,0.18-0.02,0.36-0.07,0.52l2.55,2.55C14.64,12.02,14.82,12,15,12s0.36,0.02,0.52,0.07l3.55-3.56C19.02,8.35,19,8.18,19,8 c0-1.1,0.9-2,2-2S23,6.9,23,8z\",\n    fill: \"#fff\"\n  }))))));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTimeline, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/timeline.c98753a4.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\n\r\n// This pie chart is used to show the server distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 16,\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartServerDistributionPie = (props) => {\r\n    function GetTotalPopulation() {\r\n        let total = 0;\r\n        for (let i = 0; i < props.data.length; i++) {\r\n            total += props.data[i].value;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsivePie\r\n                    data={props.data}\r\n                    margin={{ top: 30, right: 110, bottom: 30, left: 110 }}\r\n                    valueFormat=\" >-.1f\"\r\n                    sortByValue={true}\r\n                    // colors={(d) => d.color}\r\n                    padAngle={0.7}\r\n                    cornerRadius={3}\r\n                    activeOuterRadiusOffset={8}\r\n                    colors={{ scheme: \"category10\" }}\r\n                    borderWidth={1}\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 0.2]],\r\n                    }}\r\n                    enableArcLinkLabels={true}\r\n                    arcLinkLabelsSkipAngle={10}\r\n                    arcLinkLabelsThickness={2}\r\n                    arcLinkLabelsColor={{ from: \"color\" }}\r\n                    arcLabel={function (e) {\r\n                        return `${(\r\n                            (e.value / GetTotalPopulation()) *\r\n                            100\r\n                        ).toFixed(1)}%`;\r\n                    }}\r\n                    arcLabelsSkipAngle={10}\r\n                    arcLabelsRadiusOffset={0.7}\r\n                    arcLabelsTextColor={\"white\"}\r\n                    // legends={[\r\n                    //     {\r\n                    //         anchor: \"right\",\r\n                    //         direction: \"column\",\r\n                    //         justify: false,\r\n                    //         translateX: 0,\r\n                    //         translateY: 0,\r\n                    //         itemsSpacing: 0,\r\n                    //         itemWidth: 120,\r\n                    //         itemHeight: 25,\r\n                    //         itemTextColor: \"#fff\",\r\n                    //         itemDirection: \"left-to-right\",\r\n                    //         itemOpacity: 1,\r\n                    //         symbolSize: 18,\r\n                    //         symbolShape: \"circle\",\r\n                    //         effects: [\r\n                    //             {\r\n                    //                 on: \"hover\",\r\n                    //                 style: {\r\n                    //                     itemTextColor: \"#000\",\r\n                    //                 },\r\n                    //             },\r\n                    //         ],\r\n                    //     },\r\n                    // ]}\r\n                    theme={theme}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartServerDistributionPie;\r\n","import React from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\n// This chart is used to show time-of-day distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartTimeOfDay = (props) => {\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveLine\r\n                    data={props.data}\r\n                    margin={{ top: 20, right: 120, bottom: 60, left: 70 }}\r\n                    xScale={{\r\n                        type: \"linear\",\r\n                    }}\r\n                    //xFormat=\"time:%Y-%m-%dT%H:%M:%sZ\"\r\n                    yScale={{\r\n                        type: \"linear\",\r\n                        min: 0,\r\n                        max: \"auto\",\r\n                        stacked: false,\r\n                        reverse: false,\r\n                    }}\r\n                    //yFormat=\" >-.2f\"\r\n                    curve=\"natural\"\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        orient: \"bottom\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Hour\",\r\n                        legendOffset: 40,\r\n                        legendPosition: \"middle\",\r\n                    }}\r\n                    axisLeft={{\r\n                        orient: \"left\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendOffset: -50,\r\n                        legendPosition: \"middle\",\r\n                    }}\r\n                    lineWidth={4}\r\n                    enablePoints={false}\r\n                    colors={(d) => d.color}\r\n                    enableArea={false}\r\n                    areaOpacity={0.3}\r\n                    enableSlices=\"x\"\r\n                    useMesh={true}\r\n                    legends={[\r\n                        {\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 0,\r\n                            itemDirection: \"left-to-right\",\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            symbolShape: \"circle\",\r\n                            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                            effects: [\r\n                                {\r\n                                    on: \"hover\",\r\n                                    style: {\r\n                                        //itemBackground: \"rgba(255, 255, 255, .03)\",\r\n                                        itemOpacity: 1,\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]}\r\n                    motionConfig=\"stiff\"\r\n                    theme={theme}\r\n                ></ResponsiveLine>\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartTimeOfDay;\r\n","import React from \"react\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartDayOfWeek = (props) => {\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveBar\r\n                    data={props.data}\r\n                    keys={[\r\n                        \"Argonnessen\",\r\n                        \"Cannith\",\r\n                        \"Ghallanda\",\r\n                        \"Khyber\",\r\n                        \"Orien\",\r\n                        \"Sarlona\",\r\n                        \"Thelanis\",\r\n                        \"Wayfinder\",\r\n                        \"Hardcore\",\r\n                    ]}\r\n                    indexBy=\"day\"\r\n                    margin={{ top: 20, right: 120, bottom: 40, left: 70 }}\r\n                    padding={0.15}\r\n                    minValue={0}\r\n                    groupMode={props.display === \"Grouped\" ? \"grouped\" : \"\"}\r\n                    valueScale={{ type: \"linear\" }}\r\n                    indexScale={{ type: \"band\", round: true }}\r\n                    colors={{ scheme: \"category10\" }}\r\n                    enableSlices=\"x\"\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 1.6]],\r\n                    }}\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"\",\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: 32,\r\n                    }}\r\n                    axisLeft={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: -50,\r\n                    }}\r\n                    label={(d) => `${Math.round(d.value)}`}\r\n                    labelSkipWidth={25}\r\n                    labelSkipHeight={12}\r\n                    labelTextColor={\"white\"}\r\n                    legends={[\r\n                        {\r\n                            dataFrom: \"keys\",\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 2,\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            symbolShape: \"circle\",\r\n                            itemDirection: \"left-to-right\",\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            // effects: [\r\n                            //     {\r\n                            //         on: \"hover\",\r\n                            //         style: {\r\n                            //             itemOpacity: 1,\r\n                            //         },\r\n                            //     },\r\n                            // ],\r\n                        },\r\n                    ]}\r\n                    animate={true}\r\n                    theme={theme}\r\n                    motionStiffness={300}\r\n                    motionDamping={30}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDayOfWeek;\r\n","import React from \"react\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\n\r\n// This chart is used to show class distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartClassDistribution = (props) => {\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveBar\r\n                    data={props.data}\r\n                    keys={[\r\n                        \"Argonnessen\",\r\n                        \"Cannith\",\r\n                        \"Ghallanda\",\r\n                        \"Khyber\",\r\n                        \"Orien\",\r\n                        \"Sarlona\",\r\n                        \"Thelanis\",\r\n                        \"Wayfinder\",\r\n                        \"Hardcore\",\r\n                    ]}\r\n                    indexBy=\"className\"\r\n                    margin={{ top: 20, right: 120, bottom: 80, left: 70 }}\r\n                    padding={0.15}\r\n                    minValue={0}\r\n                    groupMode={props.display === \"Grouped\" ? \"grouped\" : \"\"}\r\n                    valueScale={{ type: \"linear\" }}\r\n                    indexScale={{ type: \"band\", round: true }}\r\n                    colors={{ scheme: \"category10\" }}\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 1.6]],\r\n                    }}\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: -45,\r\n                        legend: \"\",\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: 32,\r\n                    }}\r\n                    axisLeft={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: -50,\r\n                        format: (value) =>\r\n                            `${props.display === \"Grouped\" ? value + \"%\" : \"\"}`,\r\n                    }}\r\n                    tooltipFormat={(value) => `${value}%`}\r\n                    label={(d) => `${Math.round(d.value)}%`}\r\n                    labelSkipWidth={20}\r\n                    labelSkipHeight={18}\r\n                    labelTextColor={\"white\"}\r\n                    legends={[\r\n                        {\r\n                            dataFrom: \"keys\",\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 2,\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            symbolShape: \"circle\",\r\n                            itemDirection: \"left-to-right\",\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            // effects: [\r\n                            //     {\r\n                            //         on: \"hover\",\r\n                            //         style: {\r\n                            //             itemOpacity: 1,\r\n                            //         },\r\n                            //     },\r\n                            // ],\r\n                        },\r\n                    ]}\r\n                    animate={true}\r\n                    theme={theme}\r\n                    motionStiffness={300}\r\n                    motionDamping={30}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartClassDistribution;\r\n","import React from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\n// This chart is used to show level distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartLevelDistribution = (props) => {\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveLine\r\n                    data={props.data}\r\n                    margin={{ top: 20, right: 120, bottom: 60, left: 70 }}\r\n                    xScale={{\r\n                        type: \"linear\",\r\n                        min: 1,\r\n                    }}\r\n                    //xFormat=\"time:%Y-%m-%dT%H:%M:%sZ\"\r\n                    yScale={{\r\n                        type: \"linear\",\r\n                        min: 0,\r\n                        max: \"auto\",\r\n                        stacked: false,\r\n                        reverse: false,\r\n                    }}\r\n                    //yFormat=\" >-.2f\"\r\n                    curve=\"linear\"\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        orient: \"bottom\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Level\",\r\n                        legendOffset: 40,\r\n                        legendPosition: \"middle\",\r\n                        tickValues: 30,\r\n                    }}\r\n                    axisLeft={{\r\n                        orient: \"left\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendOffset: -50,\r\n                        legendPosition: \"middle\",\r\n                        format: (value) => `${value + \"%\"}`,\r\n                    }}\r\n                    yFormat={(value) => `${Math.round(value)}%`}\r\n                    lineWidth={4}\r\n                    enablePoints={false}\r\n                    colors={(d) => d.color}\r\n                    enableArea={false}\r\n                    areaOpacity={0.3}\r\n                    enableSlices=\"x\"\r\n                    useMesh={true}\r\n                    legends={[\r\n                        {\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 0,\r\n                            itemDirection: \"left-to-right\",\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            symbolShape: \"circle\",\r\n                            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                            effects: [\r\n                                {\r\n                                    on: \"hover\",\r\n                                    style: {\r\n                                        //itemBackground: \"rgba(255, 255, 255, .03)\",\r\n                                        itemOpacity: 1,\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]}\r\n                    motionConfig=\"stiff\"\r\n                    theme={theme}\r\n                ></ResponsiveLine>\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartLevelDistribution;\r\n","var _path, _path2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgOnline = function SvgOnline(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0V0zm0 0h24v24H0V0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\",\n    fill: \"#0c0\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgOnline, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/online.bddf1de8.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgOffline = function SvgOffline(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\",\n    fill: \"#c00\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgOffline, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/offline.6892fc6f.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgPending = function SvgPending(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\",\n    fill: \"#00c\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgPending, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/pending.32662a4f.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { ReactComponent as OnlineSVG } from \"../assets/global/online.svg\";\r\nimport { ReactComponent as OfflineSVG } from \"../assets/global/offline.svg\";\r\nimport { ReactComponent as PendingSVG } from \"../assets/global/pending.svg\";\r\n\r\nconst ServerNames = [\r\n    \"Argonnessen\",\r\n    \"Cannith\",\r\n    \"Ghallanda\",\r\n    \"Khyber\",\r\n    \"Orien\",\r\n    \"Sarlona\",\r\n    \"Thelanis\",\r\n    \"Wayfinder\",\r\n    \"Hardcore\",\r\n];\r\n\r\nfunction GetSVG(world) {\r\n    if (!world.hasOwnProperty(\"Status\")) return <PendingSVG />;\r\n    switch (world.Status) {\r\n        case 0:\r\n            return <OfflineSVG />;\r\n        case 1:\r\n            return <OnlineSVG />;\r\n        default:\r\n            return <PendingSVG />;\r\n    }\r\n}\r\n\r\nconst ServerStatusDisplay = (props) => {\r\n    function PrettyTime(dt) {\r\n        return new Date(dt).toLocaleTimeString();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n                <h5 style={{ fontWeight: \"bold\" }}>\r\n                    {\"Server status \" +\r\n                        (props.data !== null &&\r\n                        props.data.hasOwnProperty(\"LastUpdateTime\")\r\n                            ? \"last updated \" +\r\n                              PrettyTime(props.data.LastUpdateTime)\r\n                            : \"loading...\")}\r\n                </h5>\r\n            </center>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"center\",\r\n                    flexWrap: \"wrap\",\r\n                }}\r\n            >\r\n                {props.data && props.data.Worlds\r\n                    ? props.data.Worlds.map((world, i) => (\r\n                          <div key={i} className=\"server-status-indicator\">\r\n                              <div style={{ paddingRight: \"5px\" }}>\r\n                                  {GetSVG(world)}\r\n                              </div>\r\n                              {world.Name}\r\n                          </div>\r\n                      ))\r\n                    : ServerNames.map((world, i) => (\r\n                          <div key={i} className=\"server-status-indicator\">\r\n                              <div style={{ paddingRight: \"5px\" }}>\r\n                                  <PendingSVG />\r\n                              </div>\r\n                              {world}\r\n                          </div>\r\n                      ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ServerStatusDisplay;\r\n","import React from \"react\";\r\nimport { ReactComponent as TimelineSVG } from \"../assets/global/timeline.svg\";\r\n\r\nconst ContentTable = (props) => {\r\n    const [filteredData, set_filteredData] = React.useState(null);\r\n\r\n    function generateLevelString(quest) {\r\n        return `${quest.CR_Heroic ? \"Heroic: \" + quest.CR_Heroic : \"\"}${\r\n            quest.CR_Heroic && quest.CR_Epic ? \" / \" : \"\"\r\n        }${quest.CR_Epic ? \"Epic: \" + quest.CR_Epic : \"\"}`;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (props.data === null) return;\r\n        if (props.activeFilter === \"By Adventure Pack\") {\r\n            set_filteredData(\r\n                props.data\r\n                    .sort(function (a, b) {\r\n                        return props.activeOrder === \"Least Popular\"\r\n                            ? a.Count - b.Count\r\n                            : b.Count - a.Count;\r\n                    })\r\n                    .filter((quest) => quest.Count > 100)\r\n            );\r\n        } else {\r\n            set_filteredData(\r\n                props.data\r\n                    .filter((quest) => quest.Patron !== null)\r\n                    .filter((quest) =>\r\n                        props.activeFilter === \"Raids Only\" ? quest.Raid : true\r\n                    )\r\n                    .filter((quest) =>\r\n                        props.activeFilter === \"Free to Play\"\r\n                            ? quest.AdventurePack === null\r\n                            : true\r\n                    )\r\n                    .sort(function (a, b) {\r\n                        return props.activeOrder === \"Least Popular\"\r\n                            ? a.Count - b.Count\r\n                            : b.Count - a.Count;\r\n                    })\r\n            );\r\n        }\r\n    }, [props.data, props.activeFilter, props.activeOrder]); // Only filter the data when a) the data has changed, or b) the filter has changed\r\n\r\n    function averageTimeString(sec) {\r\n        if (sec > 60) {\r\n            return `${Math.round((sec / 60) * 10) / 10} minutes`;\r\n        } else {\r\n            return `${sec} seconds`;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                className={\"content-table-container\"}\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    height: \"min-content\",\r\n                    maxHeight: \"300px\",\r\n                }}\r\n            >\r\n                {filteredData === null ? (\r\n                    <div className=\"loading-data-message\">\r\n                        <h5>Loading data...</h5>\r\n                    </div>\r\n                ) : (\r\n                    <table className=\"content-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Quest</th>\r\n                                <th>Average Duration</th>\r\n                                <th>Instances</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {filteredData.map((quest, i) => (\r\n                                <tr key={quest.QuestName}>\r\n                                    <td>{i + 1}</td>\r\n                                    <td>\r\n                                        <div\r\n                                            style={{\r\n                                                cursor: \"pointer\",\r\n                                                textDecoration: \"underline\",\r\n                                                width: \"max-content\",\r\n                                            }}\r\n                                            onClick={() => {\r\n                                                props.handleSelection(quest);\r\n                                            }}\r\n                                        >\r\n                                            {quest.QuestName}\r\n                                            <TimelineSVG\r\n                                                className=\"link-icon\"\r\n                                                style={{ marginLeft: \"8px\" }}\r\n                                            />\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        {averageTimeString(quest.AverageTime)}\r\n                                    </td>\r\n                                    <td>{quest.Count}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContentTable;\r\n","import React from \"react\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartDayOfWeek = (props) => {\r\n    return (\r\n        <div className={\"\"} style={{ height: \"400px\" }}>\r\n            {props.data ? (\r\n                <ResponsiveBar\r\n                    data={props.data}\r\n                    keys={props.keys}\r\n                    indexBy={props.indexBy}\r\n                    margin={{ top: 20, right: 30, bottom: 40, left: 70 }}\r\n                    padding={0.15}\r\n                    minValue={0}\r\n                    // groupMode={props.display === \"Grouped\" ? \"grouped\" : \"\"}\r\n                    valueScale={{ type: \"linear\" }}\r\n                    indexScale={{ type: \"band\", round: true }}\r\n                    colors={{ scheme: \"category10\" }}\r\n                    enableSlices=\"x\"\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 1.6]],\r\n                    }}\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: props.legendBottom,\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: 32,\r\n                    }}\r\n                    axisLeft={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: props.legendLeft,\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: -50,\r\n                    }}\r\n                    label={(d) => `${Math.round(d.value)}`}\r\n                    labelSkipWidth={25}\r\n                    labelSkipHeight={12}\r\n                    labelTextColor={\"white\"}\r\n                    // legends={[\r\n                    //     {\r\n                    //         dataFrom: \"keys\",\r\n                    //         anchor: \"right\",\r\n                    //         direction: \"column\",\r\n                    //         justify: false,\r\n                    //         translateX: 120,\r\n                    //         translateY: 0,\r\n                    //         itemsSpacing: 2,\r\n                    //         itemWidth: 110,\r\n                    //         itemHeight: 20,\r\n                    //         symbolShape: \"circle\",\r\n                    //         itemDirection: \"left-to-right\",\r\n                    //         itemOpacity: 1,\r\n                    //         symbolSize: 12,\r\n                    //         // effects: [\r\n                    //         //     {\r\n                    //         //         on: \"hover\",\r\n                    //         //         style: {\r\n                    //         //             itemOpacity: 1,\r\n                    //         //         },\r\n                    //         //     },\r\n                    //         // ],\r\n                    //     },\r\n                    // ]}\r\n                    animate={true}\r\n                    theme={theme}\r\n                    motionStiffness={300}\r\n                    motionDamping={30}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Click on a quest to view data</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDayOfWeek;\r\n","import * as React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Card from \"../components/Card\";\r\nimport ReportIssueForm from \"./ReportIssueForm\";\r\nimport ChartServerDistributionPie from \"./ChartServerDistributionPie\";\r\nimport ChartTimeOfDay from \"./ChartTimeOfDay\";\r\nimport ChartDayOfWeek from \"./ChartDayOfWeek\";\r\nimport ChartClassDistribution from \"./ChartClassDistribution\";\r\nimport ChartLevelDistribution from \"./ChartLevelDistribution\";\r\nimport ServerStatusDisplay from \"./ServerStatusDisplay\";\r\nimport QuestTable from \"./QuestTable\";\r\nimport PopupMessage from \"./PopupMessage\";\r\nimport ChartQuestActivity from \"./ChartQuestActivity\";\r\nconst math = require(\"mathjs\");\r\n\r\nconst TITLE = \"DDO Quest Activity\";\r\n\r\nconst serverNames = [\r\n    \"Argonnessen\",\r\n    \"Cannith\",\r\n    \"Ghallanda\",\r\n    \"Khyber\",\r\n    \"Orien\",\r\n    \"Sarlona\",\r\n    \"Thelanis\",\r\n    \"Wayfinder\",\r\n    \"Hardcore\",\r\n];\r\n\r\nconst Quests = (props) => {\r\n    const [questList, set_questList] = React.useState(null);\r\n    const [filteredQuestList, set_filteredQuestList] = React.useState(null);\r\n    // const [questData, set_questData] = React.useState(null);\r\n    const [durationData, set_durationData] = React.useState(null);\r\n    const [serverDistData, set_serverDistData] = React.useState(null);\r\n    const [standardDeviation, set_standardDeviation] = React.useState(null);\r\n    const [datetimeData, set_datetimeData] = React.useState(null);\r\n    const [average, set_average] = React.useState(null);\r\n    const [questName, set_questName] = React.useState(null);\r\n    const [questNameFilter, set_questNameFilter] = React.useState(\"\");\r\n\r\n    // Fetch the data on page load\r\n    React.useEffect(() => {\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/activity\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_questList(val);\r\n        });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (questList === null) {\r\n            set_filteredQuestList(null);\r\n            return;\r\n        }\r\n        set_filteredQuestList(\r\n            questList.filter((entry) =>\r\n                entry.QuestName.toLowerCase().includes(\r\n                    questNameFilter.toLowerCase()\r\n                )\r\n            )\r\n        );\r\n    }, [questList, questNameFilter]);\r\n\r\n    function loadQuest(quest) {\r\n        if (questName === quest.QuestName) return;\r\n\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/activity?quest=\" + quest.Id,\r\n            \"json\"\r\n        ).then((val) => {\r\n            const HOUR_BIN_WIDTH = 2;\r\n            let max = 0;\r\n            let bincount = 30;\r\n            let values = [];\r\n            let total = 0;\r\n            let servercounts = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n            val.forEach((entry) => {\r\n                if (entry.Duration > max) max = entry.Duration;\r\n                values.push(entry.Duration);\r\n                total += entry.Duration;\r\n                servercounts[serverNames.indexOf(entry.Server)]++;\r\n            });\r\n\r\n            let std = Math.round(math.std(values) / 60);\r\n            let ave = Math.round(quest.AverageTime / 60);\r\n\r\n            bincount = max / 60;\r\n            let bins = [];\r\n            let freq = [];\r\n            let binstep = Math.round(max / bincount);\r\n            for (let i = 0; i < Math.min(bincount, ave + std * 2); i++) {\r\n                bins.push(i * binstep);\r\n                freq.push(0);\r\n            }\r\n            val.forEach((entry) => {\r\n                bins.forEach((bin, index) => {\r\n                    if (\r\n                        entry.Duration >= bin &&\r\n                        entry.Duration < bin + binstep\r\n                    ) {\r\n                        freq[index]++;\r\n                    }\r\n                });\r\n            });\r\n\r\n            let durationdata = [];\r\n            for (\r\n                let i = 0;\r\n                i < Math.min(bincount, ave + Math.min(20, std) * 2);\r\n                i++\r\n            ) {\r\n                durationdata.push({\r\n                    Duration: Math.round((bins[i] + binstep / 2) / 60),\r\n                    Frequency: freq[i],\r\n                });\r\n            }\r\n            set_durationData(\r\n                durationdata.slice(Math.max(0, ave - Math.min(20, std) * 2))\r\n            );\r\n            set_questName(quest.QuestName);\r\n            set_standardDeviation(std > 20 ? \">20\" : std);\r\n            set_average(ave);\r\n\r\n            let serverdistrdata = [];\r\n            for (let i = 0; i < serverNames.length; i++) {\r\n                serverdistrdata.push({\r\n                    id: serverNames[i],\r\n                    label: serverNames[i],\r\n                    value: servercounts[i],\r\n                });\r\n            }\r\n            set_serverDistData(serverdistrdata);\r\n\r\n            let days = [[], [], [], [], [], [], []];\r\n            let instances = [[], [], [], [], [], [], []];\r\n            for (let i = 0; i < days.length; i++) {\r\n                for (let hour = 0; hour < 24; hour += HOUR_BIN_WIDTH) {\r\n                    days[i].push(hour);\r\n                    instances[i].push(0);\r\n                }\r\n            }\r\n            val.forEach((entry) => {\r\n                let dow = new Date(entry.Start).getDay();\r\n                let hour = new Date(entry.Start).getHours();\r\n                instances[dow][Math.floor(hour / HOUR_BIN_WIDTH)]++;\r\n            });\r\n            let datetimedata = [];\r\n            for (let d = 0; d < 7; d++) {\r\n                for (let h = 0; h < 24; h += HOUR_BIN_WIDTH) {\r\n                    datetimedata.push({\r\n                        Time: d * 24 + h,\r\n                        Instances: instances[d][Math.floor(h / HOUR_BIN_WIDTH)],\r\n                    });\r\n                }\r\n            }\r\n            set_datetimeData(datetimedata);\r\n        });\r\n    }\r\n\r\n    // Download quest data\r\n    function download(data) {\r\n        let output = JSON.stringify(data, null, 4);\r\n\r\n        const blob = new Blob([output]);\r\n        const fileDownloadUrl = URL.createObjectURL(blob);\r\n        this.setState({ fileDownloadUrl: fileDownloadUrl }, () => {\r\n            this.dofileDownload.click();\r\n            URL.revokeObjectURL(fileDownloadUrl); // free up storage--no longer needed.\r\n            this.setState({ fileDownloadUrl: \"\" });\r\n        });\r\n    }\r\n\r\n    let questnamefiltertimeout;\r\n    function HandleQuestNameFilter() {\r\n        clearTimeout(questnamefiltertimeout);\r\n        questnamefiltertimeout = setTimeout(() => {\r\n            let questname = document.getElementById(\"questname\").value;\r\n            set_questNameFilter(questname);\r\n        }, 500);\r\n    }\r\n\r\n    // Report Form\r\n    var [reportFormVisibility, setReportFormVisibility] =\r\n        React.useState(\"none\");\r\n    var [reportFormReference, setReportFormReference] = React.useState(null);\r\n    function showReportForm(reference) {\r\n        // Grab relevant info from the tile element that's being reported\r\n        let referenceInfo = {\r\n            title: reference.title,\r\n            type: reference.chartType,\r\n            displayType: reference.displayType,\r\n            trendType: reference.trendType,\r\n            showActions: reference.showActions,\r\n            //data: reference.chartData,\r\n        };\r\n        // Show the report form\r\n        setReportFormReference(referenceInfo);\r\n        setReportFormVisibility(\"block\");\r\n    }\r\n    function hideReportForm() {\r\n        setReportFormVisibility(\"none\");\r\n    }\r\n\r\n    // Popup message\r\n    var [popupMessages, set_popupMessages] = React.useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>{TITLE}</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Check quest activity, duration, and popularity.\"\r\n                />\r\n            </Helmet>\r\n            <ReportIssueForm\r\n                page=\"quests\"\r\n                showLink={false}\r\n                visibility={reportFormVisibility}\r\n                componentReference={reportFormReference}\r\n                hideReportForm={hideReportForm}\r\n            />\r\n            <PopupMessage\r\n                messages={popupMessages}\r\n                popMessage={() => {\r\n                    if (popupMessages.length) {\r\n                        let newMessages = [...popupMessages];\r\n                        newMessages = newMessages.slice(1);\r\n                        set_popupMessages(newMessages);\r\n                    }\r\n                }}\r\n            />\r\n            <Card\r\n                pageName=\"quests\"\r\n                showLink={true}\r\n                title=\"Quest Activity\"\r\n                subtitle=\"\"\r\n                tiles={[\r\n                    {\r\n                        title: \"Quest Selection\",\r\n                        description: (\r\n                            <p>\r\n                                Select a quest or slayer area to view activity.\r\n                            </p>\r\n                        ),\r\n                        content: (\r\n                            <div>\r\n                                <div\r\n                                    className=\"player-filter-input\"\r\n                                    style={{ flexDirection: \"row\" }}\r\n                                >\r\n                                    <label\r\n                                        htmlFor=\"questname\"\r\n                                        style={{\r\n                                            fontSize: \"1.2rem\",\r\n                                        }}\r\n                                    >\r\n                                        Filter by quest name:\r\n                                    </label>\r\n                                    <input\r\n                                        style={{\r\n                                            maxWidth: \"250px\",\r\n                                            width: \"100%\",\r\n                                            height: \"max-content\",\r\n                                            marginLeft: \"7px\",\r\n                                        }}\r\n                                        type=\"text\"\r\n                                        id=\"questname\"\r\n                                        name=\"questname\"\r\n                                        onChange={() => HandleQuestNameFilter()}\r\n                                    />\r\n                                </div>\r\n                                <QuestTable\r\n                                    data={filteredQuestList}\r\n                                    showLastUpdated={false}\r\n                                    reportReference={showReportForm}\r\n                                    handleSelection={(quest) =>\r\n                                        loadQuest(quest)\r\n                                    }\r\n                                />\r\n                                <hr />\r\n                                <h4>{questName || \"No quest selected\"}</h4>\r\n                                <p\r\n                                    style={{\r\n                                        fontSize: \"large\",\r\n                                        marginBottom: \"0px\",\r\n                                    }}\r\n                                >\r\n                                    Average duration:{\" \"}\r\n                                    <span className=\"lfm-number\">\r\n                                        {average !== null\r\n                                            ? `${average} minutes`\r\n                                            : \"N/A\"}\r\n                                    </span>{\" \"}\r\n                                    | Standard deviation:{\" \"}\r\n                                    <span className=\"lfm-number\">\r\n                                        {standardDeviation !== null\r\n                                            ? `${standardDeviation} minutes`\r\n                                            : \"N/A\"}\r\n                                    </span>\r\n                                </p>\r\n                                <span\r\n                                    className=\"blue-link\"\r\n                                    style={{ paddingLeft: \"0px\" }}\r\n                                >\r\n                                    Download quest data\r\n                                </span>\r\n                                <ChartQuestActivity\r\n                                    keys={[\"Frequency\"]}\r\n                                    indexBy={\"Duration\"}\r\n                                    legendBottom={\"Duration (miuntes)\"}\r\n                                    legendLeft={\"Frequency\"}\r\n                                    data={durationData}\r\n                                />\r\n                                <hr />\r\n                                <h4>{questName || \"No quest selected\"}</h4>\r\n                                <p\r\n                                    style={{\r\n                                        fontSize: \"large\",\r\n                                        marginBottom: \"0px\",\r\n                                    }}\r\n                                >\r\n                                    Popularity per server.\r\n                                </p>\r\n                                <span\r\n                                    className=\"blue-link\"\r\n                                    style={{ paddingLeft: \"0px\" }}\r\n                                >\r\n                                    Download quest data\r\n                                </span>\r\n                                <ChartServerDistributionPie\r\n                                    data={serverDistData}\r\n                                />\r\n                                <hr />\r\n                                <h4>{questName || \"No quest selected\"}</h4>\r\n                                <p\r\n                                    style={{\r\n                                        fontSize: \"large\",\r\n                                        marginBottom: \"0px\",\r\n                                    }}\r\n                                >\r\n                                    Popularity throughout the week.\r\n                                </p>\r\n                                <span\r\n                                    className=\"blue-link\"\r\n                                    style={{ paddingLeft: \"0px\" }}\r\n                                >\r\n                                    Download quest data\r\n                                </span>\r\n                                <ChartQuestActivity\r\n                                    keys={[\"Instances\"]}\r\n                                    indexBy={\"Time\"}\r\n                                    legendBottom={\r\n                                        \"Time of Week (Hours, offset from Sunday 00:00)\"\r\n                                    }\r\n                                    legendLeft={\"Instances\"}\r\n                                    data={datetimeData}\r\n                                />\r\n                            </div>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Quests;\r\n"],"sourceRoot":""}