{"version":3,"sources":["assets/global/star_outline.svg","assets/global/star_filled.svg","components/Player.jsx","components/WhoSpecific.jsx"],"names":["_path","_path2","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_path3","_ref","svgRef","title","props","createElement","height","viewBox","width","fill","ref","d","ForwardRef","forwardRef","Player","classnames","Name","Short","className","style","display","flexDirection","cursor","onClick","handleClick","alignItems","gap","starred","e","handleStarred","stopPropagation","expanded","fontWeight","fontSize","player","color","marginLeft","TotalLevel","InParty","handleAddFilter","Location","marginTop","paddingRight","Classes","map","cls","shortname","forEach","obj","GetShortName","Level","Guild","Race","Gender","serverNames","serverNamesLowercase","WhoSpecific","characterNameTimeout","guildNameTimeout","minimumLevelTimeout","maximumLevelTimeout","React","useState","currentServer","set_currentServer","timestamp","data","playerData","set_playerData","filteredPlayerData","set_filteredPlayerData","playerCount","set_playerCount","set_lastFetchTime","set_attemptedPlayerFetch","alternativeLook","activeFilters","set_activeFilters","sortingMethod","set_sortingMethod","sortingDirection","set_sortingDirection","expandedPlayers","set_expandedPlayers","starredPlayers","set_starredPlayers","IsExpanded","val","p","IsStarred","name","server","location","useLocation","pathname","substring","lastIndexOf","useEffect","serverName","toUpperCase","includes","sort","a","b","localeCompare","starredplayers","filter","pass","type","toLowerCase","value","GroupId","ApplyFilters","Players","failedAttemptCount","FetchPlayerData","Fetch","then","Date","now","VerifyPlayerData","set_popupMessages","popupMessages","message","icon","fullscreen","reportMessage","JSON","stringify","catch","refreshdata","setInterval","clearInterval","undefined","localStorage","getItem","reportFormVisibility","setReportFormVisibility","reportFormReference","setReportFormReference","showReportForm","reference","referenceInfo","chartType","displayType","trendType","showActions","precomment","Helmet","content","ReportIssueForm","page","showLink","visibility","componentReference","hideReportForm","PopupMessage","messages","popMessage","newMessages","slice","Card","pageName","hideTitleOnMobile","subtitle","reportReference","justifyContent","maxWidth","flexWrap","paddingBottom","borderStyle","borderColor","borderWidth","padding","backgroundColor","marginBottom","htmlFor","id","onChange","clearTimeout","setTimeout","charactername","document","getElementById","guildname","minimumlevel","maximumlevel","sortfilter","HandleSortFilter","HandleDirectionFilter","paddingLeft","borderRadius","_","index","marginRight","meta","margin","paddingTop","count","textAlign"],"mappings":"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","file":"static/js/13.b5367983.chunk.js","sourcesContent":["var _path, _path2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgStarOutline = function SvgStarOutline(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#FFFFFF\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgStarOutline, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/star_outline.ba3b987a.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgStarFilled = function SvgStarFilled(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#FFFFFF\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\",\n    fill: \"#de9b1f\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgStarFilled, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/star_filled.9fdcac02.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { ReactComponent as StarOutlineSVG } from \"../assets/global/star_outline.svg\";\r\nimport { ReactComponent as StarFilledSVG } from \"../assets/global/star_filled.svg\";\r\nimport { ReactComponent as GroupingSVG } from \"../assets/global/grouping.svg\";\r\n\r\nconst Player = (props) => {\r\n    const classnames = [\r\n        { Name: \"Alchemist\", Short: \"Alc\" },\r\n        { Name: \"Artificer\", Short: \"Art\" },\r\n        { Name: \"Barbarian\", Short: \"Barb\" },\r\n        { Name: \"Bard\", Short: \"Brd\" },\r\n        { Name: \"Cleric\", Short: \"Clr\" },\r\n        { Name: \"Druid\", Short: \"Drd\" },\r\n        { Name: \"Favored Soul\", Short: \"FvS\" },\r\n        { Name: \"Fighter\", Short: \"Ftr\" },\r\n        { Name: \"Monk\", Short: \"Mnk\" },\r\n        { Name: \"Paladin\", Short: \"Pal\" },\r\n        { Name: \"Ranger\", Short: \"Rgr\" },\r\n        { Name: \"Rogue\", Short: \"Rog\" },\r\n        { Name: \"Sorcerer\", Short: \"Sorc\" },\r\n        { Name: \"Warlock\", Short: \"Wlk\" },\r\n        { Name: \"Wizard\", Short: \"Wiz\" },\r\n    ];\r\n\r\n    function GetShortName(cls) {\r\n        let shortname = \"\";\r\n        classnames.forEach((obj) => {\r\n            if (obj.Name === cls) shortname = obj.Short;\r\n        });\r\n        return shortname || cls;\r\n    }\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    cursor: \"pointer\",\r\n                }}\r\n                onClick={props.handleClick}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"row\",\r\n                        alignItems: \"center\",\r\n                        gap: \"10px\",\r\n                        width: \"100%\",\r\n                    }}\r\n                >\r\n                    {props.starred ? (\r\n                        <StarFilledSVG\r\n                            className=\"link-icon favorite-star lit\"\r\n                            onClick={(e) => {\r\n                                props.handleStarred();\r\n                                e.stopPropagation();\r\n                            }}\r\n                        />\r\n                    ) : (\r\n                        props.expanded && (\r\n                            <StarOutlineSVG\r\n                                className=\"link-icon favorite-star\"\r\n                                onClick={(e) => {\r\n                                    props.handleStarred();\r\n                                    e.stopPropagation();\r\n                                }}\r\n                            />\r\n                        )\r\n                    )}\r\n                    <span style={{ fontWeight: \"bold\", fontSize: \"1.5rem\" }}>\r\n                        {props.player.Name}\r\n                    </span>\r\n                    <span\r\n                        style={{\r\n                            fontWeight: \"\",\r\n                            fontSize: \"1.5rem\",\r\n                            color: \"var(--text-faded)\",\r\n                            marginLeft: \"auto\",\r\n                        }}\r\n                    >\r\n                        Level {props.player.TotalLevel}\r\n                    </span>\r\n                </div>\r\n                {!props.expanded && (\r\n                    <span\r\n                        style={{\r\n                            fontWeight: \"\",\r\n                            fontSize: \"1.35rem\",\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            alignItems: \"center\",\r\n                            gap: \"3px\",\r\n                        }}\r\n                    >\r\n                        {props.player.InParty === 1 && (\r\n                            <GroupingSVG\r\n                                className=\"link-icon in-group-icon\"\r\n                                onClick={(e) => {\r\n                                    props.handleAddFilter(\"Group\");\r\n                                    e.stopPropagation();\r\n                                }}\r\n                            />\r\n                        )}\r\n                        <span\r\n                            className=\"in-group-icon\"\r\n                            onClick={(e) => {\r\n                                props.handleAddFilter(\"Location\");\r\n                                e.stopPropagation();\r\n                            }}\r\n                        >\r\n                            {props.player.Location.Name}\r\n                        </span>\r\n                    </span>\r\n                )}\r\n            </div>\r\n            {props.expanded ? (\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        gap: \"2px\",\r\n                        marginTop: \"5px\",\r\n                        fontSize: \"1.4rem\",\r\n                        cursor: \"default\",\r\n                    }}\r\n                >\r\n                    <div className=\"social-member\">\r\n                        <table>\r\n                            <tbody>\r\n                                <tr className=\"social-member-entry\">\r\n                                    <td\r\n                                        className=\"social-member-entry name\"\r\n                                        style={{\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        Classes\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            color: \"var(--text-faded)\",\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        {props.player.Classes &&\r\n                                            props.player.Classes.map(\r\n                                                (cls, i) =>\r\n                                                    cls.Name !== null && (\r\n                                                        <span key={i}>\r\n                                                            {i !== 0 && \" / \"}\r\n                                                            {GetShortName(\r\n                                                                cls.Name\r\n                                                            )}{\" \"}\r\n                                                            {cls.Level}\r\n                                                        </span>\r\n                                                    )\r\n                                            )}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr className=\"social-member-entry\">\r\n                                    <td\r\n                                        className=\"social-member-entry name\"\r\n                                        style={{\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        Guild\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            color: \"var(--text-faded)\",\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        {props.player.Guild}\r\n                                    </td>\r\n                                    <td\r\n                                        className=\"blue-text-link\"\r\n                                        onClick={() =>\r\n                                            props.handleAddFilter(\"Guild\")\r\n                                        }\r\n                                    >\r\n                                        Filter by this guild\r\n                                    </td>\r\n                                </tr>\r\n                                <tr className=\"social-member-entry\">\r\n                                    <td\r\n                                        className=\"social-member-entry name\"\r\n                                        style={{\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        Location\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            color: \"var(--text-faded)\",\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        {props.player.Location &&\r\n                                            props.player.Location.Name}\r\n                                    </td>\r\n                                    <td\r\n                                        className=\"blue-text-link\"\r\n                                        onClick={() =>\r\n                                            props.handleAddFilter(\"Location\")\r\n                                        }\r\n                                    >\r\n                                        Filter by this location\r\n                                    </td>\r\n                                </tr>\r\n                                <tr className=\"social-member-entry\">\r\n                                    <td\r\n                                        className=\"social-member-entry name\"\r\n                                        style={{\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        In party\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            color: \"var(--text-faded)\",\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        {props.player.InParty ? \"Yes\" : \"No\"}\r\n                                    </td>\r\n                                    {props.player.InParty === 1 && (\r\n                                        <td\r\n                                            className=\"blue-text-link\"\r\n                                            onClick={() =>\r\n                                                props.handleAddFilter(\"Group\")\r\n                                            }\r\n                                        >\r\n                                            Filter by this group\r\n                                        </td>\r\n                                    )}\r\n                                </tr>\r\n                                <tr className=\"social-member-entry\">\r\n                                    <td\r\n                                        className=\"social-member-entry name\"\r\n                                        style={{\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        Race\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            color: \"var(--text-faded)\",\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        {props.player.Race}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr className=\"social-member-entry\">\r\n                                    <td\r\n                                        className=\"social-member-entry name\"\r\n                                        style={{\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        Gender\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            color: \"var(--text-faded)\",\r\n                                            paddingRight: \"20px\",\r\n                                        }}\r\n                                    >\r\n                                        {props.player.Gender}\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                // props.index === 0 && (\r\n                //     <span\r\n                //         style={{\r\n                //             textAlign: \"center\",\r\n                //             fontSize: \"1.2rem\",\r\n                //             color: \"var(--text-faded)\",\r\n                //             cursor: \"pointer\",\r\n                //         }}\r\n                //         onClick={props.handleClick}\r\n                //     >\r\n                //         Click for more information\r\n                //     </span>\r\n                // )\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Card from \"../components/Card\";\r\nimport ReportIssueForm from \"./ReportIssueForm\";\r\nimport PopupMessage from \"./PopupMessage\";\r\nimport { Fetch, VerifyPlayerData } from \"./DataLoader\";\r\nimport Player from \"./Player\";\r\nimport { ReactComponent as CloseSVG } from \"../assets/global/close.svg\";\r\n\r\nconst TITLE = \"DDO Live LFM Viewer\";\r\n\r\nconst serverNames = [\r\n    \"Argonnessen\",\r\n    \"Cannith\",\r\n    \"Ghallanda\",\r\n    \"Khyber\",\r\n    \"Orien\",\r\n    \"Sarlona\",\r\n    \"Thelanis\",\r\n    \"Wayfinder\",\r\n    \"Hardcore\",\r\n];\r\n\r\nconst serverNamesLowercase = [\r\n    \"argonnessen\",\r\n    \"cannith\",\r\n    \"ghallanda\",\r\n    \"khyber\",\r\n    \"orien\",\r\n    \"sarlona\",\r\n    \"thelanis\",\r\n    \"wayfinder\",\r\n    \"hardcore\",\r\n];\r\n\r\nconst WhoSpecific = (props) => {\r\n    // Data\r\n    var [currentServer, set_currentServer] = React.useState(null);\r\n    var [playerData, set_playerData] = React.useState({\r\n        timestamp: 0,\r\n        data: null,\r\n    });\r\n    var [filteredPlayerData, set_filteredPlayerData] = React.useState(null);\r\n    var [playerCount, set_playerCount] = React.useState(null);\r\n    var [adjustedPlayerCount, set_adjustedPlayerCount] = React.useState(null);\r\n    var [lastFetchTime, set_lastFetchTime] = React.useState(null);\r\n    var [attemptedPlayerFetch, set_attemptedPlayerFetch] = React.useState(null);\r\n\r\n    // Settings\r\n    var [alternativeLook, set_alternativeLook] = React.useState(true);\r\n    var [activeFilters, set_activeFilters] = React.useState([]);\r\n    var [sortingMethod, set_sortingMethod] = React.useState(\"level\");\r\n    var [sortingDirection, set_sortingDirection] = React.useState(\"ascending\");\r\n\r\n    var [expandedPlayers, set_expandedPlayers] = React.useState([]);\r\n    var [starredPlayers, set_starredPlayers] = React.useState([]);\r\n\r\n    var characterNameTimeout;\r\n    function HandleCharacterNameFilter() {\r\n        clearTimeout(characterNameTimeout);\r\n        characterNameTimeout = setTimeout(() => {\r\n            let charactername = document.getElementById(\"charactername\").value;\r\n            if (charactername) {\r\n                set_activeFilters([\r\n                    ...activeFilters.filter((filter) => filter.type !== \"Name\"),\r\n                    {\r\n                        type: \"Name\",\r\n                        value: document.getElementById(\"charactername\").value,\r\n                    },\r\n                ]);\r\n            } else {\r\n                set_activeFilters([\r\n                    ...activeFilters.filter((filter) => filter.type !== \"Name\"),\r\n                ]);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    var guildNameTimeout;\r\n    function HandleGuildNameFilter() {\r\n        clearTimeout(guildNameTimeout);\r\n        guildNameTimeout = setTimeout(() => {\r\n            let guildname = document.getElementById(\"guildname\").value;\r\n            if (guildname) {\r\n                set_activeFilters([\r\n                    ...activeFilters.filter(\r\n                        (filter) => filter.type !== \"Guild\"\r\n                    ),\r\n                    {\r\n                        type: \"Guild\",\r\n                        value: document.getElementById(\"guildname\").value,\r\n                    },\r\n                ]);\r\n            } else {\r\n                set_activeFilters([\r\n                    ...activeFilters.filter(\r\n                        (filter) => filter.type !== \"Guild\"\r\n                    ),\r\n                ]);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    var minimumLevelTimeout;\r\n    function HandleMinimumLevelFilter() {\r\n        clearTimeout(minimumLevelTimeout);\r\n        minimumLevelTimeout = setTimeout(() => {\r\n            let minimumlevel = document.getElementById(\"minimumlevel\").value;\r\n            if (minimumlevel) {\r\n                set_activeFilters([\r\n                    ...activeFilters.filter(\r\n                        (filter) => filter.type !== \"Min Level\"\r\n                    ),\r\n                    {\r\n                        type: \"Min Level\",\r\n                        value: document.getElementById(\"minimumlevel\").value,\r\n                    },\r\n                ]);\r\n            } else {\r\n                set_activeFilters([\r\n                    ...activeFilters.filter(\r\n                        (filter) => filter.type !== \"Min Level\"\r\n                    ),\r\n                ]);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    var maximumLevelTimeout;\r\n    function HandleMaximumLevelFilter() {\r\n        clearTimeout(maximumLevelTimeout);\r\n        maximumLevelTimeout = setTimeout(() => {\r\n            let maximumlevel = document.getElementById(\"maximumlevel\").value;\r\n            if (maximumlevel) {\r\n                set_activeFilters([\r\n                    ...activeFilters.filter(\r\n                        (filter) => filter.type !== \"Max Level\"\r\n                    ),\r\n                    {\r\n                        type: \"Max Level\",\r\n                        value: document.getElementById(\"maximumlevel\").value,\r\n                    },\r\n                ]);\r\n            } else {\r\n                set_activeFilters([\r\n                    ...activeFilters.filter(\r\n                        (filter) => filter.type !== \"Max Level\"\r\n                    ),\r\n                ]);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    function HandleSortFilter() {\r\n        let sortfilter = document.getElementById(\"sort-type\").value;\r\n        set_sortingMethod(sortfilter.toLowerCase());\r\n    }\r\n\r\n    function HandleDirectionFilter() {\r\n        let sortfilter = document.getElementById(\"sort-direction\").value;\r\n        set_sortingDirection(sortfilter.toLowerCase());\r\n    }\r\n\r\n    function ApplyFilters(data) {\r\n        // Apply sorting\r\n        if (sortingMethod === \"level\") {\r\n            if (sortingDirection === \"ascending\") {\r\n                data.sort((a, b) => a.TotalLevel > b.TotalLevel);\r\n            } else {\r\n                data.sort((a, b) => a.TotalLevel < b.TotalLevel);\r\n            }\r\n        } else if (sortingMethod === \"guild\") {\r\n            if (sortingDirection === \"ascending\") {\r\n                data.sort((a, b) => a.Guild.localeCompare(b.Guild));\r\n            } else {\r\n                data.sort((a, b) => b.Guild.localeCompare(a.Guild));\r\n            }\r\n        } else if (sortingMethod === \"location\") {\r\n            if (sortingDirection === \"ascending\") {\r\n                data.sort((a, b) =>\r\n                    a.Location.Name.localeCompare(b.Location.Name)\r\n                );\r\n            } else {\r\n                data.sort((a, b) =>\r\n                    b.Location.Name.localeCompare(a.Location.Name)\r\n                );\r\n            }\r\n        } else {\r\n            if (sortingDirection === \"ascending\") {\r\n                data.sort((a, b) => a.Name.localeCompare(b.Name));\r\n            } else {\r\n                data.sort((a, b) => b.Name.localeCompare(a.Name));\r\n            }\r\n        }\r\n\r\n        // Pull out starred players to be inserted at the top later\r\n        let starredplayers = data.filter((p) => IsStarred(p));\r\n        data = data.filter((p) => !IsStarred(p));\r\n\r\n        // Apply filters\r\n        if (activeFilters !== null && activeFilters.length !== 0) {\r\n            data = data.filter((player) => {\r\n                let pass = true;\r\n                activeFilters.forEach((filter) => {\r\n                    switch (filter.type) {\r\n                        case \"Name\":\r\n                            if (\r\n                                !player.Name.toLowerCase().includes(\r\n                                    filter.value.toLowerCase()\r\n                                )\r\n                            )\r\n                                pass = false;\r\n                            break;\r\n                        case \"Guild\":\r\n                            if (\r\n                                !player.Guild.toLowerCase().includes(\r\n                                    filter.value.toLowerCase()\r\n                                )\r\n                            )\r\n                                pass = false;\r\n                            break;\r\n                        case \"Location\":\r\n                            if (\r\n                                !player.Location.Name.toLowerCase().includes(\r\n                                    filter.value.toLowerCase()\r\n                                )\r\n                            )\r\n                                pass = false;\r\n                            break;\r\n                        case \"Group\":\r\n                            if (player.GroupId !== filter.value) pass = false;\r\n                            break;\r\n                        case \"Min Level\":\r\n                            if (player.TotalLevel < filter.value) pass = false;\r\n                            break;\r\n                        case \"Max Level\":\r\n                            if (player.TotalLevel > filter.value) pass = false;\r\n                            break;\r\n                    }\r\n                });\r\n                return pass;\r\n            });\r\n        }\r\n\r\n        data = [...starredplayers, ...data];\r\n\r\n        return data;\r\n    }\r\n\r\n    function IsExpanded(player) {\r\n        let val = false;\r\n        expandedPlayers.forEach((p) => {\r\n            if (p.Name === player.Name) val = true;\r\n        });\r\n        return val;\r\n    }\r\n\r\n    function IsStarred(player) {\r\n        let val = false;\r\n        starredPlayers.forEach((p) => {\r\n            if (p.name === player.Name && p.server === currentServer)\r\n                val = true;\r\n        });\r\n        return val;\r\n    }\r\n\r\n    const location = useLocation().pathname.substring(\r\n        useLocation().pathname.lastIndexOf(\"/\") + 1\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        let serverName =\r\n            location.substring(0, 1).toUpperCase() + location.substring(1);\r\n        if (serverNames.includes(serverName)) {\r\n            // Good server\r\n            set_currentServer(serverName);\r\n        } else {\r\n            // Bad server\r\n            set_currentServer(serverNames[0]); // Just default to the first server in the good list\r\n        }\r\n    }, [props.location]);\r\n\r\n    function GetSnarkyMessage() {\r\n        if (playerCount === 0) {\r\n            return \"Maybe they're all anonymous.\";\r\n        } else {\r\n            return \"Are you one of them?\";\r\n        }\r\n    }\r\n\r\n    // Apply filter after filter change\r\n    React.useEffect(() => {\r\n        if (playerData === null || playerData.data === null) return;\r\n        set_filteredPlayerData(ApplyFilters(playerData.data.Players));\r\n        if (filteredPlayerData)\r\n            set_filteredPlayerData([\r\n                {\r\n                    Name: \"Clemeit\",\r\n                    TotalLevel: 30,\r\n                    Guild: \"Best Guild Ever\",\r\n                    Gender: \"Male\",\r\n                    Race: \"Human\",\r\n                    Location: {\r\n                        Name: \"The Marketplace\",\r\n                    },\r\n                    Classes: [\r\n                        { Name: \"Favored Soul\", Level: 20 },\r\n                        { Name: \"Epic\", Level: 30 },\r\n                    ],\r\n                    InParty: 1,\r\n                    GroupId: 123,\r\n                },\r\n                ...filteredPlayerData,\r\n            ]);\r\n    }, [\r\n        activeFilters,\r\n        playerData,\r\n        sortingMethod,\r\n        sortingDirection,\r\n        starredPlayers,\r\n    ]);\r\n\r\n    // Let's get some data\r\n    React.useEffect(() => {\r\n        var failedAttemptCount = 5;\r\n        function FetchPlayerData() {\r\n            Fetch(\r\n                \"https://www.playeraudit.com/api/playersnew?s=\" +\r\n                    (serverNamesLowercase.includes(location.toLowerCase())\r\n                        ? location\r\n                        : \"\"),\r\n                5000\r\n            )\r\n                .then((val) => {\r\n                    set_lastFetchTime(Date.now());\r\n                    set_attemptedPlayerFetch(true);\r\n                    if (VerifyPlayerData(val)) {\r\n                        set_popupMessages([]);\r\n                        failedAttemptCount = 0;\r\n                        set_playerData({ timestamp: Date.now(), data: val });\r\n                    } else {\r\n                        failedAttemptCount++;\r\n                        if (failedAttemptCount > 5) {\r\n                            set_popupMessages([\r\n                                ...popupMessages,\r\n                                {\r\n                                    title: \"Something went wrong\",\r\n                                    message:\r\n                                        \"Pretty descriptive, I know. Try refreshing the page. If the issue continues, please report it.\",\r\n                                    icon: \"warning\",\r\n                                    fullscreen: false,\r\n                                    reportMessage:\r\n                                        JSON.stringify(val) ||\r\n                                        \"Player data returned null\",\r\n                                },\r\n                            ]);\r\n                        }\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    failedAttemptCount++;\r\n                    set_lastFetchTime(Date.now());\r\n                    set_attemptedPlayerFetch(true);\r\n                    if (failedAttemptCount > 5) {\r\n                        set_popupMessages([\r\n                            ...popupMessages,\r\n                            {\r\n                                title: \"We're stuck on a loading screen\",\r\n                                message:\r\n                                    \"This is taking longer than usual. You can refresh the page or report the issue.\",\r\n                                icon: \"warning\",\r\n                                fullscreen: false,\r\n                                reportMessage:\r\n                                    \"Could not fetch Player data. Timeout\",\r\n                            },\r\n                        ]);\r\n                    }\r\n                });\r\n        }\r\n        FetchPlayerData();\r\n\r\n        const refreshdata = setInterval(() => {\r\n            FetchPlayerData();\r\n        }, 60000);\r\n        return () => clearInterval(refreshdata);\r\n    }, [currentServer]);\r\n\r\n    React.useEffect(() => {\r\n        if (playerData.data === undefined || playerData.data === null) return;\r\n        set_playerCount(playerData.data.Players.length);\r\n    }, [playerData]);\r\n\r\n    React.useEffect(() => {\r\n        let starredplayers = localStorage.getItem(\"starred-players\");\r\n        if (starredplayers !== null) {\r\n            set_starredPlayers(starredplayers);\r\n        } else {\r\n            set_starredPlayers([]);\r\n        }\r\n    }, []);\r\n\r\n    // Report Form\r\n    var [reportFormVisibility, setReportFormVisibility] =\r\n        React.useState(\"none\");\r\n    var [reportFormReference, setReportFormReference] = React.useState(null);\r\n    function showReportForm(reference) {\r\n        // Grab relevant info from the tile element that's being reported\r\n        let referenceInfo = {\r\n            title: reference.title,\r\n            type: reference.chartType,\r\n            displayType: reference.displayType,\r\n            trendType: reference.trendType,\r\n            showActions: reference.showActions,\r\n            precomment: reference.precomment,\r\n            //data: reference.chartData,\r\n        };\r\n        // Show the report form\r\n        setReportFormReference(referenceInfo);\r\n        setReportFormVisibility(\"block\");\r\n    }\r\n    function hideReportForm() {\r\n        setReportFormVisibility(\"none\");\r\n    }\r\n    function report(reference, custom) {\r\n        showReportForm({\r\n            title: \"LFM Viewer\",\r\n            precomment: custom,\r\n            chartType: null,\r\n            displayType: null,\r\n            trendType: null,\r\n            showActions: null,\r\n        });\r\n    }\r\n\r\n    // Popup message\r\n    var [popupMessages, set_popupMessages] = React.useState([]);\r\n\r\n    return (\r\n        currentServer && (\r\n            <div>\r\n                <Helmet>\r\n                    <title>{TITLE}</title>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Browse players from any server with a live Who panel! Are your friends online? Is your guild forming up for a late-night raid? Now you know!\"\r\n                    />\r\n                </Helmet>\r\n                <ReportIssueForm\r\n                    page={\"who/\" + currentServer.toLowerCase()}\r\n                    showLink={false}\r\n                    visibility={reportFormVisibility}\r\n                    componentReference={reportFormReference}\r\n                    hideReportForm={hideReportForm}\r\n                />\r\n                <PopupMessage\r\n                    page={\"who/\" + currentServer.toLowerCase()}\r\n                    messages={popupMessages}\r\n                    popMessage={() => {\r\n                        if (popupMessages.length) {\r\n                            let newMessages = [...popupMessages];\r\n                            newMessages = newMessages.slice(1);\r\n                            set_popupMessages(newMessages);\r\n                        }\r\n                    }}\r\n                />\r\n                <Card\r\n                    pageName={\"who/\" + currentServer.toLowerCase()}\r\n                    showLink={false}\r\n                    title={\"Currently on \" + currentServer}\r\n                    className=\"grouping\"\r\n                    hideTitleOnMobile={true}\r\n                    subtitle={\r\n                        playerData.data ? (\r\n                            <div className=\"grouping-subtitle\">\r\n                                There {playerCount === 1 ? \"is\" : \"are\"}{\" \"}\r\n                                currently{\" \"}\r\n                                <span className=\"population-number\">\r\n                                    {playerCount}\r\n                                </span>{\" \"}\r\n                                player{playerCount === 1 ? \"\" : \"s\"} online.{\" \"}\r\n                                {GetSnarkyMessage()}\r\n                            </div>\r\n                        ) : (\r\n                            <div>Loading player data...</div>\r\n                        )\r\n                    }\r\n                    reportReference={showReportForm}\r\n                >\r\n                    {filteredPlayerData ? (\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\",\r\n                            }}\r\n                        >\r\n                            {alternativeLook === false ? (\r\n                                // <CanvasLfmPanel\r\n                                //     data={groupDataServer}\r\n                                //     showNotEligible={showNotEligible}\r\n                                //     adjustedGroupCount={adjustedGroupCount}\r\n                                //     fontModifier={fontModifier}\r\n                                //     highVisibility={highVisibility}\r\n                                //     // showNotEligible={showNotEligible}\r\n                                //     // sortOrder={sortOrder}\r\n                                //     // minimumLevel={minimumLevel}\r\n                                //     // maximumLevel={maximumLevel}\r\n                                // ></CanvasLfmPanel>\r\n                                <div></div>\r\n                            ) : (\r\n                                <div\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        display: \"flex\",\r\n                                        flexDirection: \"column\",\r\n                                        justifyContent: \"center\",\r\n                                        alignItems: \"center\",\r\n                                    }}\r\n                                >\r\n                                    <form\r\n                                        style={{\r\n                                            display: \"flex\",\r\n                                            flexDirection: \"column\",\r\n                                            justifyContent: \"center\",\r\n                                            alignItems: \"center\",\r\n                                            width: \"100%\",\r\n                                            maxWidth: \"848px\",\r\n                                            gap: \"25px\",\r\n                                            flexWrap: \"wrap\",\r\n                                            paddingBottom: \"10px\",\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            className=\"group-filter-bar\"\r\n                                            style={{\r\n                                                borderStyle: \"solid\",\r\n                                                borderColor:\r\n                                                    \"var(--filter-bar)\",\r\n                                                borderWidth: \"3px\",\r\n                                                width: \"100%\",\r\n                                                maxWidth: \"848px\",\r\n                                                padding: \"0px\",\r\n                                            }}\r\n                                        >\r\n                                            <h4\r\n                                                style={{\r\n                                                    backgroundColor:\r\n                                                        \"var(--filter-bar)\",\r\n                                                    padding: \"0px 0px 3px 5px\",\r\n                                                    marginBottom: \"0px\",\r\n                                                }}\r\n                                            >\r\n                                                Filter Players\r\n                                            </h4>\r\n                                            <div className=\"player-filter-input-container\">\r\n                                                <div className=\"player-filter-input\">\r\n                                                    <label\r\n                                                        htmlFor=\"charactername\"\r\n                                                        style={{\r\n                                                            fontSize: \"1.2rem\",\r\n                                                        }}\r\n                                                    >\r\n                                                        Character name\r\n                                                    </label>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        id=\"charactername\"\r\n                                                        name=\"charactername\"\r\n                                                        onChange={() =>\r\n                                                            HandleCharacterNameFilter()\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"player-filter-input\">\r\n                                                    <label\r\n                                                        htmlFor=\"guildname\"\r\n                                                        style={{\r\n                                                            fontSize: \"1.2rem\",\r\n                                                        }}\r\n                                                    >\r\n                                                        Guild name\r\n                                                    </label>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        id=\"guildname\"\r\n                                                        name=\"guildname\"\r\n                                                        onChange={() =>\r\n                                                            HandleGuildNameFilter()\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"player-filter-input\">\r\n                                                    <label\r\n                                                        htmlFor=\"minimumlevel\"\r\n                                                        style={{\r\n                                                            fontSize: \"1.2rem\",\r\n                                                        }}\r\n                                                    >\r\n                                                        Level range\r\n                                                    </label>\r\n                                                    <div>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            id=\"minimumlevel\"\r\n                                                            name=\"minimumlevel\"\r\n                                                            style={{\r\n                                                                maxWidth:\r\n                                                                    \"100px\",\r\n                                                            }}\r\n                                                            onChange={() =>\r\n                                                                HandleMinimumLevelFilter()\r\n                                                            }\r\n                                                        />\r\n                                                        <label\r\n                                                            htmlFor=\"maximumlevel\"\r\n                                                            style={{\r\n                                                                padding:\r\n                                                                    \"0px 7px 0px 7px\",\r\n                                                                fontSize:\r\n                                                                    \"1.1rem\",\r\n                                                            }}\r\n                                                        >\r\n                                                            to\r\n                                                        </label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            id=\"maximumlevel\"\r\n                                                            name=\"maximumlevel\"\r\n                                                            style={{\r\n                                                                maxWidth:\r\n                                                                    \"100px\",\r\n                                                            }}\r\n                                                            onChange={() =>\r\n                                                                HandleMaximumLevelFilter()\r\n                                                            }\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"player-filter-input\">\r\n                                                    <label\r\n                                                        htmlFor=\"sort-type\"\r\n                                                        style={{\r\n                                                            fontSize: \"1.2rem\",\r\n                                                        }}\r\n                                                    >\r\n                                                        Sort by\r\n                                                    </label>\r\n\r\n                                                    <div\r\n                                                        style={{\r\n                                                            display: \"flex\",\r\n                                                            flexDirection:\r\n                                                                \"row\",\r\n                                                            gap: \"10px\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <select\r\n                                                            className=\"input-select\"\r\n                                                            name=\"sort-type\"\r\n                                                            id=\"sort-type\"\r\n                                                            style={{\r\n                                                                maxWidth:\r\n                                                                    \"200px\",\r\n                                                                fontSize:\r\n                                                                    \"1.2rem\",\r\n                                                            }}\r\n                                                            onChange={() =>\r\n                                                                HandleSortFilter()\r\n                                                            }\r\n                                                        >\r\n                                                            <option value=\"level\">\r\n                                                                Level\r\n                                                            </option>\r\n                                                            <option value=\"name\">\r\n                                                                Name\r\n                                                            </option>\r\n                                                            <option value=\"guild\">\r\n                                                                Guild\r\n                                                            </option>\r\n                                                            <option value=\"location\">\r\n                                                                Location\r\n                                                            </option>\r\n                                                        </select>\r\n                                                        <select\r\n                                                            className=\"input-select\"\r\n                                                            name=\"sort-direction\"\r\n                                                            id=\"sort-direction\"\r\n                                                            style={{\r\n                                                                maxWidth:\r\n                                                                    \"200px\",\r\n                                                                fontSize:\r\n                                                                    \"1.2rem\",\r\n                                                            }}\r\n                                                            onChange={() =>\r\n                                                                HandleDirectionFilter()\r\n                                                            }\r\n                                                        >\r\n                                                            <option value=\"ascending\">\r\n                                                                Ascending\r\n                                                            </option>\r\n                                                            <option value=\"descending\">\r\n                                                                Descending\r\n                                                            </option>\r\n                                                        </select>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                    {activeFilters &&\r\n                                        activeFilters.length !== 0 && (\r\n                                            <div\r\n                                                style={{\r\n                                                    display: \"flex\",\r\n                                                    flexDirection: \"row\",\r\n                                                    justifyContent: \"left\",\r\n                                                    gap: \"5px\",\r\n                                                    padding:\r\n                                                        \"5px 10px 5px 10px\",\r\n                                                    flexWrap: \"wrap\",\r\n                                                    alignItems: \"center\",\r\n                                                    width: \"100%\",\r\n                                                    maxWidth: \"848px\",\r\n                                                }}\r\n                                            >\r\n                                                <h4\r\n                                                    style={{\r\n                                                        paddingLeft: \"5px\",\r\n                                                        marginBottom: \"0px\",\r\n                                                    }}\r\n                                                >\r\n                                                    Active filters:\r\n                                                </h4>\r\n                                                {activeFilters.map(\r\n                                                    (filter, i) => (\r\n                                                        <div\r\n                                                            key={i}\r\n                                                            style={{\r\n                                                                fontSize:\r\n                                                                    \"1.3rem\",\r\n                                                                backgroundColor:\r\n                                                                    \"var(--mini-group)\",\r\n                                                                padding:\r\n                                                                    \"2px 10px 2px 15px\",\r\n                                                                width: \"max-content\",\r\n                                                                borderRadius:\r\n                                                                    \"10px\",\r\n                                                                display: \"flex\",\r\n                                                                alignItems:\r\n                                                                    \"center\",\r\n                                                                cursor: \"pointer\",\r\n                                                            }}\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    filter.type ===\r\n                                                                    \"Name\"\r\n                                                                )\r\n                                                                    document.getElementById(\r\n                                                                        \"charactername\"\r\n                                                                    ).value =\r\n                                                                        \"\";\r\n                                                                if (\r\n                                                                    filter.type ===\r\n                                                                    \"Guild\"\r\n                                                                )\r\n                                                                    document.getElementById(\r\n                                                                        \"guildname\"\r\n                                                                    ).value =\r\n                                                                        \"\";\r\n                                                                if (\r\n                                                                    filter.type ===\r\n                                                                    \"Min Level\"\r\n                                                                )\r\n                                                                    document.getElementById(\r\n                                                                        \"minimumlevel\"\r\n                                                                    ).value =\r\n                                                                        \"\";\r\n                                                                if (\r\n                                                                    filter.type ===\r\n                                                                    \"Max Level\"\r\n                                                                )\r\n                                                                    document.getElementById(\r\n                                                                        \"maximumlevel\"\r\n                                                                    ).value =\r\n                                                                        \"\";\r\n                                                                set_activeFilters(\r\n                                                                    activeFilters.filter(\r\n                                                                        (\r\n                                                                            _,\r\n                                                                            index\r\n                                                                        ) =>\r\n                                                                            index !==\r\n                                                                            i\r\n                                                                    )\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            <span\r\n                                                                style={{\r\n                                                                    color: \"var(--text-faded)\",\r\n                                                                    marginRight:\r\n                                                                        \"5px\",\r\n                                                                }}\r\n                                                            >\r\n                                                                {filter.type}:\r\n                                                            </span>\r\n                                                            <span\r\n                                                                style={{\r\n                                                                    color: \"var(--text)\",\r\n                                                                }}\r\n                                                            >\r\n                                                                {filter.type ===\r\n                                                                \"Group\"\r\n                                                                    ? filter.meta\r\n                                                                    : filter.value}\r\n                                                            </span>\r\n                                                            <CloseSVG\r\n                                                                className=\"link-icon\"\r\n                                                                style={{\r\n                                                                    margin: \"0px 0px 0px 10px\",\r\n                                                                    backgroundColor:\r\n                                                                        \"var(--gray6)\",\r\n                                                                    borderRadius:\r\n                                                                        \"50%\",\r\n                                                                    padding:\r\n                                                                        \"3px\",\r\n                                                                }}\r\n                                                            />\r\n                                                        </div>\r\n                                                    )\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                    <div\r\n                                        className=\"social-container\"\r\n                                        style={{ paddingTop: \"10px\" }}\r\n                                    >\r\n                                        {filteredPlayerData &&\r\n                                            filteredPlayerData.map(\r\n                                                (player, i) =>\r\n                                                    player.Name !==\r\n                                                        \"Anonymous\" && (\r\n                                                        <Player\r\n                                                            key={i}\r\n                                                            handleStarred={() => {\r\n                                                                if (\r\n                                                                    IsStarred(\r\n                                                                        player\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    set_starredPlayers(\r\n                                                                        starredPlayers.filter(\r\n                                                                            (\r\n                                                                                p\r\n                                                                            ) =>\r\n                                                                                p.name !==\r\n                                                                                player.Name\r\n                                                                        )\r\n                                                                    );\r\n                                                                } else {\r\n                                                                    set_starredPlayers(\r\n                                                                        [\r\n                                                                            ...starredPlayers,\r\n                                                                            {\r\n                                                                                name: player.Name,\r\n                                                                                server: currentServer,\r\n                                                                            },\r\n                                                                        ]\r\n                                                                    );\r\n                                                                }\r\n                                                            }}\r\n                                                            handleClick={(\r\n                                                                e\r\n                                                            ) => {\r\n                                                                if (\r\n                                                                    IsExpanded(\r\n                                                                        player\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    set_expandedPlayers(\r\n                                                                        expandedPlayers.filter(\r\n                                                                            (\r\n                                                                                p\r\n                                                                            ) => {\r\n                                                                                return (\r\n                                                                                    p.Name !==\r\n                                                                                    player.Name\r\n                                                                                );\r\n                                                                            }\r\n                                                                        )\r\n                                                                    );\r\n                                                                } else {\r\n                                                                    set_expandedPlayers(\r\n                                                                        [\r\n                                                                            ...expandedPlayers,\r\n                                                                            player,\r\n                                                                        ]\r\n                                                                    );\r\n                                                                }\r\n                                                            }}\r\n                                                            handleAddFilter={(\r\n                                                                type\r\n                                                            ) => {\r\n                                                                if (\r\n                                                                    type ===\r\n                                                                    \"Group\"\r\n                                                                ) {\r\n                                                                    set_activeFilters(\r\n                                                                        [\r\n                                                                            ...activeFilters,\r\n                                                                            {\r\n                                                                                type: \"Group\",\r\n                                                                                value: player.GroupId,\r\n                                                                                meta: player.Name,\r\n                                                                            },\r\n                                                                        ]\r\n                                                                    );\r\n                                                                } else if (\r\n                                                                    type ===\r\n                                                                    \"Guild\"\r\n                                                                ) {\r\n                                                                    set_activeFilters(\r\n                                                                        [\r\n                                                                            ...activeFilters,\r\n                                                                            {\r\n                                                                                type: \"Guild\",\r\n                                                                                value: player.Guild,\r\n                                                                            },\r\n                                                                        ]\r\n                                                                    );\r\n                                                                } else if (\r\n                                                                    type ===\r\n                                                                    \"Location\"\r\n                                                                ) {\r\n                                                                    set_activeFilters(\r\n                                                                        [\r\n                                                                            ...activeFilters,\r\n                                                                            {\r\n                                                                                type: \"Location\",\r\n                                                                                value: player\r\n                                                                                    .Location\r\n                                                                                    .Name,\r\n                                                                            },\r\n                                                                        ]\r\n                                                                    );\r\n                                                                }\r\n                                                            }}\r\n                                                            player={player}\r\n                                                            index={i}\r\n                                                            expanded={IsExpanded(\r\n                                                                player\r\n                                                            )}\r\n                                                            starred={IsStarred(\r\n                                                                player\r\n                                                            )}\r\n                                                        />\r\n                                                    )\r\n                                            )}\r\n                                        {filteredPlayerData &&\r\n                                            filteredPlayerData.count === 0 && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontSize: \"1.6rem\",\r\n                                                        width: \"100%\",\r\n                                                        textAlign: \"center\",\r\n                                                    }}\r\n                                                >\r\n                                                    No groups meet your current\r\n                                                    filter settings\r\n                                                </span>\r\n                                            )}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <span\r\n                            style={{\r\n                                fontSize: \"1.6rem\",\r\n                                width: \"100%\",\r\n                                textAlign: \"center\",\r\n                            }}\r\n                        >\r\n                            Loading player data...\r\n                        </span>\r\n                    )}\r\n                </Card>\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default WhoSpecific;\r\n"],"sourceRoot":""}