{"version":3,"sources":["assets/global/timeline.svg","components/ChartServerDistributionPie.jsx","components/ChartTimeOfDay.jsx","components/ChartDayOfWeek.jsx","components/ChartClassDistribution.jsx","components/ChartLevelDistribution.jsx","components/ContentTable.jsx","assets/global/online.svg","assets/global/offline.svg","assets/global/pending.svg","components/ServerStatusDisplay.jsx","components/Servers.jsx"],"names":["_g","_g2","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgTimeline","_ref","svgRef","title","props","createElement","enableBackground","height","viewBox","width","ref","fill","d","ForwardRef","forwardRef","theme","background","textColor","fontSize","tooltip","container","color","borderRadius","boxShadow","padding","basic","whiteSpace","display","alignItems","table","tableCell","ChartServerDistributionPie","className","filters","showServerFilters","style","data","margin","top","right","bottom","left","valueFormat","sortByValue","padAngle","cornerRadius","activeOuterRadiusOffset","colors","scheme","borderWidth","borderColor","from","modifiers","enableArcLinkLabels","arcLinkLabelsSkipAngle","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabel","e","value","total","GetTotalPopulation","toFixed","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","axis","domain","line","stroke","strokeWidth","ticks","grid","crosshair","strokeOpacity","strokeDasharray","ChartTimeOfDay","xScale","type","yScale","min","max","stacked","reverse","curve","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","lineWidth","enablePoints","enableArea","areaOpacity","enableSlices","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","motionConfig","ChartDayOfWeek","indexBy","minValue","groupMode","valueScale","indexScale","round","label","Math","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","animate","motionStiffness","motionDamping","ChartClassDistribution","format","tooltipFormat","ChartLevelDistribution","tickValues","yFormat","ContentTable","React","useState","filteredData","set_filteredData","expanded","set_expanded","useEffect","activeFilter","sort","a","b","activeOrder","Count","filter","quest","slice","Patron","Raid","AdventurePack","justifyContent","map","adventurePack","cursor","textDecoration","onClick","console","log","marginLeft","QuestName","Id","CR_Heroic","CR_Epic","generateLevelString","AverageTime","fontStyle","_path","_path2","ServerNames","ServerStatusDisplay","fontWeight","dt","LastUpdateTime","Date","toLocaleTimeString","flexDirection","flexWrap","Worlds","world","paddingRight","Status","GetSVG","Name","serverNames","Servers","interval","setInterval","url","fetch","response","json","text","fetchArbitraryData","then","val","set_serverStatusData","clearInterval","serverStatusData","serverDistributionPieData","set_serverDistributionPieData","timeOfDayData","set_timeOfDayData","dayOfWeekData","set_dayOfWeekData","classDistributionData","set_classDistributionData","levelDistributionData","set_levelDistributionData","contentLevelDistributionData","set_contentLevelDistributionData","contentData","set_contentData","serverDistributionPieHistory","set_serverDistributionPieHistory","timeOfDayHistory","set_timeOfDayHistory","dayOfWeekHistory","set_dayOfWeekHistory","classDistributionFilter","set_classDistributionFilter","levelDistributionFilter","set_levelDistributionFilter","contentFilter","set_contentFilter","contentOrder","set_contentOrder","dayOfWeekDisplay","set_dayOfWeekDisplay","classDistributionDisplay","set_classDistributionDisplay","offlineWorlds","forEach","World","push","set_popupMessages","popupMessages","messageType","message","icon","fullscreen","reportFormVisibility","setReportFormVisibility","reportFormReference","setReportFormReference","showReportForm","reference","referenceInfo","chartType","displayType","trendType","showActions","name","content","page","showLink","visibility","componentReference","hideReportForm","messages","popMessage","newMessages","pageName","subtitle","tiles","description","options","index","showLastUpdated","reportReference","serverFilterReference","servers","serverString","toLowerCase","substring"],"mappings":"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","file":"static/js/7.294e29fb.chunk.js","sourcesContent":["var _g, _g2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgTimeline = function SvgTimeline(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    enableBackground: \"new 0 0 24 24\",\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"rect\", {\n    fill: \"none\",\n    height: 24,\n    width: 24\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23,8c0,1.1-0.9,2-2,2c-0.18,0-0.35-0.02-0.51-0.07l-3.56,3.55C16.98,13.64,17,13.82,17,14c0,1.1-0.9,2-2,2s-2-0.9-2-2 c0-0.18,0.02-0.36,0.07-0.52l-2.55-2.55C10.36,10.98,10.18,11,10,11s-0.36-0.02-0.52-0.07l-4.55,4.56C4.98,15.65,5,15.82,5,16 c0,1.1-0.9,2-2,2s-2-0.9-2-2s0.9-2,2-2c0.18,0,0.35,0.02,0.51,0.07l4.56-4.55C8.02,9.36,8,9.18,8,9c0-1.1,0.9-2,2-2s2,0.9,2,2 c0,0.18-0.02,0.36-0.07,0.52l2.55,2.55C14.64,12.02,14.82,12,15,12s0.36,0.02,0.52,0.07l3.55-3.56C19.02,8.35,19,8.18,19,8 c0-1.1,0.9-2,2-2S23,6.9,23,8z\",\n    fill: \"#fff\"\n  }))))));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTimeline, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/timeline.c98753a4.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\n\r\n// This pie chart is used to show the server distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 16,\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartServerDistributionPie = (props) => {\r\n    function GetTotalPopulation() {\r\n        let total = 0;\r\n        for (let i = 0; i < props.data.length; i++) {\r\n            total += props.data[i].value;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsivePie\r\n                    data={props.data}\r\n                    margin={{ top: 30, right: 110, bottom: 30, left: 110 }}\r\n                    valueFormat=\" >-.1f\"\r\n                    sortByValue={true}\r\n                    // colors={(d) => d.color}\r\n                    padAngle={0.7}\r\n                    cornerRadius={3}\r\n                    activeOuterRadiusOffset={8}\r\n                    colors={{ scheme: \"category10\" }}\r\n                    borderWidth={1}\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 0.2]],\r\n                    }}\r\n                    enableArcLinkLabels={true}\r\n                    arcLinkLabelsSkipAngle={10}\r\n                    arcLinkLabelsThickness={2}\r\n                    arcLinkLabelsColor={{ from: \"color\" }}\r\n                    arcLabel={function (e) {\r\n                        return `${(\r\n                            (e.value / GetTotalPopulation()) *\r\n                            100\r\n                        ).toFixed(1)}%`;\r\n                    }}\r\n                    arcLabelsSkipAngle={10}\r\n                    arcLabelsRadiusOffset={0.7}\r\n                    arcLabelsTextColor={\"white\"}\r\n                    // legends={[\r\n                    //     {\r\n                    //         anchor: \"right\",\r\n                    //         direction: \"column\",\r\n                    //         justify: false,\r\n                    //         translateX: 0,\r\n                    //         translateY: 0,\r\n                    //         itemsSpacing: 0,\r\n                    //         itemWidth: 120,\r\n                    //         itemHeight: 25,\r\n                    //         itemTextColor: \"#fff\",\r\n                    //         itemDirection: \"left-to-right\",\r\n                    //         itemOpacity: 1,\r\n                    //         symbolSize: 18,\r\n                    //         symbolShape: \"circle\",\r\n                    //         effects: [\r\n                    //             {\r\n                    //                 on: \"hover\",\r\n                    //                 style: {\r\n                    //                     itemTextColor: \"#000\",\r\n                    //                 },\r\n                    //             },\r\n                    //         ],\r\n                    //     },\r\n                    // ]}\r\n                    theme={theme}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartServerDistributionPie;\r\n","import React from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\n// This chart is used to show time-of-day distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartTimeOfDay = (props) => {\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveLine\r\n                    data={props.data}\r\n                    margin={{ top: 20, right: 120, bottom: 60, left: 70 }}\r\n                    xScale={{\r\n                        type: \"linear\",\r\n                    }}\r\n                    //xFormat=\"time:%Y-%m-%dT%H:%M:%sZ\"\r\n                    yScale={{\r\n                        type: \"linear\",\r\n                        min: 0,\r\n                        max: \"auto\",\r\n                        stacked: false,\r\n                        reverse: false,\r\n                    }}\r\n                    //yFormat=\" >-.2f\"\r\n                    curve=\"natural\"\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        orient: \"bottom\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Hour\",\r\n                        legendOffset: 40,\r\n                        legendPosition: \"middle\",\r\n                    }}\r\n                    axisLeft={{\r\n                        orient: \"left\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendOffset: -50,\r\n                        legendPosition: \"middle\",\r\n                    }}\r\n                    lineWidth={4}\r\n                    enablePoints={false}\r\n                    colors={(d) => d.color}\r\n                    enableArea={false}\r\n                    areaOpacity={0.3}\r\n                    enableSlices=\"x\"\r\n                    useMesh={true}\r\n                    legends={[\r\n                        {\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 0,\r\n                            itemDirection: \"left-to-right\",\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            symbolShape: \"circle\",\r\n                            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                            effects: [\r\n                                {\r\n                                    on: \"hover\",\r\n                                    style: {\r\n                                        //itemBackground: \"rgba(255, 255, 255, .03)\",\r\n                                        itemOpacity: 1,\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]}\r\n                    motionConfig=\"stiff\"\r\n                    theme={theme}\r\n                ></ResponsiveLine>\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartTimeOfDay;\r\n","import React from \"react\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartDayOfWeek = (props) => {\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveBar\r\n                    data={props.data}\r\n                    keys={[\r\n                        \"Argonnessen\",\r\n                        \"Cannith\",\r\n                        \"Ghallanda\",\r\n                        \"Khyber\",\r\n                        \"Orien\",\r\n                        \"Sarlona\",\r\n                        \"Thelanis\",\r\n                        \"Wayfinder\",\r\n                        \"Hardcore\",\r\n                    ]}\r\n                    indexBy=\"day\"\r\n                    margin={{ top: 20, right: 120, bottom: 40, left: 70 }}\r\n                    padding={0.15}\r\n                    minValue={0}\r\n                    groupMode={props.display === \"Grouped\" ? \"grouped\" : \"\"}\r\n                    valueScale={{ type: \"linear\" }}\r\n                    indexScale={{ type: \"band\", round: true }}\r\n                    colors={{ scheme: \"category10\" }}\r\n                    enableSlices=\"x\"\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 1.6]],\r\n                    }}\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"\",\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: 32,\r\n                    }}\r\n                    axisLeft={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: -50,\r\n                    }}\r\n                    label={(d) => `${Math.round(d.value)}`}\r\n                    labelSkipWidth={25}\r\n                    labelSkipHeight={12}\r\n                    labelTextColor={\"white\"}\r\n                    legends={[\r\n                        {\r\n                            dataFrom: \"keys\",\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 2,\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            symbolShape: \"circle\",\r\n                            itemDirection: \"left-to-right\",\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            // effects: [\r\n                            //     {\r\n                            //         on: \"hover\",\r\n                            //         style: {\r\n                            //             itemOpacity: 1,\r\n                            //         },\r\n                            //     },\r\n                            // ],\r\n                        },\r\n                    ]}\r\n                    animate={true}\r\n                    theme={theme}\r\n                    motionStiffness={300}\r\n                    motionDamping={30}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDayOfWeek;\r\n","import React from \"react\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\n\r\n// This chart is used to show class distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartClassDistribution = (props) => {\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveBar\r\n                    data={props.data}\r\n                    keys={[\r\n                        \"Argonnessen\",\r\n                        \"Cannith\",\r\n                        \"Ghallanda\",\r\n                        \"Khyber\",\r\n                        \"Orien\",\r\n                        \"Sarlona\",\r\n                        \"Thelanis\",\r\n                        \"Wayfinder\",\r\n                        \"Hardcore\",\r\n                    ]}\r\n                    indexBy=\"className\"\r\n                    margin={{ top: 20, right: 120, bottom: 80, left: 70 }}\r\n                    padding={0.15}\r\n                    minValue={0}\r\n                    groupMode={props.display === \"Grouped\" ? \"grouped\" : \"\"}\r\n                    valueScale={{ type: \"linear\" }}\r\n                    indexScale={{ type: \"band\", round: true }}\r\n                    colors={{ scheme: \"category10\" }}\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 1.6]],\r\n                    }}\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: -45,\r\n                        legend: \"\",\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: 32,\r\n                    }}\r\n                    axisLeft={{\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendPosition: \"middle\",\r\n                        legendOffset: -50,\r\n                        format: (value) =>\r\n                            `${props.display === \"Grouped\" ? value + \"%\" : \"\"}`,\r\n                    }}\r\n                    tooltipFormat={(value) => `${value}%`}\r\n                    label={(d) => `${Math.round(d.value)}%`}\r\n                    labelSkipWidth={20}\r\n                    labelSkipHeight={18}\r\n                    labelTextColor={\"white\"}\r\n                    legends={[\r\n                        {\r\n                            dataFrom: \"keys\",\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 2,\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            symbolShape: \"circle\",\r\n                            itemDirection: \"left-to-right\",\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            // effects: [\r\n                            //     {\r\n                            //         on: \"hover\",\r\n                            //         style: {\r\n                            //             itemOpacity: 1,\r\n                            //         },\r\n                            //     },\r\n                            // ],\r\n                        },\r\n                    ]}\r\n                    animate={true}\r\n                    theme={theme}\r\n                    motionStiffness={300}\r\n                    motionDamping={30}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartClassDistribution;\r\n","import React from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\n// This chart is used to show level distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartLevelDistribution = (props) => {\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveLine\r\n                    data={props.data}\r\n                    margin={{ top: 20, right: 120, bottom: 60, left: 70 }}\r\n                    xScale={{\r\n                        type: \"linear\",\r\n                        min: 1,\r\n                    }}\r\n                    //xFormat=\"time:%Y-%m-%dT%H:%M:%sZ\"\r\n                    yScale={{\r\n                        type: \"linear\",\r\n                        min: 0,\r\n                        max: \"auto\",\r\n                        stacked: false,\r\n                        reverse: false,\r\n                    }}\r\n                    //yFormat=\" >-.2f\"\r\n                    curve=\"linear\"\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={{\r\n                        orient: \"bottom\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Level\",\r\n                        legendOffset: 40,\r\n                        legendPosition: \"middle\",\r\n                        tickValues: 30,\r\n                    }}\r\n                    axisLeft={{\r\n                        orient: \"left\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendOffset: -50,\r\n                        legendPosition: \"middle\",\r\n                        format: (value) => `${value + \"%\"}`,\r\n                    }}\r\n                    yFormat={(value) => `${Math.round(value)}%`}\r\n                    lineWidth={4}\r\n                    enablePoints={false}\r\n                    colors={(d) => d.color}\r\n                    enableArea={false}\r\n                    areaOpacity={0.3}\r\n                    enableSlices=\"x\"\r\n                    useMesh={true}\r\n                    legends={[\r\n                        {\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 0,\r\n                            itemDirection: \"left-to-right\",\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            symbolShape: \"circle\",\r\n                            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                            effects: [\r\n                                {\r\n                                    on: \"hover\",\r\n                                    style: {\r\n                                        //itemBackground: \"rgba(255, 255, 255, .03)\",\r\n                                        itemOpacity: 1,\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]}\r\n                    motionConfig=\"stiff\"\r\n                    theme={theme}\r\n                ></ResponsiveLine>\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartLevelDistribution;\r\n","import React from \"react\";\r\nimport { ReactComponent as TimelineSVG } from \"../assets/global/timeline.svg\";\r\nimport { ReactComponent as ExpandSVG } from \"../assets/global/expand.svg\";\r\n\r\nconst ContentTable = (props) => {\r\n    const [filteredData, set_filteredData] = React.useState(null);\r\n    const [expanded, set_expanded] = React.useState(false);\r\n\r\n    function generateLevelString(quest) {\r\n        return `${quest.CR_Heroic ? \"Heroic: \" + quest.CR_Heroic : \"\"}${\r\n            quest.CR_Heroic && quest.CR_Epic ? \" / \" : \"\"\r\n        }${quest.CR_Epic ? \"Epic: \" + quest.CR_Epic : \"\"}`;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (props.data === null) return;\r\n        if (props.activeFilter === \"By Adventure Pack\") {\r\n            set_filteredData(\r\n                props.data\r\n                    .sort(function (a, b) {\r\n                        return props.activeOrder === \"Least Popular\"\r\n                            ? a.Count - b.Count\r\n                            : b.Count - a.Count;\r\n                    })\r\n                    .filter((quest) => quest.Count > 100)\r\n                    .slice(0, 20)\r\n            );\r\n        } else {\r\n            set_filteredData(\r\n                props.data\r\n                    .filter((quest) => quest.Patron !== null)\r\n                    .filter((quest) =>\r\n                        props.activeFilter === \"Raids Only\" ? quest.Raid : true\r\n                    )\r\n                    .filter((quest) =>\r\n                        props.activeFilter === \"Free to Play\"\r\n                            ? quest.AdventurePack === null\r\n                            : true\r\n                    )\r\n                    .sort(function (a, b) {\r\n                        return props.activeOrder === \"Least Popular\"\r\n                            ? a.Count - b.Count\r\n                            : b.Count - a.Count;\r\n                    })\r\n                    .slice(0, 20)\r\n            );\r\n        }\r\n    }, [props.data, props.activeFilter, props.activeOrder]); // Only filter the data when a) the data has changed, or b) the filter has changed\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                className={\r\n                    \"content-table-container\" + (expanded ? \" expanded\" : \"\")\r\n                }\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                {filteredData === null ? (\r\n                    <div className=\"loading-data-message\">\r\n                        <h5>Loading data...</h5>\r\n                    </div>\r\n                ) : props.activeFilter === \"By Adventure Pack\" ? (\r\n                    <table className=\"content-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Adventure Pack</th>\r\n                                <th>Instances</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {filteredData.map((adventurePack, i) => (\r\n                                <tr key={adventurePack.AdventurePack}>\r\n                                    <td>{i + 1}</td>\r\n                                    <td>\r\n                                        <div\r\n                                            style={{\r\n                                                cursor: \"pointer\",\r\n                                                textDecoration: \"underline\",\r\n                                            }}\r\n                                            onClick={() => {\r\n                                                console.log(\r\n                                                    adventurePack.AdventurePack\r\n                                                );\r\n                                            }}\r\n                                        >\r\n                                            {adventurePack.AdventurePack}\r\n                                            <TimelineSVG\r\n                                                className=\"link-icon\"\r\n                                                style={{ marginLeft: \"8px\" }}\r\n                                            />\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>{adventurePack.Count}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <table className=\"content-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Quest</th>\r\n                                <th>Patron</th>\r\n                                <th>Level</th>\r\n                                <th>Average Time</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {filteredData.map((quest, i) => (\r\n                                <tr key={quest.QuestName}>\r\n                                    <td>{i + 1}</td>\r\n                                    <td>\r\n                                        <div\r\n                                            style={{\r\n                                                cursor: \"pointer\",\r\n                                                textDecoration: \"underline\",\r\n                                                width: \"max-content\",\r\n                                            }}\r\n                                            onClick={() => {\r\n                                                console.log(quest.Id);\r\n                                            }}\r\n                                        >\r\n                                            {quest.QuestName +\r\n                                                (quest.QuestName ===\r\n                                                \"An Invitation to Dinner\"\r\n                                                    ? \"*\"\r\n                                                    : \"\")}\r\n                                            <TimelineSVG\r\n                                                className=\"link-icon\"\r\n                                                style={{ marginLeft: \"8px\" }}\r\n                                            />\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>{quest.Patron}</td>\r\n                                    <td>{generateLevelString(quest)}</td>\r\n                                    <td>{quest.AverageTime}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n                <div\r\n                    className=\"expand-content-table-button\"\r\n                    style={{\r\n                        display:\r\n                            expanded || filteredData === null\r\n                                ? \"none\"\r\n                                : \"block\",\r\n                    }}\r\n                    onClick={() => set_expanded(true)}\r\n                >\r\n                    Expand\r\n                    <ExpandSVG className=\"link-icon\" width={30} height={30} />\r\n                </div>\r\n            </div>\r\n            <p style={{ fontSize: \"smaller\" }}>\r\n                *\r\n                <span style={{ fontStyle: \"italic\" }}>\r\n                    An Invitation to Dinner\r\n                </span>{\" \"}\r\n                is over-represented in this report due to the high number of\r\n                players instance farming the quest.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContentTable;\r\n","var _path, _path2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgOnline = function SvgOnline(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0V0zm0 0h24v24H0V0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\",\n    fill: \"#0c0\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgOnline, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/online.bddf1de8.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgOffline = function SvgOffline(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\",\n    fill: \"#c00\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgOffline, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/offline.6892fc6f.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgPending = function SvgPending(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\",\n    fill: \"#00c\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgPending, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/pending.32662a4f.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { ReactComponent as OnlineSVG } from \"../assets/global/online.svg\";\r\nimport { ReactComponent as OfflineSVG } from \"../assets/global/offline.svg\";\r\nimport { ReactComponent as PendingSVG } from \"../assets/global/pending.svg\";\r\n\r\nconst ServerNames = [\r\n    \"Argonnessen\",\r\n    \"Cannith\",\r\n    \"Ghallanda\",\r\n    \"Khyber\",\r\n    \"Orien\",\r\n    \"Sarlona\",\r\n    \"Thelanis\",\r\n    \"Wayfinder\",\r\n    \"Hardcore\",\r\n];\r\n\r\nfunction GetSVG(world) {\r\n    if (!world.hasOwnProperty(\"Status\")) return <PendingSVG />;\r\n    switch (world.Status) {\r\n        case 0:\r\n            return <OfflineSVG />;\r\n        case 1:\r\n            return <OnlineSVG />;\r\n        default:\r\n            return <PendingSVG />;\r\n    }\r\n}\r\n\r\nconst ServerStatusDisplay = (props) => {\r\n    function PrettyTime(dt) {\r\n        return new Date(dt).toLocaleTimeString();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n                <h5 style={{ fontWeight: \"bold\" }}>\r\n                    {\"Server status \" +\r\n                        (props.data !== null &&\r\n                        props.data.hasOwnProperty(\"LastUpdateTime\")\r\n                            ? \"last updated \" +\r\n                              PrettyTime(props.data.LastUpdateTime)\r\n                            : \"loading...\")}\r\n                </h5>\r\n            </center>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"center\",\r\n                    flexWrap: \"wrap\",\r\n                }}\r\n            >\r\n                {props.data && props.data.Worlds\r\n                    ? props.data.Worlds.map((world, i) => (\r\n                          <div key={i} className=\"server-status-indicator\">\r\n                              <div style={{ paddingRight: \"5px\" }}>\r\n                                  {GetSVG(world)}\r\n                              </div>\r\n                              {world.Name}\r\n                          </div>\r\n                      ))\r\n                    : ServerNames.map((world, i) => (\r\n                          <div key={i} className=\"server-status-indicator\">\r\n                              <div style={{ paddingRight: \"5px\" }}>\r\n                                  <PendingSVG />\r\n                              </div>\r\n                              {world}\r\n                          </div>\r\n                      ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ServerStatusDisplay;\r\n","import * as React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Card from \"../components/Card\";\r\nimport ReportIssueForm from \"./ReportIssueForm\";\r\nimport ChartServerDistributionPie from \"./ChartServerDistributionPie\";\r\nimport ChartTimeOfDay from \"./ChartTimeOfDay\";\r\nimport ChartDayOfWeek from \"./ChartDayOfWeek\";\r\nimport ChartClassDistribution from \"./ChartClassDistribution\";\r\nimport ChartLevelDistribution from \"./ChartLevelDistribution\";\r\nimport ServerStatusDisplay from \"./ServerStatusDisplay\";\r\nimport ContentTable from \"./ContentTable\";\r\nimport PopupMessage from \"./PopupMessage\";\r\n\r\nconst TITLE = \"DDO Server Status\";\r\n\r\nconst serverNames = [\r\n    \"Argonnessen\",\r\n    \"Cannith\",\r\n    \"Ghallanda\",\r\n    \"Khyber\",\r\n    \"Orien\",\r\n    \"Sarlona\",\r\n    \"Thelanis\",\r\n    \"Wayfinder\",\r\n    \"Hardcore\",\r\n];\r\n\r\nconst Servers = (props) => {\r\n    React.useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            async function fetchArbitraryData(url, type) {\r\n                let response = await fetch(url);\r\n                if (type === \"json\") response = await response.json();\r\n                else if (type === \"text\") response = await response.text();\r\n                return response;\r\n            }\r\n\r\n            fetchArbitraryData(\r\n                \"https://www.playeraudit.com/api/serverstatus\",\r\n                \"json\"\r\n            ).then((val) => {\r\n                set_serverStatusData(val);\r\n            });\r\n        }, 60000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    // Data states\r\n    const [serverStatusData, set_serverStatusData] = React.useState(null);\r\n    const [serverDistributionPieData, set_serverDistributionPieData] =\r\n        React.useState(null);\r\n    const [timeOfDayData, set_timeOfDayData] = React.useState(null);\r\n    const [dayOfWeekData, set_dayOfWeekData] = React.useState(null);\r\n    const [classDistributionData, set_classDistributionData] =\r\n        React.useState(null);\r\n    const [levelDistributionData, set_levelDistributionData] =\r\n        React.useState(null);\r\n    const [contentLevelDistributionData, set_contentLevelDistributionData] =\r\n        React.useState(null);\r\n    const [contentData, set_contentData] = React.useState(null);\r\n\r\n    // Filter states\r\n    var [serverDistributionPieHistory, set_serverDistributionPieHistory] =\r\n        React.useState(\"1 Week\");\r\n    var [timeOfDayHistory, set_timeOfDayHistory] = React.useState(\"1 Week\");\r\n    var [dayOfWeekHistory, set_dayOfWeekHistory] = React.useState(\"1 Week\");\r\n    var [classDistributionFilter, set_classDistributionFilter] =\r\n        React.useState(\"Active Players\");\r\n    var [levelDistributionFilter, set_levelDistributionFilter] =\r\n        React.useState(\"Active Players\");\r\n    var [contentFilter, set_contentFilter] = React.useState(\"Active Players\");\r\n    var [contentOrder, set_contentOrder] = React.useState(\"Most Popular\");\r\n\r\n    // Display states\r\n    var [dayOfWeekDisplay, set_dayOfWeekDisplay] = React.useState(\"Grouped\");\r\n    var [classDistributionDisplay, set_classDistributionDisplay] =\r\n        React.useState(\"Grouped\");\r\n\r\n    function DisplayDayOfWeek(type) {\r\n        set_dayOfWeekDisplay(type);\r\n    }\r\n\r\n    function DisplayClassDistribution(type) {\r\n        set_classDistributionDisplay(type);\r\n    }\r\n\r\n    function FilterClassDistribution(type) {\r\n        set_classDistributionFilter(type);\r\n\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            type === \"Active Players\"\r\n                ? \"https://www.playeraudit.com/api/classdistribution?filter=active\"\r\n                : type === \"Inactive Players\"\r\n                ? \"https://www.playeraudit.com/api/classdistribution?filter=inactive\"\r\n                : type === \"End-game Players\"\r\n                ? \"https://www.playeraudit.com/api/classdistribution?filter=endgame\"\r\n                : \"https://www.playeraudit.com/api/classdistribution\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_classDistributionData(val);\r\n        });\r\n    }\r\n\r\n    function FilterLevelDistribution(type) {\r\n        set_levelDistributionFilter(type);\r\n\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            type === \"Active Players\"\r\n                ? \"https://www.playeraudit.com/api/leveldistribution?filter=active\"\r\n                : type === \"Inactive Players\"\r\n                ? \"https://www.playeraudit.com/api/leveldistribution?filter=inactive\"\r\n                : \"https://www.playeraudit.com/api/leveldistribution\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_levelDistributionData(val);\r\n        });\r\n    }\r\n\r\n    function FilterContentTable(type) {\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        if (\r\n            type === \"By Adventure Pack\" &&\r\n            contentFilter !== \"By Adventure Pack\"\r\n        ) {\r\n            fetchArbitraryData(\r\n                \"https://www.playeraudit.com/api/compendiumcount?s=adventurepacks\",\r\n                \"json\"\r\n            ).then((val) => {\r\n                set_contentData(val);\r\n                set_contentFilter(type);\r\n            });\r\n        } else if (\r\n            type !== \"By Adventure Pack\" &&\r\n            contentFilter === \"By Adventure Pack\"\r\n        ) {\r\n            fetchArbitraryData(\r\n                \"https://www.playeraudit.com/api/compendiumcount\",\r\n                \"json\"\r\n            ).then((val) => {\r\n                set_contentData(val);\r\n                set_contentFilter(type);\r\n            });\r\n        } else {\r\n            set_contentFilter(type);\r\n        }\r\n    }\r\n\r\n    function OrderContentTable(type) {\r\n        set_contentOrder(type);\r\n    }\r\n\r\n    function FilterContentTableGranular(servers) {\r\n        if (contentFilter === \"By Adventure Pack\") {\r\n            return;\r\n        }\r\n        let serverString = \"\";\r\n        for (let i = 0; i < servers.length; i++) {\r\n            if (servers[i]) {\r\n                serverString += serverNames[i].toLowerCase() + \",\";\r\n            }\r\n        }\r\n        if (serverString) {\r\n            serverString = serverString.substring(0, serverString.length - 1);\r\n        }\r\n\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/compendiumcount?s=\" + serverString,\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_contentData(val);\r\n        });\r\n    }\r\n\r\n    function HistoryPieByServer(type) {\r\n        set_serverDistributionPieHistory(type);\r\n\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            type === \"1 Week\"\r\n                ? \"https://www.playeraudit.com/api/distribution_1w\"\r\n                : \"https://www.playeraudit.com/api/distribution_1q\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_serverDistributionPieData(val);\r\n        });\r\n    }\r\n\r\n    function HistoryTimeOfDay(type) {\r\n        set_timeOfDayHistory(type);\r\n\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            type === \"1 Week\"\r\n                ? \"https://www.playeraudit.com/api/timeofday_1w\"\r\n                : \"https://www.playeraudit.com/api/timeofday_1q\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_timeOfDayData(val);\r\n        });\r\n    }\r\n\r\n    function HistoryDayOfWeek(type) {\r\n        set_dayOfWeekHistory(type);\r\n\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            type === \"1 Week\"\r\n                ? \"https://www.playeraudit.com/api/dayofweek_1w\"\r\n                : \"https://www.playeraudit.com/api/dayofweek_1q\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_dayOfWeekData(val);\r\n        });\r\n    }\r\n\r\n    // Fetch the data on page load\r\n    React.useEffect(() => {\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/serverstatus\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_serverStatusData(val);\r\n            // Display the appropriate server status message\r\n            if (!val.hasOwnProperty(\"Worlds\")) {\r\n                set_popupMessages([\r\n                    ...popupMessages,\r\n                    {\r\n                        title: \"Something went wrong!\",\r\n                        message:\r\n                            \"The server list is missing. We're not sure if the servers are online or not. You'll have to login and check.\",\r\n                        icon: \"error\",\r\n                    },\r\n                ]);\r\n            } else {\r\n                let offlineWorlds = [];\r\n                val.Worlds.forEach(function (World) {\r\n                    if (!World.hasOwnProperty(\"Status\")) {\r\n                        // Status is missing from this World\r\n                    } else if (World.Status === 0) {\r\n                        // This World is offline\r\n                        offlineWorlds.push(World.Name);\r\n                    }\r\n                });\r\n                if (offlineWorlds.length >= 8) {\r\n                    set_popupMessages([\r\n                        ...popupMessages,\r\n                        {\r\n                            messageType: \"all servers offline\",\r\n                        },\r\n                    ]);\r\n                } else if (offlineWorlds.length > 1) {\r\n                    set_popupMessages([\r\n                        ...popupMessages,\r\n                        {\r\n                            messageType: \"some servers offline\",\r\n                        },\r\n                    ]);\r\n                } else if (offlineWorlds.length === 1) {\r\n                    if (offlineWorlds[0] === \"Hardcore\") {\r\n                        // Only Hardcore is down\r\n                    } else {\r\n                        set_popupMessages([\r\n                            ...popupMessages,\r\n                            {\r\n                                title: offlineWorlds[0] + \" Offline\",\r\n                                message:\r\n                                    offlineWorlds[0] +\r\n                                    \" appears to be temporarily offline.\",\r\n                                icon: \"info\",\r\n                                fullscreen: false,\r\n                            },\r\n                        ]);\r\n                    }\r\n                } else {\r\n                    // set_popupMessages([\r\n                    //     ...popupMessages,\r\n                    //     {\r\n                    //         messageType: \"all servers online\",\r\n                    //     },\r\n                    // ]);\r\n                }\r\n            }\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/distribution_1w\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_serverDistributionPieData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/timeofday_1w\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_timeOfDayData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/dayofweek_1w\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_dayOfWeekData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/classdistribution?filter=active\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_classDistributionData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/leveldistribution?filter=active\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_levelDistributionData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/contentleveldistribution\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_contentLevelDistributionData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/compendiumcount\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_contentData(val);\r\n        });\r\n    }, []);\r\n\r\n    // Report Form\r\n    var [reportFormVisibility, setReportFormVisibility] =\r\n        React.useState(\"none\");\r\n    var [reportFormReference, setReportFormReference] = React.useState(null);\r\n    function showReportForm(reference) {\r\n        // Grab relevant info from the tile element that's being reported\r\n        let referenceInfo = {\r\n            title: reference.title,\r\n            type: reference.chartType,\r\n            displayType: reference.displayType,\r\n            trendType: reference.trendType,\r\n            showActions: reference.showActions,\r\n            //data: reference.chartData,\r\n        };\r\n        // Show the report form\r\n        setReportFormReference(referenceInfo);\r\n        setReportFormVisibility(\"block\");\r\n    }\r\n    function hideReportForm() {\r\n        setReportFormVisibility(\"none\");\r\n    }\r\n\r\n    // Popup message\r\n    var [popupMessages, set_popupMessages] = React.useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>{TITLE}</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Check server status, browse live server reports, view a detailed population demographics by server, and decide which server best fits your time zone.\"\r\n                />\r\n            </Helmet>\r\n            <ReportIssueForm\r\n                page=\"servers\"\r\n                showLink={false}\r\n                visibility={reportFormVisibility}\r\n                componentReference={reportFormReference}\r\n                hideReportForm={hideReportForm}\r\n            />\r\n            <PopupMessage\r\n                messages={popupMessages}\r\n                popMessage={() => {\r\n                    if (popupMessages.length) {\r\n                        let newMessages = [...popupMessages];\r\n                        newMessages = newMessages.slice(1);\r\n                        set_popupMessages(newMessages);\r\n                    }\r\n                }}\r\n            />\r\n            <Card pageName=\"servers\" title=\"\" subtitle=\"\">\r\n                <ServerStatusDisplay data={serverStatusData} />\r\n            </Card>\r\n            <Card\r\n                pageName=\"servers\"\r\n                showLink={true}\r\n                title=\"Who's Playing Where?\"\r\n                subtitle=\"\"\r\n                tiles={[\r\n                    {\r\n                        title: \"Player Population by Server\",\r\n                        description: (\r\n                            <p>\r\n                                The last{\" \"}\r\n                                {serverDistributionPieHistory === \"1 Week\"\r\n                                    ? \"week\"\r\n                                    : \"quarter\"}{\" \"}\r\n                                averaged{\" \"}\r\n                                <span className=\"blue-text\">by server</span>.\r\n                                Click on a server to see more detailed\r\n                                information.\r\n                            </p>\r\n                        ),\r\n                        content: (\r\n                            <ChartServerDistributionPie\r\n                                data={serverDistributionPieData}\r\n                                filters={[\r\n                                    {\r\n                                        name: \"History\",\r\n                                        reference: HistoryPieByServer,\r\n                                        options: [\"1 Week\", \"1 Quarter\"],\r\n                                        index: 0,\r\n                                    },\r\n                                ]}\r\n                                showActions={true}\r\n                                showLastUpdated={false}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n            <Card\r\n                pageName=\"servers\"\r\n                showLink={true}\r\n                title=\"Who's Playing When?\"\r\n                subtitle=\"\"\r\n                tiles={[\r\n                    {\r\n                        title: \"Time of Day\",\r\n                        description: (\r\n                            <p>\r\n                                The last{\" \"}\r\n                                {timeOfDayHistory === \"1 Week\"\r\n                                    ? \"week\"\r\n                                    : \"quarter\"}{\" \"}\r\n                                averaged by{\" \"}\r\n                                <span className=\"blue-text\">time-of-day</span>.\r\n                                24-Hour format.\r\n                            </p>\r\n                        ),\r\n                        content: (\r\n                            <ChartTimeOfDay\r\n                                data={timeOfDayData}\r\n                                filters={[\r\n                                    {\r\n                                        name: \"History\",\r\n                                        reference: HistoryTimeOfDay,\r\n                                        options: [\"1 Week\", \"1 Quarter\"],\r\n                                        index: 0,\r\n                                    },\r\n                                ]}\r\n                                showActions={true}\r\n                                showLastUpdated={false}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                    {\r\n                        title: \"Day of Week\",\r\n                        description: (\r\n                            <p>\r\n                                The last{\" \"}\r\n                                {dayOfWeekHistory === \"1 Week\"\r\n                                    ? \"week\"\r\n                                    : \"quarter\"}{\" \"}\r\n                                averaged by{\" \"}\r\n                                <span className=\"blue-text\">day-of-week</span>.\r\n                            </p>\r\n                        ),\r\n                        content: (\r\n                            <ChartDayOfWeek\r\n                                display={dayOfWeekDisplay}\r\n                                data={dayOfWeekData}\r\n                                filters={[\r\n                                    {\r\n                                        name: \"History\",\r\n                                        reference: HistoryDayOfWeek,\r\n                                        options: [\"1 Week\", \"1 Quarter\"],\r\n                                        index: 0,\r\n                                    },\r\n                                    {\r\n                                        name: \"Display\",\r\n                                        reference: DisplayDayOfWeek,\r\n                                        options: [\"Grouped\", \"Stacked\"],\r\n                                        index: 0,\r\n                                    },\r\n                                ]}\r\n                                showActions={true}\r\n                                showLastUpdated={false}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n            <Card\r\n                pageName=\"servers\"\r\n                showLink={true}\r\n                title=\"Who's Playing What?\"\r\n                subtitle=\"\"\r\n                tiles={[\r\n                    {\r\n                        title: \"Class Distribution\",\r\n                        description: (\r\n                            <p>\r\n                                The percentage of{\" \"}\r\n                                {classDistributionFilter === \"Active Players\"\r\n                                    ? \"active players\"\r\n                                    : classDistributionFilter ===\r\n                                      \"Inactive Players\"\r\n                                    ? \"inactive players\"\r\n                                    : classDistributionFilter ===\r\n                                      \"End-game Players\"\r\n                                    ? \"end-game players (level 28+)\"\r\n                                    : \"all players\"}{\" \"}\r\n                                running each class. This report counts{\" \"}\r\n                                <span className=\"blue-text\">\r\n                                    primary class only\r\n                                </span>\r\n                                . Normalized for population. Quarterly rolling\r\n                                average.\r\n                            </p>\r\n                        ),\r\n                        content: (\r\n                            <ChartClassDistribution\r\n                                display={classDistributionDisplay}\r\n                                data={classDistributionData}\r\n                                activeFilter={classDistributionFilter}\r\n                                filters={[\r\n                                    {\r\n                                        name: \"Filter\",\r\n                                        reference: FilterClassDistribution,\r\n                                        options: [\r\n                                            \"All Players\",\r\n                                            \"Active Players\",\r\n                                            \"Inactive Players\",\r\n                                            \"End-game Players\",\r\n                                        ],\r\n                                        index: 1,\r\n                                    },\r\n                                    {\r\n                                        name: \"Display\",\r\n                                        reference: DisplayClassDistribution,\r\n                                        options: [\"Grouped\", \"Stacked\"],\r\n                                        index: 0,\r\n                                    },\r\n                                ]}\r\n                                showActions={true}\r\n                                showLastUpdated={false}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                    {\r\n                        title: \"Character Level Distribution\",\r\n                        description: (\r\n                            <p>\r\n                                The percentage of{\" \"}\r\n                                {levelDistributionFilter === \"Active Players\"\r\n                                    ? \"active players\"\r\n                                    : levelDistributionFilter ===\r\n                                      \"Inactive Players\"\r\n                                    ? \"inactive players\"\r\n                                    : levelDistributionFilter ===\r\n                                      \"End-game Players\"\r\n                                    ? \"end-game players (level 28+)\"\r\n                                    : \"all players\"}{\" \"}\r\n                                at each level. This report counts{\" \"}\r\n                                <span className=\"blue-text\">\r\n                                    total level (including epic)\r\n                                </span>\r\n                                . Normalized for population. Quarterly rolling\r\n                                average.\r\n                            </p>\r\n                        ),\r\n                        content: (\r\n                            <ChartLevelDistribution\r\n                                data={levelDistributionData}\r\n                                activeFilter={levelDistributionFilter}\r\n                                filters={[\r\n                                    {\r\n                                        name: \"Filter\",\r\n                                        reference: FilterLevelDistribution,\r\n                                        options: [\r\n                                            \"All Players\",\r\n                                            \"Active Players\",\r\n                                            \"Inactive Players\",\r\n                                        ],\r\n                                        index: 1,\r\n                                    },\r\n                                ]}\r\n                                showActions={true}\r\n                                showLastUpdated={false}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                    {\r\n                        title: \"Content Level Distribution\",\r\n                        description: (\r\n                            <p>\r\n                                The level of content being played. This report\r\n                                counts{\" \"}\r\n                                <span className=\"blue-text\">\r\n                                    each time a player enters a quest regardless\r\n                                    of whether or not the quest is completed\r\n                                </span>\r\n                                . Normalized for population. Quarterly rolling\r\n                                average.\r\n                            </p>\r\n                        ),\r\n                        content: (\r\n                            <ChartLevelDistribution\r\n                                data={contentLevelDistributionData}\r\n                                showActions={true}\r\n                                showLastUpdated={false}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                    {\r\n                        title: \"Most Popular Content\",\r\n                        description: (\r\n                            <p>\r\n                                The most commonly-played quests across DDO for\r\n                                the last 30 days.\r\n                                <br />\r\n                                Click on a quest to see recent popularity\r\n                                history.\r\n                            </p>\r\n                        ),\r\n                        content: (\r\n                            <ContentTable\r\n                                data={contentData}\r\n                                activeFilter={contentFilter}\r\n                                activeOrder={contentOrder}\r\n                                filters={[\r\n                                    {\r\n                                        name: \"Filter\",\r\n                                        reference: FilterContentTable,\r\n                                        options: [\r\n                                            \"All Content\",\r\n                                            \"Raids Only\",\r\n                                            \"Free to Play\",\r\n                                            \"By Adventure Pack\",\r\n                                        ],\r\n                                        index: 0,\r\n                                    },\r\n                                    {\r\n                                        name: \"Order By\",\r\n                                        reference: OrderContentTable,\r\n                                        options: [\r\n                                            \"Most Popular\",\r\n                                            \"Least Popular\",\r\n                                        ],\r\n                                        index: 0,\r\n                                    },\r\n                                ]}\r\n                                showServerFilters={\r\n                                    contentFilter !== \"By Adventure Pack\"\r\n                                }\r\n                                serverFilterReference={\r\n                                    FilterContentTableGranular\r\n                                }\r\n                                showActions={true}\r\n                                showLastUpdated={false}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Servers;\r\n"],"sourceRoot":""}