{"version":3,"sources":["components/ExpandableCard.jsx","components/PlayerAndLfmSubtitle.jsx","components/WhatIsCard.jsx","components/ChartPopulationHistory.jsx","components/QuickInfo.jsx","components/Home.jsx"],"names":["ExpandableCard","props","React","useState","viewState","set_viewState","className","style","maxHeight","largeHeight","smallHeight","transition","display","onClick","children","height","flexDirection","justifyContent","alignItems","cursor","fontSize","position","bottom","left","width","transform","PlayerAndLfmSubtitle","data","playercount","forEach","server","id","length","y","GetPlayersOnline","toString","replace","WhatIsCard","paddingTop","isExpandable","fontWeight","href","rel","target","theme","background","textColor","axis","domain","line","stroke","strokeWidth","ticks","grid","crosshair","strokeOpacity","strokeDasharray","tooltip","container","color","borderRadius","boxShadow","padding","basic","whiteSpace","table","tableCell","ChartPopulationHistory","filteredData","set_filteredData","useEffect","filter","series","activeFilter","filters","showServerFilters","margin","top","right","xScale","type","format","useUTC","xFormat","yScale","min","max","stacked","reverse","curve","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legendPosition","tickValues","trendType","axisLeft","legend","legendOffset","lineWidth","enablePoints","colors","d","enableArea","areaOpacity","enableSlices","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","motionConfig","QuickInfo","FormatWithCommas","x","lineHeight","paddingLeft","to","DefaultServer","toLowerCase","textDecoration","unique","total","UniquePlayers","GetTotalUniquePlayerCount","UniqueGuilds","GetTotalUniqueGuildCount","backgroundColor","textAlign","connect","population24HoursData","set_population24HoursData","population1WeekData","set_population1WeekData","population1QuarterData","set_population1QuarterData","quickInfoData","set_quickInfoData","uniqueCountsData","set_uniqueCountsData","set_serverStatusData","fetchArbitraryData","url","a","fetch","response","json","text","then","val","catch","error","message","title","icon","fullscreen","set_popupMessages","popupMessages","console","log","hasOwnProperty","offlineWorlds","Worlds","World","Status","push","Name","messageType","chart24Hoursfilter","set_chart24Hoursfilter","chart1WeekFilter","set_chart1WeekFilter","chart1QuarterFilter","set_chart1QuarterFilter","reportFormVisibility","set_reportFormVisibility","reportFormReference","setReportFormReference","showReportForm","reference","referenceInfo","chartType","displayType","showActions","Helmet","name","content","ReportIssueForm","page","visibility","componentReference","hideReportForm","PopupMessage","messages","popMessage","newMessages","slice","Card","pageName","showLink","subtitle","tiles","description","options","index","showLastUpdated","reportReference"],"mappings":"4IA6EeA,IA1EQ,SAACC,GACpB,IAAI,EAA6BC,IAAMC,SAAS,aAAhD,mBAAKC,EAAL,KAAgBC,EAAhB,KAQA,OACI,yBACIC,UAAW,oBAAsBL,EAAMK,WAAa,IACpDC,MAAO,CACHC,UACkB,aAAdJ,EACMH,EAAMQ,YACNR,EAAMS,YAChBC,WAAY,qBAGhB,yBACIL,UAAU,sBACVC,MAAO,CACHK,QAAuB,aAAdR,EAA2B,OAAS,SAEjDS,QAAS,kBACLR,EACkB,aAAdD,EAA2B,YAAc,eAIpDH,EAAMa,SACP,yBAAKP,MAAO,CAAEQ,OAAQ,UACtB,yBACIR,MAAO,CACHK,QAAS,OACTI,cAAe,MACfC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,UACRC,SAAU,SACVC,SAAU,WACVC,OAAQ,MACRC,KAAM,MACNC,MAAO,QAEXX,QAAS,kBACLR,EACkB,aAAdD,EAA2B,YAAc,cAIjD,oCACuB,aAAdA,EAA2B,OAAS,OACzC,kBAAC,IAAD,CACIE,UAAU,YACVkB,MAAO,GACPT,OAAQ,GACRR,MAAO,CACHkB,UACI,WACe,aAAdrB,EACK,UACA,QACN,IACJO,WAAY,0B,iCCpExC,oBA0Cee,IAxCc,SAACzB,GAe1B,OACI,6BACKA,EAAM0B,KACH,iDACwB,IACpB,0BAAMrB,UAAU,qBAfhC,WACI,IAAIsB,EAAc,EAMlB,OALA3B,EAAM0B,KAAKE,SAAQ,SAACC,GACZA,EAAOC,KAAO9B,EAAM6B,SACpBF,EAAcE,EAAOH,KAAKG,EAAOH,KAAKK,OAAS,GAAGC,MAGnDL,EAS2BM,GAAmBC,WAnB5CC,QAAQ,wBAAyB,MAoBtB,IAJZ,qBAKuB,IACnB,0BAAM9B,UAAU,cAAc,iBANlC,gBAOY,IAIE,wBAKd,qB,iCCpChB,6BA4Ee+B,IAzEI,SAACpC,GAChB,OACI,kBAAC,IAAD,CACIK,UAAWL,EAAMK,UACjBI,YAAY,QACZD,YAAY,SACZF,MAAO,CAAE+B,WAAY,OAAQjB,SAAU,YACvCkB,cAAc,GAEd,wBAAIhC,MAAO,CAAEiC,WAAY,SAAzB,sBACA,0FACiE,IAC7D,uBACIC,KAAK,yBACLC,IAAI,sBACJC,OAAO,UAHX,+BAFJ,2QAeA,wBAAIpC,MAAO,CAAEiC,WAAY,SAAzB,iDAGA,4BACI,oeAUA,mQAMA,seAWJ,wBAAIjC,MAAO,CAAEiC,WAAY,SAAzB,sBACA,waASA,gCACI,0BAAMjC,MAAO,CAAEa,SAAU,WAAzB,2B,qEChEVwB,EAAQ,CACVC,WAAY,cACZC,UAAW,cACX1B,SAAU,GACV2B,KAAM,CACFC,OAAQ,CACJC,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBC,MAAO,CACHH,KAAM,CACFC,OAAQ,UACRC,YAAa,KAIzBE,KAAM,CACFJ,KAAM,CACFC,OAAQ,UACRC,YAAa,IAGrBG,UAAW,CACPL,KAAM,CACFC,OAAQ,cACRC,YAAa,EACbI,cAAe,EACfC,gBAAiB,QAGzBC,QAAS,CACLC,UAAW,CACPb,WAAY,cACZc,MAAO,UACPvC,SAAU,UACVwC,aAAc,MACdC,UAAW,6BACXC,QAAS,WAEbC,MAAO,CACHC,WAAY,MACZpD,QAAS,OACTM,WAAY,UAEhB+C,MAAO,GACPC,UAAW,CACPJ,QAAS,aAsINK,IAjIgB,SAAClE,GAC5B,MAAyCC,IAAMC,SAAS,MAAxD,mBAAOiE,EAAP,KAAqBC,EAArB,KA+CA,OA7CAnE,IAAMoE,WAAU,WACO,OAAfrE,EAAM0B,MACV0C,EACIpE,EAAM0B,KAAK4C,QACP,SAACC,GAAD,MACmB,UAAdA,EAAOzC,GACoB,sBAAvB9B,EAAMwE,cACI,UAAdD,EAAOzC,GACoB,oBAAvB9B,EAAMwE,cACXD,EAAOzC,KAAO9B,EAAMwE,mBAGjC,CAACxE,EAAM0B,KAAM1B,EAAMwE,eAkClB,yBACInE,UACIL,EAAMyE,SAAWzE,EAAM0E,kBACjB,mBACA,GAEVpE,MAAO,CAAEQ,OAAQ,UAEhBd,EAAM0B,KACH,kBAAC,IAAD,CACIA,KAAMyC,EACNQ,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKxD,OAAQ,GAAIC,KAAM,IACjDwD,OA3CL,CACHC,KAAM,OACNC,OAAQ,wBACRC,QAAQ,GAyCAC,QAAQ,yBACRC,OAAQ,CACJJ,KAAM,SACNK,IAAK,EACLC,IAAK,OACLC,SAAS,EACTC,SAAS,GAGbC,MAAM,UACNC,QAAS,KACTC,UAAW,KACXC,WAhDL,CACHC,OAAQ,SACRC,SAAU,EACVC,YAAa,EACbC,cAAe,GAEfC,eAAgB,SAChBC,WACwB,QAApBjG,EAAMkG,UACA,eACoB,SAApBlG,EAAMkG,UACN,eACA,eACVlB,OACwB,QAApBhF,EAAMkG,UACA,YACoB,SAApBlG,EAAMkG,UACN,YACA,aA+BFC,SAAU,CACNP,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdK,OAAQ,UACRC,cAAe,GACfL,eAAgB,UAEpBM,UAAW,EACXC,cAAc,EACdC,OAAQ,SAACC,GAAD,OAAOA,EAAE/C,OACjBgD,WAAmC,oBAAvB1G,EAAMwE,aAClBmC,YAAa,GACbC,aAAa,IACbC,SAAS,EACTC,QAAS,CACL,CACIC,OAAQ,QACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,IACXC,WAAY,GACZC,YAAa,EACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACL,CACIC,GAAI,QACJvH,MAAO,CAEHkH,YAAa,OAMjCM,aAAa,QACbnF,MAAOA,IAGX,yBAAKtC,UAAU,wBACX,mD,6ICnDL0H,EA/HG,SAAC/H,GACf,SAASgI,EAAiBC,GACtB,OAAOA,EAAE9F,QAAQ,wBAAyB,KAmB9C,OACI,yBAAK9B,UAAW,QAAUL,EAAMK,WAC5B,wBAAIC,MAAO,CAAEa,SAAU,UAAWoB,WAAY,SAA9C,cAGA,wBACIjC,MAAO,CACHa,SAAU,SACV+G,WAAY,SACZC,YAAa,SAGjB,oDAC0B,IACN,OAAfnI,EAAM0B,KACH,eAEA,kBAAC,IAAD,CACII,GAAG,iBACHzB,UAAU,YACV+H,GACI,cACApI,EAAM0B,KAAK2G,cAAcC,cAE7BhI,MAAO,CAAEiI,eAAgB,cAExBvI,EAAM0B,KAAK2G,gBAIxB,2DACiC,IACb,OAAfrI,EAAM0B,KACH,eAEA,kBAAC,IAAD,CACII,GAAG,kBACHzB,UAAU,YACV+H,GACI,cACApI,EAAM0B,KAAK2G,cAAcC,cAE7BhI,MAAO,CAAEiI,eAAgB,cAExBvI,EAAM0B,KAAK2G,gBAIxB,8DACoC,IAChC,0BAAMhI,UAAU,qBACM,OAAjBL,EAAMwI,OACD,eApE1B,WACI,IAAIC,EAAQ,EAIZ,OAHAzI,EAAMwI,OAAO5G,SAAQ,SAACC,GAClB4G,GAAS5G,EAAO6G,iBAEbV,EAAiBS,EAAMvG,YAgERyG,IACF,IANZ,wBAO0B,IACtB,0BAAMtI,UAAU,cACM,OAAjBL,EAAMwI,OACD,eAlE1B,WACI,IAAIC,EAAQ,EAIZ,OAHAzI,EAAMwI,OAAO5G,SAAQ,SAACC,GAClB4G,GAAS5G,EAAO+G,gBAEbZ,EAAiBS,EAAMvG,YA8DR2G,IACF,IAZZ,mBAgBJ,wBAAIvI,MAAO,CAAEiB,MAAO,MAAOuH,gBAAiB,gBAC5C,wBAAIxI,MAAO,CAAEa,SAAU,UAAWoB,WAAY,SAA9C,mBAGA,uBACIjC,MAAO,CACHyI,UAAW,UACX5H,SAAU,SACV+G,WAAY,WAGhB,8CAPJ,sEAQ6B,IACzB,kBAAC,IAAD,CACIE,GAAG,YACH/H,UAAU,YACVC,MAAO,CAAEiI,eAAgB,cAH7B,iBATJ,0BAgB4B,IACxB,kBAAC,IAAD,CACIH,GAAG,OACH/H,UAAU,YACVC,MAAO,CAAEiI,eAAgB,cAH7B,iBAjBJ,8DAwBgE,IAC5D,kBAAC,IAAD,CACIH,GAAG,WACH/H,UAAU,YACVC,MAAO,CAAEiI,eAAgB,cAH7B,eAzBJ,2B,kCCsbGS,yBArgBF,SAAChJ,GACV,MACIC,WAAe,MADnB,mBAAOgJ,EAAP,KAA8BC,EAA9B,KAEA,EAAuDjJ,WAAe,MAAtE,mBAAOkJ,EAAP,KAA4BC,EAA5B,KACA,EACInJ,WAAe,MADnB,mBAAOoJ,EAAP,KAA+BC,EAA/B,KAEA,EAA2CrJ,WAAe,MAA1D,mBAAOsJ,EAAP,KAAsBC,EAAtB,KACA,EAAiDvJ,WAAe,MAAhE,mBAAOwJ,EAAP,KAAyBC,EAAzB,KAEA,EAAiDzJ,WAAe,MAAhE,mBAAyB0J,GAAzB,WAOA1J,aAAgB,WAAO,SACJ2J,EADG,gFAClB,WAAkCC,EAAK9E,GAAvC,eAAA+E,EAAA,sEACyBC,MAAMF,GAD/B,UACQG,EADR,OAEiB,SAATjF,EAFR,gCAE0CiF,EAASC,OAFnD,OAEyBD,EAFzB,iCAGsB,SAATjF,EAHb,kCAG+CiF,EAASE,OAHxD,QAG8BF,EAH9B,wCAIWA,GAJX,6CADkB,sBAQlBJ,EACI,8CACA,QAECO,MAAK,SAACC,GACHlB,EAA0BkB,MAE7BC,OAAM,SAACC,GApBhB,IAAuBC,IAqBG,CACVC,MAAO,sBACPD,QAAS,gDACTE,KAAM,UACNC,YAAY,GAxBxBC,GAAkB,GAAD,mBAAKC,IAAL,CAAoBL,KACrCM,QAAQC,IAAI,sBAAIF,IAAJ,CAAmBL,IAASxI,WA2BxC6H,EACI,+CACA,QACFO,MAAK,SAACC,GACJhB,EAAwBgB,MAG5BR,EACI,kDACA,QACFO,MAAK,SAACC,GACJd,EAA2Bc,MAG/BR,EACI,4CACA,QACFO,MAAK,SAACC,GACJZ,EAAkBY,MAGtBR,EACI,6CACA,QACFO,MAAK,SAACC,GACJV,EAAqBU,MAIzBR,EACI,+CACA,QACFO,MAAK,SAACC,GAGJ,GAFAT,EAAqBS,GAEhBA,EAAIW,eAAe,UAUjB,CACH,IAAIC,EAAgB,GACpBZ,EAAIa,OAAOrJ,SAAQ,SAAUsJ,GACpBA,EAAMH,eAAe,WAEE,IAAjBG,EAAMC,QAEbH,EAAcI,KAAKF,EAAMG,SAG7BL,EAAcjJ,QAAU,EACxB4I,GAAkB,GAAD,mBACVC,IADU,CAEb,CACIU,YAAa,0BAGdN,EAAcjJ,OAAS,EAC9B4I,GAAkB,GAAD,mBACVC,IADU,CAEb,CACIU,YAAa,2BAGW,IAAzBN,EAAcjJ,SACI,aAArBiJ,EAAc,IAGdL,GAAkB,GAAD,mBACVC,IADU,CAEb,CACIJ,MAAOQ,EAAc,GAAK,WAC1BT,QACIS,EAAc,GACd,sCACJP,KAAM,OACNC,YAAY,YA7C5BC,GAAkB,GAAD,mBACVC,IADU,CAEb,CACIJ,MAAO,wBACPD,QACI,+GACJE,KAAM,iBAqDvB,IAEH,IAAI,EACAxK,WAAe,mBADnB,mBAAKsL,EAAL,KAAyBC,EAAzB,KAEI,EACAvL,WAAe,mBADnB,mBAAKwL,EAAL,KAAuBC,EAAvB,KAEI,EACAzL,WAAe,mBADnB,mBAAK0L,EAAL,KAA0BC,EAA1B,KAGI,EACA3L,WAAe,QADnB,mBAAK4L,EAAL,KAA2BC,EAA3B,KAEI,EAAgD7L,WAAe,MAAnE,oBAAK8L,GAAL,MAA0BC,GAA1B,MACA,SAASC,GAAeC,GAEpB,IAAIC,EAAgB,CAChB3B,MAAO0B,EAAU1B,MACjBzF,KAAMmH,EAAUE,UAChBC,YAAaH,EAAUG,YACvBnG,UAAWgG,EAAUhG,UACrBoG,YAAaJ,EAAUI,aAI3BN,GAAuBG,GACvBL,EAAyB,SAoB7B,IAAI,GAAqC7L,WAAe,IAAxD,qBAAK2K,GAAL,MAAoBD,GAApB,MAsKA,OAnKA1K,aAAgB,cAqGb,IA+DC,2BACI,gBAACsM,EAAA,EAAD,KACI,6BA9VF,aA+VE,wBACIC,KAAK,cACLC,QAAQ,sLAGhB,gBAACC,EAAA,EAAD,CACIC,KAAK,OACLC,WAAYf,EACZgB,mBAAoBd,GACpBe,eApMZ,WACIhB,EAAyB,WAqMrB,gBAACiB,EAAA,EAAD,CACIC,SAAUpC,GACVqC,WAAY,WACR,GAAIrC,GAAc7I,OAAQ,CACtB,IAAImL,EAAW,YAAOtC,IACtBsC,EAAcA,EAAYC,MAAM,GAChCxC,GAAkBuC,OAI9B,gBAAC9K,EAAA,EAAD,CAAY/B,UAAU,YACtB,uBAAKA,UAAU,sBACX,gBAAC,EAAD,CACIA,UAAU,gCACVqB,KAAM6H,EACNf,OAAQiB,IAEZ,gBAAC2D,EAAA,EAAD,CACIC,SAAS,GACTC,UAAU,EACVjN,UAAU,2BACVmK,MAAM,2CACN+C,SACI,gBAAC9L,EAAA,EAAD,CACIC,KAAMuH,EACNpH,OAAO,UAGf2L,MAAO,CACH,CACIhD,MAAO,2CACPiD,YACI,uBAAKpN,UAAU,oBACX,iEAE4B,cAAvBkL,EACK,6BACA,mBAJV,MASRkB,QACI,gBAACvI,EAAA,EAAD,CACIxC,KAAMuH,EACN/C,UAAU,MACV1B,aAAc+G,EACd9G,QAAS,CACL,CACI+H,KAAM,SACNN,UApPxC,SAA2BnH,GACvByG,EAAuBzG,IAoPa2I,QAAS,CACL,kBACA,qBAEJC,MAAO,IAGfrB,aAAa,EACbsB,iBAAiB,EACjBC,gBAAiB5B,UAOzC,gBAACmB,EAAA,EAAD,CACIC,SAAS,GACTC,UAAU,EACV9C,MAAM,0CACN+C,SAAS,GACTC,MAAO,CACH,CACIhD,MAAO,yCACPiD,YACI,uBAAKpN,UAAU,oBACX,gEAE0B,cAArBoL,EACK,6BACA,mBAJV,IAKM,IACF,wBAAMpL,UAAU,aAAhB,mBAEQ,IARZ,mBAaRoM,QACI,gBAACvI,EAAA,EAAD,CACIxC,KAAMyH,EACNjD,UAAU,OACV1B,aAAciH,EACdhH,QAAS,CACL,CACI+H,KAAM,SACNN,UAhSpC,SAA0BnH,GACtB2G,EAAqB3G,IAgSW2I,QAAS,CACL,kBACA,qBAEJC,MAAO,IAGfrB,aAAa,EACbsB,iBAAiB,EACjBC,gBAAiB5B,MAI7B,CACIzB,MAAO,wCACPiD,YACI,uBAAKpN,UAAU,oBACX,gEAE6B,cAAxBsL,EACK,6BACA,mBAJV,IAKM,IACF,wBAAMtL,UAAU,aAAhB,kBAEQ,IARZ,mBAaRoM,QACI,gBAACvI,EAAA,EAAD,CACIxC,KAAM2H,EACNnD,UAAU,UACV1B,aAAcmH,EACdlH,QAAS,CACL,CACI+H,KAAM,SACNN,UAnUpC,SAA6BnH,GACzB6G,EAAwB7G,IAmUQ2I,QAAS,CACL,kBACA,qBAEJC,MAAO,IAGfrB,aAAa,EACbsB,iBAAiB,EACjBC,gBAAiB5B","file":"static/js/10.b00ecaa2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ReactComponent as ExpandSVG } from \"../assets/global/expand.svg\";\r\n\r\nconst ExpandableCard = (props) => {\r\n    var [viewState, set_viewState] = React.useState(\"collapsed\");\r\n\r\n    //let children = React.cloneElement(props.children);\r\n\r\n    // function CardId() {\r\n    //     return props.title.replace(/[^A-Z0-9\\s]+/gi, \"\").replace(/[\\s]+/g, \"_\");\r\n    // }\r\n\r\n    return (\r\n        <div\r\n            className={\"card expandable \" + (props.className || \"\")}\r\n            style={{\r\n                maxHeight:\r\n                    viewState === \"expanded\"\r\n                        ? props.largeHeight\r\n                        : props.smallHeight,\r\n                transition: \"max-height 400ms\",\r\n            }}\r\n        >\r\n            <div\r\n                className=\"expandable-gradient\"\r\n                style={{\r\n                    display: viewState === \"expanded\" ? \"none\" : \"block\",\r\n                }}\r\n                onClick={() =>\r\n                    set_viewState(\r\n                        viewState === \"expanded\" ? \"collapsed\" : \"expanded\"\r\n                    )\r\n                }\r\n            ></div>\r\n            {props.children}\r\n            <div style={{ height: \"25px\" }} />\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"larger\",\r\n                    position: \"absolute\",\r\n                    bottom: \"2px\",\r\n                    left: \"0px\",\r\n                    width: \"100%\",\r\n                }}\r\n                onClick={() =>\r\n                    set_viewState(\r\n                        viewState === \"expanded\" ? \"collapsed\" : \"expanded\"\r\n                    )\r\n                }\r\n            >\r\n                <div>\r\n                    See {viewState === \"expanded\" ? \"less\" : \"more\"}\r\n                    <ExpandSVG\r\n                        className=\"link-icon\"\r\n                        width={30}\r\n                        height={30}\r\n                        style={{\r\n                            transform:\r\n                                \"rotate(\" +\r\n                                (viewState === \"expanded\"\r\n                                    ? \"-180deg\"\r\n                                    : \"0deg\") +\r\n                                \")\",\r\n                            transition: \"transform 400ms\",\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExpandableCard;\r\n","import React from \"react\";\r\n\r\nconst PlayerAndLfmSubtitle = (props) => {\r\n    function FormatWithCommas(x) {\r\n        return x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    function GetPlayersOnline() {\r\n        let playercount = 0;\r\n        props.data.forEach((server) => {\r\n            if (server.id === props.server) {\r\n                playercount = server.data[server.data.length - 1].y;\r\n            }\r\n        });\r\n        return playercount;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.data ? (\r\n                <p>\r\n                    There are currently{\" \"}\r\n                    <span className=\"population-number\">\r\n                        {FormatWithCommas(GetPlayersOnline().toString())}\r\n                    </span>{\" \"}\r\n                    players online and{\" \"}\r\n                    <span className=\"lfm-number\">{\"GET_LFM_COUNT\"}</span> LFMs\r\n                    posted.{\" \"}\r\n                    {\r\n                        /*props.data[props.data.length - 1]\r\n                            .PlayerCount !== 0* <====================== */ 1\r\n                            ? \"Are you one of them?\"\r\n                            : \"Maybe everyone's anonymous.\"\r\n                    }\r\n                </p>\r\n            ) : (\r\n                \"Loading data...\"\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerAndLfmSubtitle;\r\n","import React from \"react\";\r\nimport ExpandableCard from \"./ExpandableCard\";\r\n\r\nconst WhatIsCard = (props) => {\r\n    return (\r\n        <ExpandableCard\r\n            className={props.className}\r\n            smallHeight=\"200px\"\r\n            largeHeight=\"1200px\"\r\n            style={{ paddingTop: \"20px\", position: \"absolute\" }}\r\n            isExpandable={true}\r\n        >\r\n            <h4 style={{ fontWeight: \"bold\" }}>What is DDO Audit?</h4>\r\n            <p>\r\n                DDO Audit is a real-time player and LFM tracking project for{\" \"}\r\n                <a\r\n                    href=\"https://www.ddo.com/en\"\r\n                    rel=\"noopener noreferrer\"\r\n                    target=\"_blank\"\r\n                >\r\n                    Dungeons and Dragons Online\r\n                </a>\r\n                . We track the current player population and posted LFMs for\r\n                each server and report that data in the form of interactable and\r\n                easy to understand charts and graphs, and familiar tools like\r\n                the Grouping and Who panels. Read more about the project on the\r\n                About page.\r\n            </p>\r\n            <h4 style={{ fontWeight: \"bold\" }}>\r\n                We want you to be informed and stay connected\r\n            </h4>\r\n            <ul>\r\n                <li>\r\n                    One of the most common questions we've witnessed new players\r\n                    ask regards which server would be the most populated during\r\n                    their active play-time. Luckily, we've taken all the\r\n                    guesswork out of it! While ultimately your choice of server\r\n                    should be based on a variety of factors (interactions you\r\n                    have with other players, guilds with similar interests,\r\n                    etc.), choosing the server that has the most traffic for\r\n                    your given time zone is a great place to start.\r\n                </li>\r\n                <li>\r\n                    There are a few server status tools around the web, but we\r\n                    wanted everything easily accessible from one site. Check the\r\n                    current server status at a glance from the Servers page to\r\n                    see if your favorite server is currently online.\r\n                </li>\r\n                <li>\r\n                    An offline (out of game) LFM panel has been something of\r\n                    great interest to the DDO community, and we're proud to be\r\n                    hosting the first ever implementation of it! The offline LFM\r\n                    panel has been a great resource to help increase player\r\n                    engagement and offer convenience to those with multiple\r\n                    characters across multiple servers. Check the LFM panel\r\n                    before you login to choose the appropriate character, or\r\n                    setup notifications to never miss raid night again!\r\n                </li>\r\n            </ul>\r\n            <h4 style={{ fontWeight: \"bold\" }}>Community-Oriented</h4>\r\n            <p>\r\n                We're dedicated to providing the DDO community with the most\r\n                accurate and useful data possible. Most of the features on this\r\n                website today were directly inspired or requested by community\r\n                members on the DDO Forums, Discord server, Reddit, or YouTube\r\n                channels. If you have any requests or suggestions, please reach\r\n                out! You can find my contact information on the About page. See\r\n                you in Eberron!\r\n            </p>\r\n            <center>\r\n                <span style={{ fontSize: \"larger\" }}>Clemeit of Thelanis</span>\r\n            </center>\r\n        </ExpandableCard>\r\n    );\r\n};\r\n\r\nexport default WhatIsCard;\r\n","import React from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\n// This chart is used to show the population history (combined or composite) over time.\r\n// Pages: Home, Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartPopulationHistory = (props) => {\r\n    const [filteredData, set_filteredData] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (props.data === null) return;\r\n        set_filteredData(\r\n            props.data.filter(\r\n                (series) =>\r\n                    (series.id === \"Total\") &\r\n                        (props.activeFilter === \"Combined Activity\") ||\r\n                    (series.id !== \"Total\") &\r\n                        (props.activeFilter === \"Server Activity\") ||\r\n                    series.id === props.activeFilter\r\n            )\r\n        );\r\n    }, [props.data, props.activeFilter]);\r\n\r\n    function XScale() {\r\n        return {\r\n            type: \"time\",\r\n            format: \"%Y-%m-%dT%H:%M:%S.%LZ\",\r\n            useUTC: false,\r\n        };\r\n    }\r\n\r\n    function BottomAxis() {\r\n        return {\r\n            orient: \"bottom\",\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: -45,\r\n            //legend: \"Time\",\r\n            legendPosition: \"middle\",\r\n            tickValues:\r\n                props.trendType === \"day\"\r\n                    ? \"every 1 hour\"\r\n                    : props.trendType === \"week\"\r\n                    ? \"every 6 hour\"\r\n                    : \"every 1 week\",\r\n            format:\r\n                props.trendType === \"day\"\r\n                    ? \"%-I:%M %p\"\r\n                    : props.trendType === \"week\"\r\n                    ? \"%a %-I %p\"\r\n                    : \"%a %b %-d\",\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveLine\r\n                    data={filteredData}\r\n                    margin={{ top: 20, right: 120, bottom: 60, left: 70 }}\r\n                    xScale={XScale()}\r\n                    xFormat=\"time:%Y-%m-%dT%H:%M:%S\"\r\n                    yScale={{\r\n                        type: \"linear\",\r\n                        min: 0,\r\n                        max: \"auto\",\r\n                        stacked: false,\r\n                        reverse: false,\r\n                    }}\r\n                    //yFormat=\" >-.2f\"\r\n                    curve=\"natural\"\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={BottomAxis()}\r\n                    axisLeft={{\r\n                        orient: \"left\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendOffset: -50,\r\n                        legendPosition: \"middle\",\r\n                    }}\r\n                    lineWidth={4}\r\n                    enablePoints={false}\r\n                    colors={(d) => d.color}\r\n                    enableArea={props.activeFilter !== \"Server Activity\"}\r\n                    areaOpacity={0.3}\r\n                    enableSlices=\"x\"\r\n                    useMesh={true}\r\n                    legends={[\r\n                        {\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 0,\r\n                            itemDirection: \"left-to-right\",\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            symbolShape: \"circle\",\r\n                            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                            effects: [\r\n                                {\r\n                                    on: \"hover\",\r\n                                    style: {\r\n                                        //itemBackground: \"rgba(255, 255, 255, .03)\",\r\n                                        itemOpacity: 1,\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]}\r\n                    motionConfig=\"stiff\"\r\n                    theme={theme}\r\n                ></ResponsiveLine>\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartPopulationHistory;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst QuickInfo = (props) => {\r\n    function FormatWithCommas(x) {\r\n        return x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    function GetTotalUniquePlayerCount() {\r\n        let total = 0;\r\n        props.unique.forEach((server) => {\r\n            total += server.UniquePlayers;\r\n        });\r\n        return FormatWithCommas(total.toString());\r\n    }\r\n\r\n    function GetTotalUniqueGuildCount() {\r\n        let total = 0;\r\n        props.unique.forEach((server) => {\r\n            total += server.UniqueGuilds;\r\n        });\r\n        return FormatWithCommas(total.toString());\r\n    }\r\n\r\n    return (\r\n        <div className={\"card \" + props.className}>\r\n            <h2 style={{ fontSize: \"x-large\", fontWeight: \"bold\" }}>\r\n                Quick Info\r\n            </h2>\r\n            <ul\r\n                style={{\r\n                    fontSize: \"larger\",\r\n                    lineHeight: \"normal\",\r\n                    paddingLeft: \"20px\",\r\n                }}\r\n            >\r\n                <li>\r\n                    The default server is{\" \"}\r\n                    {props.data === null ? (\r\n                        \"(Loading...)\"\r\n                    ) : (\r\n                        <Link\r\n                            id=\"default_server\"\r\n                            className=\"blue-link\"\r\n                            to={\r\n                                \"/servers?s=\" +\r\n                                props.data.DefaultServer.toLowerCase()\r\n                            }\r\n                            style={{ textDecoration: \"underline\" }}\r\n                        >\r\n                            {props.data.DefaultServer}\r\n                        </Link>\r\n                    )}\r\n                </li>\r\n                <li>\r\n                    The most populated server is{\" \"}\r\n                    {props.data === null ? (\r\n                        \"(Loading...)\"\r\n                    ) : (\r\n                        <Link\r\n                            id=\"populous_server\"\r\n                            className=\"blue-link\"\r\n                            to={\r\n                                \"/servers?s=\" +\r\n                                props.data.DefaultServer.toLowerCase()\r\n                            }\r\n                            style={{ textDecoration: \"underline\" }}\r\n                        >\r\n                            {props.data.DefaultServer}\r\n                        </Link>\r\n                    )}\r\n                </li>\r\n                <li>\r\n                    In the last quarter, we've seen{\" \"}\r\n                    <span className=\"population-number\">\r\n                        {props.unique === null\r\n                            ? \"(Loading...)\"\r\n                            : GetTotalUniquePlayerCount()}\r\n                    </span>{\" \"}\r\n                    unique characters and{\" \"}\r\n                    <span className=\"lfm-number\">\r\n                        {props.unique === null\r\n                            ? \"(Loading...)\"\r\n                            : GetTotalUniqueGuildCount()}\r\n                    </span>{\" \"}\r\n                    unique guilds.\r\n                </li>\r\n            </ul>\r\n            <hr style={{ width: \"80%\", backgroundColor: \"whitesmoke\" }} />\r\n            <h2 style={{ fontSize: \"x-large\", fontWeight: \"bold\" }}>\r\n                Of Special Note\r\n            </h2>\r\n            <p\r\n                style={{\r\n                    textAlign: \"justify\",\r\n                    fontSize: \"larger\",\r\n                    lineHeight: \"normal\",\r\n                }}\r\n            >\r\n                <b>March 24, 2021:</b> Hardcore League Season 4 begins March 31,\r\n                2021! Find groups on the{\" \"}\r\n                <Link\r\n                    to=\"/grouping\"\r\n                    className=\"blue-link\"\r\n                    style={{ textDecoration: \"underline\" }}\r\n                >\r\n                    Grouping page\r\n                </Link>\r\n                , lookup players on the{\" \"}\r\n                <Link\r\n                    to=\"/who\"\r\n                    className=\"blue-link\"\r\n                    style={{ textDecoration: \"underline\" }}\r\n                >\r\n                    live Who list\r\n                </Link>\r\n                , and discover what builds other players are running on the{\" \"}\r\n                <Link\r\n                    to=\"/servers\"\r\n                    className=\"blue-link\"\r\n                    style={{ textDecoration: \"underline\" }}\r\n                >\r\n                    Server page\r\n                </Link>\r\n                . See you in Eberron!\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuickInfo;\r\n","import * as React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"./Card\";\r\nimport PlayerAndLfmSubtitle from \"./PlayerAndLfmSubtitle\";\r\nimport QuickInfo from \"./QuickInfo\";\r\nimport WhatIsCard from \"./WhatIsCard\";\r\nimport ReportIssueForm from \"./ReportIssueForm\";\r\nimport ChartPopulationHistory from \"./ChartPopulationHistory\";\r\nimport PopupMessage from \"./PopupMessage\";\r\n\r\nconst TITLE = \"DDO Audit\";\r\n\r\nconst Home = (props) => {\r\n    const [population24HoursData, set_population24HoursData] =\r\n        React.useState(null);\r\n    const [population1WeekData, set_population1WeekData] = React.useState(null);\r\n    const [population1QuarterData, set_population1QuarterData] =\r\n        React.useState(null);\r\n    const [quickInfoData, set_quickInfoData] = React.useState(null);\r\n    const [uniqueCountsData, set_uniqueCountsData] = React.useState(null);\r\n\r\n    const [serverStatusData, set_serverStatusData] = React.useState(null); // Server status data\r\n\r\n    function AppendToPopup(message) {\r\n        set_popupMessages([...popupMessages, message]);\r\n        console.log([...popupMessages, message].length);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            \"https://api.npafrequency.xyz/population/day\",\r\n            \"json\"\r\n        )\r\n            .then((val) => {\r\n                set_population24HoursData(val);\r\n            })\r\n            .catch((error) => {\r\n                AppendToPopup({\r\n                    title: \"Data failed to load\",\r\n                    message: \"Some of the data on this page failed to load.\",\r\n                    icon: \"warning\",\r\n                    fullscreen: false,\r\n                });\r\n            });\r\n\r\n        fetchArbitraryData(\r\n            \"https://api.npafrequency.xyz/population/week\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_population1WeekData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://api.npafrequency.xyz/population/quarter\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_population1QuarterData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/quickinfo\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_quickInfoData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/uniquedata\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_uniqueCountsData(val);\r\n        });\r\n\r\n        // Fetch server status\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/serverstatus\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_serverStatusData(val);\r\n            // Display the appropriate server status message\r\n            if (!val.hasOwnProperty(\"Worlds\")) {\r\n                set_popupMessages([\r\n                    ...popupMessages,\r\n                    {\r\n                        title: \"Something went wrong!\",\r\n                        message:\r\n                            \"The server list is missing. We're not sure if the servers are online or not. You'll have to login and check.\",\r\n                        icon: \"error\",\r\n                    },\r\n                ]);\r\n            } else {\r\n                let offlineWorlds = [];\r\n                val.Worlds.forEach(function (World) {\r\n                    if (!World.hasOwnProperty(\"Status\")) {\r\n                        // Status is missing from this World\r\n                    } else if (World.Status === 0) {\r\n                        // This World is offline\r\n                        offlineWorlds.push(World.Name);\r\n                    }\r\n                });\r\n                if (offlineWorlds.length >= 8) {\r\n                    set_popupMessages([\r\n                        ...popupMessages,\r\n                        {\r\n                            messageType: \"all servers offline\",\r\n                        },\r\n                    ]);\r\n                } else if (offlineWorlds.length > 1) {\r\n                    set_popupMessages([\r\n                        ...popupMessages,\r\n                        {\r\n                            messageType: \"some servers offline\",\r\n                        },\r\n                    ]);\r\n                } else if (offlineWorlds.length === 1) {\r\n                    if (offlineWorlds[0] === \"Hardcore\") {\r\n                        // Only Hardcore is down\r\n                    } else {\r\n                        set_popupMessages([\r\n                            ...popupMessages,\r\n                            {\r\n                                title: offlineWorlds[0] + \" Offline\",\r\n                                message:\r\n                                    offlineWorlds[0] +\r\n                                    \" appears to be temporarily offline.\",\r\n                                icon: \"info\",\r\n                                fullscreen: false,\r\n                            },\r\n                        ]);\r\n                    }\r\n                } else {\r\n                    // set_popupMessages([\r\n                    //     ...popupMessages,\r\n                    //     {\r\n                    //         messageType: \"all servers online\",\r\n                    //     },\r\n                    // ]);\r\n                }\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    var [chart24Hoursfilter, set_chart24Hoursfilter] =\r\n        React.useState(\"Server Activity\");\r\n    var [chart1WeekFilter, set_chart1WeekFilter] =\r\n        React.useState(\"Server Activity\");\r\n    var [chart1QuarterFilter, set_chart1QuarterFilter] =\r\n        React.useState(\"Server Activity\");\r\n\r\n    var [reportFormVisibility, set_reportFormVisibility] =\r\n        React.useState(\"none\");\r\n    var [reportFormReference, setReportFormReference] = React.useState(null);\r\n    function showReportForm(reference) {\r\n        // Grab relevant info from the tile element that's being reported\r\n        let referenceInfo = {\r\n            title: reference.title,\r\n            type: reference.chartType,\r\n            displayType: reference.displayType,\r\n            trendType: reference.trendType,\r\n            showActions: reference.showActions,\r\n            //data: reference.chartData,\r\n        };\r\n        // Show the report form\r\n        setReportFormReference(referenceInfo);\r\n        set_reportFormVisibility(\"block\");\r\n    }\r\n\r\n    function hideReportForm() {\r\n        set_reportFormVisibility(\"none\");\r\n    }\r\n\r\n    function Filter24HourChart(type) {\r\n        set_chart24Hoursfilter(type);\r\n    }\r\n\r\n    function Filter1WeekChart(type) {\r\n        set_chart1WeekFilter(type);\r\n    }\r\n\r\n    function Filter1QuarterChart(type) {\r\n        set_chart1QuarterFilter(type);\r\n    }\r\n\r\n    // Popup message\r\n    var [popupMessages, set_popupMessages] = React.useState([]);\r\n\r\n    // First visit to the site?\r\n    React.useEffect(() => {\r\n        // if (!(\"serviceWorker\" in navigator)) {\r\n        //     // Service Worker isn't supported on this browser, disable or hide UI.\r\n        //     console.log(\"No push!\");\r\n        //     return;\r\n        // }\r\n\r\n        // if (!(\"PushManager\" in window)) {\r\n        //     // Push isn't supported on this browser, disable or hide UI.\r\n        //     console.log(\"No push!\");\r\n        //     return;\r\n        // }\r\n\r\n        // const publicVapidKey =\r\n        //     \"BLHgHfWx0GfeaHhiMFzYj3Q4qDcSYAV65jrCaNgArov7d5PsT3t_MYLIqmtxCcSsd-9pOEslxOZulKc7sMgc0tY\";\r\n\r\n        // const subscription =\r\n        //     await navigator.serviceWorker.controller.pushManager.subscribe({\r\n        //         userVisibleOnly: true,\r\n        //         applicationServerKey: urlBase64ToUint8Array(publicVapidKey),\r\n        //     });\r\n\r\n        // await fetch(\"/subscribe\", {\r\n        //     method: \"POST\",\r\n        //     body: JSON.stringify(subsrciption),\r\n        //     headers: {\r\n        //         \"content-type\": \"application/json\",\r\n        //     },\r\n        // });\r\n\r\n        // function registerServiceWorker() {\r\n        //     return navigator.serviceWorker\r\n        //         .register(\"/service-worker.js\")\r\n        //         .then(function (registration) {\r\n        //             console.log(\"Service worker successfully registered.\");\r\n        //             return registration;\r\n        //         })\r\n        //         .catch(function (err) {\r\n        //             console.error(\"Unable to register service worker.\", err);\r\n        //         });\r\n        // }\r\n\r\n        // registerServiceWorker();\r\n\r\n        // function askPermission() {\r\n        //     return new Promise(function (resolve, reject) {\r\n        //         const permissionResult = Notification.requestPermission(\r\n        //             function (result) {\r\n        //                 resolve(result);\r\n        //             }\r\n        //         );\r\n\r\n        //         if (permissionResult) {\r\n        //             permissionResult.then(resolve, reject);\r\n        //         }\r\n        //     }).then(function (permissionResult) {\r\n        //         if (permissionResult !== \"granted\") {\r\n        //             console.log(\"We weren't granted permission.\");\r\n        //         } else {\r\n        //             subscribeUserToPush();\r\n        //         }\r\n        //     });\r\n        // }\r\n\r\n        // askPermission();\r\n\r\n        function urlBase64ToUint8Array(base64String) {\r\n            var padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n            var base64 = (base64String + padding)\r\n                .replace(/\\-/g, \"+\")\r\n                .replace(/_/g, \"/\");\r\n\r\n            var rawData = window.atob(base64);\r\n            var outputArray = new Uint8Array(rawData.length);\r\n\r\n            for (var i = 0; i < rawData.length; ++i) {\r\n                outputArray[i] = rawData.charCodeAt(i);\r\n            }\r\n            return outputArray;\r\n        }\r\n        // function subscribeUserToPush() {\r\n        //     return navigator.serviceWorker\r\n        //         .register(\"/service-worker.js\")\r\n        //         .then(function (registration) {\r\n        //             const subscribeOptions = {\r\n        //                 userVisibleOnly: true,\r\n        //                 applicationServerKey: urlBase64ToUint8Array(\r\n        //                     \"BEl62iUYgUivxIkv69yViEuiBIa-Ib9-SkvMeAtA3LFgDzkrxZJjSgSnfckjBJuBkr3qBUYIHBQFLXYp5Nksh8U\"\r\n        //                 ),\r\n        //             };\r\n\r\n        //             return registration.pushManager.subscribe(subscribeOptions);\r\n        //         })\r\n        //         .then(function (pushSubscription) {\r\n        //             console.log(\r\n        //                 \"Received PushSubscription: \",\r\n        //                 JSON.stringify(pushSubscription)\r\n        //             );\r\n        //             return pushSubscription;\r\n        //         });\r\n        // }\r\n    }, []);\r\n\r\n    // React.useState(() => {\r\n    //     setTimeout(() => {\r\n    //         // Do some cookie check!\r\n    //         AppendToPopup({\r\n    //             title: \"New Website!\",\r\n    //             message: (\r\n    //                 <div style={{ fontSize: \"larger\" }}>\r\n    //                     <p>\r\n    //                         DDO Audit has been completely rebuilt to improve\r\n    //                         responsiveness and offer additional functionality!\r\n    //                     </p>\r\n    //                     <h3\r\n    //                         style={{\r\n    //                             marginBottom: \"5px\",\r\n    //                         }}\r\n    //                     >\r\n    //                         Experiencing an issue?\r\n    //                     </h3>\r\n    //                     <p\r\n    //                         style={{\r\n    //                             marginLeft: \"10px\",\r\n    //                         }}\r\n    //                     >\r\n    //                         Report it with the{\" \"}\r\n    //                         <span\r\n    //                             className=\"blue-link chart-action-bar-item\"\r\n    //                             style={{ padding: \"0px\" }}\r\n    //                         >\r\n    //                             Report a problem\r\n    //                         </span>{\" \"}\r\n    //                         link located under each graph.\r\n    //                     </p>\r\n    //                     <h3\r\n    //                         style={{\r\n    //                             marginBottom: \"5px\",\r\n    //                         }}\r\n    //                     >\r\n    //                         Comments or suggestions for new features?\r\n    //                     </h3>\r\n    //                     <p\r\n    //                         style={{\r\n    //                             marginBottom: \"0px\",\r\n    //                             marginLeft: \"10px\",\r\n    //                         }}\r\n    //                     >\r\n    //                         Contact me!\r\n    //                     </p>\r\n    //                     <ul>\r\n    //                         <li>Discord: Clemeit#7994</li>\r\n    //                         <li>Twitter: @DDOAudit</li>\r\n    //                         <li>DDO Forums: Clemeit</li>\r\n    //                     </ul>\r\n    //                 </div>\r\n    //             ),\r\n    //             icon: \"info\",\r\n    //             fullscreen: true,\r\n    //         });\r\n    //     }, 2000);\r\n    // }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>{TITLE}</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"A live summary of DDO's current player population and LFM status. View population trends, check server status, browse live grouping panels, and see what server is best for you!\"\r\n                />\r\n            </Helmet>\r\n            <ReportIssueForm\r\n                page=\"home\"\r\n                visibility={reportFormVisibility}\r\n                componentReference={reportFormReference}\r\n                hideReportForm={hideReportForm}\r\n            />\r\n            <PopupMessage\r\n                messages={popupMessages}\r\n                popMessage={() => {\r\n                    if (popupMessages.length) {\r\n                        let newMessages = [...popupMessages];\r\n                        newMessages = newMessages.slice(1);\r\n                        set_popupMessages(newMessages);\r\n                    }\r\n                }}\r\n            />\r\n            <WhatIsCard className=\"on-home\" />\r\n            <div className=\"home-card-splitter\">\r\n                <QuickInfo\r\n                    className=\"card home-card-splitter-pane1\"\r\n                    data={quickInfoData}\r\n                    unique={uniqueCountsData}\r\n                />\r\n                <Card\r\n                    pageName=\"\"\r\n                    showLink={true}\r\n                    className=\"home-card-splitter-pane2\"\r\n                    title=\"Currently on Dungeons and Dragons Online\"\r\n                    subtitle={\r\n                        <PlayerAndLfmSubtitle\r\n                            data={population24HoursData}\r\n                            server=\"Total\"\r\n                        />\r\n                    }\r\n                    tiles={[\r\n                        {\r\n                            title: \"Players and LFMs by Minute - All Servers\",\r\n                            description: (\r\n                                <div className=\"tile-description\">\r\n                                    <p>\r\n                                        A 24-hour rolling window of the total\r\n                                        {chart24Hoursfilter === \"Composite\"\r\n                                            ? \" population of each server\"\r\n                                            : \" game population\"}\r\n                                        .\r\n                                    </p>\r\n                                </div>\r\n                            ),\r\n                            content: (\r\n                                <ChartPopulationHistory\r\n                                    data={population24HoursData}\r\n                                    trendType=\"day\"\r\n                                    activeFilter={chart24Hoursfilter}\r\n                                    filters={[\r\n                                        {\r\n                                            name: \"Filter\",\r\n                                            reference: Filter24HourChart,\r\n                                            options: [\r\n                                                \"Server Activity\",\r\n                                                \"Combined Activity\",\r\n                                            ],\r\n                                            index: 0,\r\n                                        },\r\n                                    ]}\r\n                                    showActions={true}\r\n                                    showLastUpdated={true}\r\n                                    reportReference={showReportForm}\r\n                                />\r\n                            ),\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Card\r\n                pageName=\"\"\r\n                showLink={true}\r\n                title=\"Recently on Dungeons and Dragons Online\"\r\n                subtitle=\"\"\r\n                tiles={[\r\n                    {\r\n                        title: \"Players and LFMs by Hour - All Servers\",\r\n                        description: (\r\n                            <div className=\"tile-description\">\r\n                                <p>\r\n                                    A 1-week rolling window of the total\r\n                                    {chart1WeekFilter === \"Composite\"\r\n                                        ? \" population of each server\"\r\n                                        : \" game population\"}\r\n                                    .{\" \"}\r\n                                    <span className=\"blue-text\">\r\n                                        Hourly averages\r\n                                    </span>{\" \"}\r\n                                    are displayed.\r\n                                </p>\r\n                            </div>\r\n                        ),\r\n                        content: (\r\n                            <ChartPopulationHistory\r\n                                data={population1WeekData}\r\n                                trendType=\"week\"\r\n                                activeFilter={chart1WeekFilter}\r\n                                filters={[\r\n                                    {\r\n                                        name: \"Filter\",\r\n                                        reference: Filter1WeekChart,\r\n                                        options: [\r\n                                            \"Server Activity\",\r\n                                            \"Combined Activity\",\r\n                                        ],\r\n                                        index: 0,\r\n                                    },\r\n                                ]}\r\n                                showActions={true}\r\n                                showLastUpdated={true}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                    {\r\n                        title: \"Players and LFMs by Day - All Servers\",\r\n                        description: (\r\n                            <div className=\"tile-description\">\r\n                                <p>\r\n                                    A 90-day rolling window of the total\r\n                                    {chart1QuarterFilter === \"Composite\"\r\n                                        ? \" population of each server\"\r\n                                        : \" game population\"}\r\n                                    .{\" \"}\r\n                                    <span className=\"blue-text\">\r\n                                        Daily averages\r\n                                    </span>{\" \"}\r\n                                    are displayed.\r\n                                </p>\r\n                            </div>\r\n                        ),\r\n                        content: (\r\n                            <ChartPopulationHistory\r\n                                data={population1QuarterData}\r\n                                trendType=\"quarter\"\r\n                                activeFilter={chart1QuarterFilter}\r\n                                filters={[\r\n                                    {\r\n                                        name: \"Filter\",\r\n                                        reference: Filter1QuarterChart,\r\n                                        options: [\r\n                                            \"Server Activity\",\r\n                                            \"Combined Activity\",\r\n                                        ],\r\n                                        index: 0,\r\n                                    },\r\n                                ]}\r\n                                showActions={true}\r\n                                showLastUpdated={true}\r\n                                reportReference={showReportForm}\r\n                            />\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect()(Home);\r\n"],"sourceRoot":""}