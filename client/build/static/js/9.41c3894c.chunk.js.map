{"version":3,"sources":["assets/global/timeline.svg","components/PlayerAndLfmSubtitle.jsx","components/ChartPopulationHistory.jsx","components/ContentTable.jsx","components/UniqueCountsSubtitle.jsx","components/ChartGenderPie.jsx","components/ChartRacePie.jsx","components/ChartGuildAffiliationPie.jsx","components/ChartActivityPie.jsx","components/ServerDemographicsContainer.jsx","components/ServerSpecific.jsx"],"names":["_g","_g2","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgTimeline","_ref","svgRef","title","props","createElement","enableBackground","height","viewBox","width","ref","fill","d","ForwardRef","forwardRef","PlayerAndLfmSubtitle","data","className","playercount","forEach","server","id","y","GetPlayersOnline","toString","replace","theme","background","textColor","fontSize","axis","domain","line","stroke","strokeWidth","ticks","grid","crosshair","strokeOpacity","strokeDasharray","tooltip","container","color","borderRadius","boxShadow","padding","basic","whiteSpace","display","alignItems","table","tableCell","ChartPopulationHistory","React","useState","filteredData","set_filteredData","useEffect","filter","series","activeFilter","filters","showServerFilters","style","margin","top","right","bottom","left","xScale","type","format","useUTC","xFormat","yScale","min","max","stacked","reverse","curve","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legendPosition","tickValues","trendType","axisLeft","legend","legendOffset","lineWidth","enablePoints","colors","enableArea","areaOpacity","enableSlices","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","motionConfig","ContentTable","expanded","set_expanded","sort","a","b","activeOrder","Count","quest","slice","Patron","Raid","AdventurePack","justifyContent","map","adventurePack","cursor","textDecoration","onClick","console","log","marginLeft","QuestName","Id","CR_Heroic","CR_Epic","generateLevelString","AverageTime","fontStyle","UniqueCountsSubtitle","FormatWithCommas","x","ServerName","UniquePlayers","GetUniquePlayers","guildcount","UniqueGuilds","GetUniqueGuilds","ChartGenderPie","valueFormat","sortByValue","padAngle","cornerRadius","innerRadius","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","enableArcLinkLabels","arcLinkLabelsSkipAngle","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabel","e","value","total","GetTotalPopulation","toFixed","arcLabelsSkipAngle","arcLabelsTextColor","ChartRacePie","scheme","ChartGuildAffiliationPie","ChartActivityPie","ServerDemographicsContainer","filteredGenderData","set_filteredGenderData","filteredGuildData","set_filteredGuildData","filteredActivityData","set_filteredActivityData","filteredRaceData","set_filteredRaceData","filteredClassData","set_filteredClassData","genderData","genderset","set","AllPlayers","ActivePlayers","InactivePlayers","EndgamePlayers","label","Male","Female","activityset","activityData","Active","Inactive","raceData","raceset","Human","Gnome","Warforged","Halfling","Elf","Dwarf","DrowElf","Tiefling","HalfElf","HalfOrc","Bladeforged","Shadarkai","PurpleDragonKnight","SunElf","DeepGnome","Dragonborn","Aasimar","AasimarScourge","WoodElf","TieflingScoundrel","Shifter","RazorclawShifter","classData","classset","Sorcerer","Wizard","Barbarian","Bard","Cleric","Fighter","Paladin","Ranger","Rogue","Monk","FavoredSoul","Warlock","Artificer","Druid","Alchemist","guildData","guildset","Affiliated","Unaffiliated","flexDirection","fontWeight","marginBottom","serverNames","ServerSpecific","set_serverStatusData","currentServer","set_currentServer","set_genderData","set_guildData","set_activityData","set_raceData","set_classData","uniqueData","set_uniqueData","population24HoursData","set_population24HoursData","population1WeekData","set_population1WeekData","population1QuarterData","set_population1QuarterData","contentData","set_contentData","demographicsFilter","set_demographicsFilter","contentFilter","set_contentFilter","contentOrder","set_contentOrder","location","useLocation","pathname","substring","lastIndexOf","serverName","toUpperCase","includes","fetchArbitraryData","url","fetch","response","json","text","then","val","offlineWorlds","Worlds","World","Status","push","Name","set_popupMessages","popupMessages","messageType","message","icon","fullscreen","setTimeout","reportFormVisibility","setReportFormVisibility","reportFormReference","setReportFormReference","showReportForm","reference","referenceInfo","chartType","displayType","showActions","Helmet","name","content","ReportIssueForm","page","toLowerCase","showLink","visibility","componentReference","hideReportForm","PopupMessage","messages","popMessage","newMessages","Card","pageName","subtitle","tiles","description","options","index","showLastUpdated","reportReference","specificServer"],"mappings":"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","file":"static/js/9.41c3894c.chunk.js","sourcesContent":["var _g, _g2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgTimeline = function SvgTimeline(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    enableBackground: \"new 0 0 24 24\",\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"rect\", {\n    fill: \"none\",\n    height: 24,\n    width: 24\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23,8c0,1.1-0.9,2-2,2c-0.18,0-0.35-0.02-0.51-0.07l-3.56,3.55C16.98,13.64,17,13.82,17,14c0,1.1-0.9,2-2,2s-2-0.9-2-2 c0-0.18,0.02-0.36,0.07-0.52l-2.55-2.55C10.36,10.98,10.18,11,10,11s-0.36-0.02-0.52-0.07l-4.55,4.56C4.98,15.65,5,15.82,5,16 c0,1.1-0.9,2-2,2s-2-0.9-2-2s0.9-2,2-2c0.18,0,0.35,0.02,0.51,0.07l4.56-4.55C8.02,9.36,8,9.18,8,9c0-1.1,0.9-2,2-2s2,0.9,2,2 c0,0.18-0.02,0.36-0.07,0.52l2.55,2.55C14.64,12.02,14.82,12,15,12s0.36,0.02,0.52,0.07l3.55-3.56C19.02,8.35,19,8.18,19,8 c0-1.1,0.9-2,2-2S23,6.9,23,8z\",\n    fill: \"#fff\"\n  }))))));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTimeline, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/timeline.c98753a4.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\n\r\nconst PlayerAndLfmSubtitle = (props) => {\r\n    function FormatWithCommas(x) {\r\n        return x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    function GetPlayersOnline() {\r\n        let playercount = 0;\r\n        props.data.forEach((server) => {\r\n            if (server.id === props.server) {\r\n                playercount = server.data[server.data.length - 1].y;\r\n            }\r\n        });\r\n        return playercount;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.data ? (\r\n                <p>\r\n                    There are currently{\" \"}\r\n                    <span className=\"population-number\">\r\n                        {FormatWithCommas(GetPlayersOnline().toString())}\r\n                    </span>{\" \"}\r\n                    players online and{\" \"}\r\n                    <span className=\"lfm-number\">{\"GET_LFM_COUNT\"}</span> LFMs\r\n                    posted.{\" \"}\r\n                    {\r\n                        /*props.data[props.data.length - 1]\r\n                            .PlayerCount !== 0* <====================== */ 1\r\n                            ? \"Are you one of them?\"\r\n                            : \"Maybe everyone's anonymous.\"\r\n                    }\r\n                </p>\r\n            ) : (\r\n                \"Loading data...\"\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerAndLfmSubtitle;\r\n","import React from \"react\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\n// This chart is used to show the population history (combined or composite) over time.\r\n// Pages: Home, Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 14,\r\n    axis: {\r\n        domain: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 1,\r\n            },\r\n        },\r\n        ticks: {\r\n            line: {\r\n                stroke: \"#777777\",\r\n                strokeWidth: 2,\r\n            },\r\n        },\r\n    },\r\n    grid: {\r\n        line: {\r\n            stroke: \"#dddddd\",\r\n            strokeWidth: 1,\r\n        },\r\n    },\r\n    crosshair: {\r\n        line: {\r\n            stroke: \"var(--text)\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            strokeDasharray: \"6 6\",\r\n        },\r\n    },\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartPopulationHistory = (props) => {\r\n    const [filteredData, set_filteredData] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (props.data === null) return;\r\n        set_filteredData(\r\n            props.data.filter(\r\n                (series) =>\r\n                    (series.id === \"Total\") &\r\n                        (props.activeFilter === \"Combined Activity\") ||\r\n                    (series.id !== \"Total\") &\r\n                        (props.activeFilter === \"Server Activity\") ||\r\n                    series.id === props.activeFilter\r\n            )\r\n        );\r\n    }, [props.data, props.activeFilter]);\r\n\r\n    function XScale() {\r\n        return {\r\n            type: \"time\",\r\n            format: \"%Y-%m-%dT%H:%M:%S.%LZ\",\r\n            useUTC: false,\r\n        };\r\n    }\r\n\r\n    function BottomAxis() {\r\n        return {\r\n            orient: \"bottom\",\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: -45,\r\n            //legend: \"Time\",\r\n            legendPosition: \"middle\",\r\n            tickValues:\r\n                props.trendType === \"day\"\r\n                    ? \"every 1 hour\"\r\n                    : props.trendType === \"week\"\r\n                    ? \"every 6 hour\"\r\n                    : \"every 1 week\",\r\n            format:\r\n                props.trendType === \"day\"\r\n                    ? \"%-I:%M %p\"\r\n                    : props.trendType === \"week\"\r\n                    ? \"%a %-I %p\"\r\n                    : \"%a %b %-d\",\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsiveLine\r\n                    data={filteredData}\r\n                    margin={{ top: 20, right: 120, bottom: 60, left: 70 }}\r\n                    xScale={XScale()}\r\n                    xFormat=\"time:%Y-%m-%dT%H:%M:%S\"\r\n                    yScale={{\r\n                        type: \"linear\",\r\n                        min: 0,\r\n                        max: \"auto\",\r\n                        stacked: false,\r\n                        reverse: false,\r\n                    }}\r\n                    //yFormat=\" >-.2f\"\r\n                    curve=\"natural\"\r\n                    axisTop={null}\r\n                    axisRight={null}\r\n                    axisBottom={BottomAxis()}\r\n                    axisLeft={{\r\n                        orient: \"left\",\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: \"Players\",\r\n                        legendOffset: -50,\r\n                        legendPosition: \"middle\",\r\n                    }}\r\n                    lineWidth={4}\r\n                    enablePoints={false}\r\n                    colors={(d) => d.color}\r\n                    enableArea={props.activeFilter !== \"Server Activity\"}\r\n                    areaOpacity={0.3}\r\n                    enableSlices=\"x\"\r\n                    useMesh={true}\r\n                    legends={[\r\n                        {\r\n                            anchor: \"right\",\r\n                            direction: \"column\",\r\n                            justify: false,\r\n                            translateX: 120,\r\n                            translateY: 0,\r\n                            itemsSpacing: 0,\r\n                            itemDirection: \"left-to-right\",\r\n                            itemWidth: 110,\r\n                            itemHeight: 20,\r\n                            itemOpacity: 1,\r\n                            symbolSize: 12,\r\n                            symbolShape: \"circle\",\r\n                            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                            effects: [\r\n                                {\r\n                                    on: \"hover\",\r\n                                    style: {\r\n                                        //itemBackground: \"rgba(255, 255, 255, .03)\",\r\n                                        itemOpacity: 1,\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]}\r\n                    motionConfig=\"stiff\"\r\n                    theme={theme}\r\n                ></ResponsiveLine>\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartPopulationHistory;\r\n","import React from \"react\";\r\nimport { ReactComponent as TimelineSVG } from \"../assets/global/timeline.svg\";\r\nimport { ReactComponent as ExpandSVG } from \"../assets/global/expand.svg\";\r\n\r\nconst ContentTable = (props) => {\r\n    const [filteredData, set_filteredData] = React.useState(null);\r\n    const [expanded, set_expanded] = React.useState(false);\r\n\r\n    function generateLevelString(quest) {\r\n        return `${quest.CR_Heroic ? \"Heroic: \" + quest.CR_Heroic : \"\"}${\r\n            quest.CR_Heroic && quest.CR_Epic ? \" / \" : \"\"\r\n        }${quest.CR_Epic ? \"Epic: \" + quest.CR_Epic : \"\"}`;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (props.data === null) return;\r\n        if (props.activeFilter === \"By Adventure Pack\") {\r\n            set_filteredData(\r\n                props.data\r\n                    .sort(function (a, b) {\r\n                        return props.activeOrder === \"Least Popular\"\r\n                            ? a.Count - b.Count\r\n                            : b.Count - a.Count;\r\n                    })\r\n                    .filter((quest) => quest.Count > 100)\r\n                    .slice(0, 20)\r\n            );\r\n        } else {\r\n            set_filteredData(\r\n                props.data\r\n                    .filter((quest) => quest.Patron !== null)\r\n                    .filter((quest) =>\r\n                        props.activeFilter === \"Raids Only\" ? quest.Raid : true\r\n                    )\r\n                    .filter((quest) =>\r\n                        props.activeFilter === \"Free to Play\"\r\n                            ? quest.AdventurePack === null\r\n                            : true\r\n                    )\r\n                    .sort(function (a, b) {\r\n                        return props.activeOrder === \"Least Popular\"\r\n                            ? a.Count - b.Count\r\n                            : b.Count - a.Count;\r\n                    })\r\n                    .slice(0, 20)\r\n            );\r\n        }\r\n    }, [props.data, props.activeFilter, props.activeOrder]); // Only filter the data when a) the data has changed, or b) the filter has changed\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                className={\r\n                    \"content-table-container\" + (expanded ? \" expanded\" : \"\")\r\n                }\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                {filteredData === null ? (\r\n                    <div className=\"loading-data-message\">\r\n                        <h5>Loading data...</h5>\r\n                    </div>\r\n                ) : props.activeFilter === \"By Adventure Pack\" ? (\r\n                    <table className=\"content-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Adventure Pack</th>\r\n                                <th>Instances</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {filteredData.map((adventurePack, i) => (\r\n                                <tr key={adventurePack.AdventurePack}>\r\n                                    <td>{i + 1}</td>\r\n                                    <td>\r\n                                        <div\r\n                                            style={{\r\n                                                cursor: \"pointer\",\r\n                                                textDecoration: \"underline\",\r\n                                            }}\r\n                                            onClick={() => {\r\n                                                console.log(\r\n                                                    adventurePack.AdventurePack\r\n                                                );\r\n                                            }}\r\n                                        >\r\n                                            {adventurePack.AdventurePack}\r\n                                            <TimelineSVG\r\n                                                className=\"link-icon\"\r\n                                                style={{ marginLeft: \"8px\" }}\r\n                                            />\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>{adventurePack.Count}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                ) : (\r\n                    <table className=\"content-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Quest</th>\r\n                                <th>Patron</th>\r\n                                <th>Level</th>\r\n                                <th>Average Time</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {filteredData.map((quest, i) => (\r\n                                <tr key={quest.QuestName}>\r\n                                    <td>{i + 1}</td>\r\n                                    <td>\r\n                                        <div\r\n                                            style={{\r\n                                                cursor: \"pointer\",\r\n                                                textDecoration: \"underline\",\r\n                                                width: \"max-content\",\r\n                                            }}\r\n                                            onClick={() => {\r\n                                                console.log(quest.Id);\r\n                                            }}\r\n                                        >\r\n                                            {quest.QuestName +\r\n                                                (quest.QuestName ===\r\n                                                \"An Invitation to Dinner\"\r\n                                                    ? \"*\"\r\n                                                    : \"\")}\r\n                                            <TimelineSVG\r\n                                                className=\"link-icon\"\r\n                                                style={{ marginLeft: \"8px\" }}\r\n                                            />\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>{quest.Patron}</td>\r\n                                    <td>{generateLevelString(quest)}</td>\r\n                                    <td>{quest.AverageTime}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n                <div\r\n                    className=\"expand-content-table-button\"\r\n                    style={{\r\n                        display:\r\n                            expanded || filteredData === null\r\n                                ? \"none\"\r\n                                : \"block\",\r\n                    }}\r\n                    onClick={() => set_expanded(true)}\r\n                >\r\n                    Expand\r\n                    <ExpandSVG className=\"link-icon\" width={30} height={30} />\r\n                </div>\r\n            </div>\r\n            <p style={{ fontSize: \"smaller\" }}>\r\n                *\r\n                <span style={{ fontStyle: \"italic\" }}>\r\n                    An Invitation to Dinner\r\n                </span>{\" \"}\r\n                is over-represented in this report due to the high number of\r\n                players instance farming the quest.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContentTable;\r\n","import React from \"react\";\r\n\r\nconst UniqueCountsSubtitle = (props) => {\r\n    function FormatWithCommas(x) {\r\n        return x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    function GetUniquePlayers() {\r\n        let playercount = 0;\r\n        props.data.forEach((server) => {\r\n            if (server.ServerName === props.server) {\r\n                playercount = server.UniquePlayers;\r\n            }\r\n        });\r\n        return FormatWithCommas(playercount.toString());\r\n    }\r\n\r\n    function GetUniqueGuilds() {\r\n        let guildcount = 0;\r\n        props.data.forEach((server) => {\r\n            if (server.ServerName === props.server) {\r\n                guildcount = server.UniqueGuilds;\r\n            }\r\n        });\r\n        return FormatWithCommas(guildcount.toString());\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.data ? (\r\n                <p>\r\n                    We've seen{\" \"}\r\n                    <span className=\"population-number\">\r\n                        {GetUniquePlayers()}\r\n                    </span>{\" \"}\r\n                    unique characters and{\" \"}\r\n                    <span className=\"lfm-number\">{GetUniqueGuilds()}</span>{\" \"}\r\n                    unique guilds in the last month. Fancy joining us?{\" \"}\r\n                </p>\r\n            ) : (\r\n                \"Loading data...\"\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UniqueCountsSubtitle;\r\n","import React from \"react\";\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\n\r\n// This pie chart is used to show the server distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 16,\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        table: {},\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartGenderPie = (props) => {\r\n    function GetTotalPopulation() {\r\n        let total = 0;\r\n        for (let i = 0; i < props.data.length; i++) {\r\n            total += props.data[i].value;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsivePie\r\n                    data={props.data}\r\n                    margin={{ top: 30, right: 110, bottom: 30, left: 110 }}\r\n                    valueFormat=\" >-.1f\"\r\n                    sortByValue={true}\r\n                    colors={[\"#138ed6\", \"#fc508a\"]}\r\n                    padAngle={0.7}\r\n                    cornerRadius={3}\r\n                    innerRadius={0.6}\r\n                    activeOuterRadiusOffset={8}\r\n                    borderWidth={1}\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 0.2]],\r\n                    }}\r\n                    enableArcLinkLabels={true}\r\n                    arcLinkLabelsSkipAngle={10}\r\n                    arcLinkLabelsThickness={2}\r\n                    arcLinkLabelsColor={{ from: \"color\" }}\r\n                    arcLabel={function (e) {\r\n                        return `${(\r\n                            (e.value / GetTotalPopulation()) *\r\n                            100\r\n                        ).toFixed(1)}%`;\r\n                    }}\r\n                    arcLabelsSkipAngle={10}\r\n                    arcLabelsTextColor={\"white\"}\r\n                    // legends={[\r\n                    //     {\r\n                    //         anchor: \"right\",\r\n                    //         direction: \"column\",\r\n                    //         justify: false,\r\n                    //         translateX: 0,\r\n                    //         translateY: 0,\r\n                    //         itemsSpacing: 0,\r\n                    //         itemWidth: 120,\r\n                    //         itemHeight: 25,\r\n                    //         itemTextColor: \"#fff\",\r\n                    //         itemDirection: \"left-to-right\",\r\n                    //         itemOpacity: 1,\r\n                    //         symbolSize: 18,\r\n                    //         symbolShape: \"circle\",\r\n                    //         effects: [\r\n                    //             {\r\n                    //                 on: \"hover\",\r\n                    //                 style: {\r\n                    //                     itemTextColor: \"#000\",\r\n                    //                 },\r\n                    //             },\r\n                    //         ],\r\n                    //     },\r\n                    // ]}\r\n                    theme={theme}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartGenderPie;\r\n","import React from \"react\";\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\n\r\n// This pie chart is used to show the server distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 16,\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartRacePie = (props) => {\r\n    function GetTotalPopulation() {\r\n        let total = 0;\r\n        for (let i = 0; i < props.data.length; i++) {\r\n            total += props.data[i].value;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsivePie\r\n                    data={props.data}\r\n                    margin={{ top: 20, right: 150, bottom: 30, left: 150 }}\r\n                    valueFormat=\" >-.1f\"\r\n                    sortByValue={true}\r\n                    colors={{ scheme: \"category10\" }}\r\n                    padAngle={0.7}\r\n                    cornerRadius={3}\r\n                    innerRadius={0.6}\r\n                    activeOuterRadiusOffset={8}\r\n                    borderWidth={1}\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 0.2]],\r\n                    }}\r\n                    enableArcLinkLabels={true}\r\n                    arcLinkLabelsSkipAngle={10}\r\n                    arcLinkLabelsThickness={2}\r\n                    arcLinkLabelsColor={{ from: \"color\" }}\r\n                    arcLabel={function (e) {\r\n                        return `${(\r\n                            (e.value / GetTotalPopulation()) *\r\n                            100\r\n                        ).toFixed(1)}%`;\r\n                    }}\r\n                    arcLabelsSkipAngle={10}\r\n                    arcLabelsTextColor={\"white\"}\r\n                    theme={theme}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartRacePie;\r\n","import React from \"react\";\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\n\r\n// This pie chart is used to show the server distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 16,\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartGuildAffiliationPie = (props) => {\r\n    function GetTotalPopulation() {\r\n        let total = 0;\r\n        for (let i = 0; i < props.data.length; i++) {\r\n            total += props.data[i].value;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsivePie\r\n                    data={props.data}\r\n                    margin={{ top: 30, right: 110, bottom: 30, left: 110 }}\r\n                    valueFormat=\" >-.1f\"\r\n                    sortByValue={true}\r\n                    colors={[\"#fc6823\", \"#898989\"]}\r\n                    padAngle={0.7}\r\n                    cornerRadius={3}\r\n                    innerRadius={0.6}\r\n                    activeOuterRadiusOffset={8}\r\n                    borderWidth={1}\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 0.2]],\r\n                    }}\r\n                    enableArcLinkLabels={true}\r\n                    arcLinkLabelsSkipAngle={10}\r\n                    arcLinkLabelsThickness={2}\r\n                    arcLinkLabelsColor={{ from: \"color\" }}\r\n                    arcLabel={function (e) {\r\n                        return `${(\r\n                            (e.value / GetTotalPopulation()) *\r\n                            100\r\n                        ).toFixed(1)}%`;\r\n                    }}\r\n                    arcLabelsSkipAngle={10}\r\n                    arcLabelsTextColor={\"white\"}\r\n                    theme={theme}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartGuildAffiliationPie;\r\n","import React from \"react\";\r\nimport { ResponsivePie } from \"@nivo/pie\";\r\n\r\n// This pie chart is used to show the server distribution.\r\n// Pages: Servers\r\n\r\nconst theme = {\r\n    background: \"var(--card)\",\r\n    textColor: \"var(--text)\",\r\n    fontSize: 16,\r\n    tooltip: {\r\n        container: {\r\n            background: \"var(--card)\",\r\n            color: \"inherit\",\r\n            fontSize: \"inherit\",\r\n            borderRadius: \"2px\",\r\n            boxShadow: \"0 0 6px var(--card-border)\",\r\n            padding: \"5px 9px\",\r\n        },\r\n        basic: {\r\n            whiteSpace: \"pre\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n        },\r\n        tableCell: {\r\n            padding: \"3px 5px\",\r\n        },\r\n    },\r\n};\r\n\r\nconst ChartActivityPie = (props) => {\r\n    function GetTotalPopulation() {\r\n        let total = 0;\r\n        for (let i = 0; i < props.data.length; i++) {\r\n            total += props.data[i].value;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                props.filters || props.showServerFilters\r\n                    ? \"chart-filterable\"\r\n                    : \"\"\r\n            }\r\n            style={{ height: \"400px\" }}\r\n        >\r\n            {props.data ? (\r\n                <ResponsivePie\r\n                    data={props.data}\r\n                    margin={{ top: 30, right: 110, bottom: 30, left: 110 }}\r\n                    valueFormat=\" >-.1f\"\r\n                    sortByValue={true}\r\n                    colors={[\"#12bc40\", \"#b75252\"]}\r\n                    padAngle={0.7}\r\n                    cornerRadius={3}\r\n                    innerRadius={0.6}\r\n                    activeOuterRadiusOffset={8}\r\n                    borderWidth={1}\r\n                    borderColor={{\r\n                        from: \"color\",\r\n                        modifiers: [[\"darker\", 0.2]],\r\n                    }}\r\n                    enableArcLinkLabels={true}\r\n                    arcLinkLabelsSkipAngle={10}\r\n                    arcLinkLabelsThickness={2}\r\n                    arcLinkLabelsColor={{ from: \"color\" }}\r\n                    arcLabel={function (e) {\r\n                        return `${(\r\n                            (e.value / GetTotalPopulation()) *\r\n                            100\r\n                        ).toFixed(1)}%`;\r\n                    }}\r\n                    arcLabelsSkipAngle={10}\r\n                    arcLabelsTextColor={\"white\"}\r\n                    theme={theme}\r\n                />\r\n            ) : (\r\n                <div className=\"loading-data-message\">\r\n                    <h5>Loading data...</h5>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartActivityPie;\r\n","import React from \"react\";\r\nimport ChartGenderPie from \"./ChartGenderPie\";\r\nimport ChartRacePie from \"./ChartRacePie\";\r\nimport GuildAffiliationPie from \"./ChartGuildAffiliationPie\";\r\nimport ChartGuildAffiliationPie from \"./ChartGuildAffiliationPie\";\r\nimport ChartActivityPie from \"./ChartActivityPie\";\r\n\r\nconst ServerDemographicsContainer = (props) => {\r\n    var [filteredGenderData, set_filteredGenderData] = React.useState(null);\r\n    var [filteredGuildData, set_filteredGuildData] = React.useState(null);\r\n    var [filteredActivityData, set_filteredActivityData] = React.useState(null);\r\n    var [filteredRaceData, set_filteredRaceData] = React.useState(null);\r\n    var [filteredClassData, set_filteredClassData] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (props.genderData) {\r\n            let genderset;\r\n            genderset = props.genderData.filter(\r\n                (set) => set.ServerName === props.server\r\n            );\r\n            if (genderset) genderset = genderset[0];\r\n\r\n            switch (props.filter) {\r\n                case \"All Players\":\r\n                    genderset = genderset.AllPlayers;\r\n                    break;\r\n                case \"Active Players\":\r\n                    genderset = genderset.ActivePlayers;\r\n                    break;\r\n                case \"Inactive Players\":\r\n                    genderset = genderset.InactivePlayers;\r\n                    break;\r\n                case \"End-game Players\":\r\n                    genderset = genderset.EndgamePlayers;\r\n                    break;\r\n                default:\r\n                    genderset = genderset.AllPlayers;\r\n                    break;\r\n            }\r\n\r\n            set_filteredGenderData([\r\n                {\r\n                    id: \"Male\",\r\n                    label: \"Male\",\r\n                    value: genderset.Male,\r\n                },\r\n                {\r\n                    id: \"Female\",\r\n                    label: \"Female\",\r\n                    value: genderset.Female,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        if (props.activityData) {\r\n            let activityset;\r\n            activityset = props.activityData.filter(\r\n                (set) => set.ServerName === props.server\r\n            );\r\n            if (activityset) activityset = activityset[0];\r\n\r\n            set_filteredActivityData([\r\n                {\r\n                    id: \"Active\",\r\n                    label: \"Active\",\r\n                    value: activityset.Active,\r\n                },\r\n                {\r\n                    id: \"Inactive\",\r\n                    label: \"Inactive\",\r\n                    value: activityset.Inactive,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        if (props.raceData) {\r\n            let raceset;\r\n            raceset = props.raceData.filter(\r\n                (set) => set.ServerName === props.server\r\n            );\r\n            if (raceset) raceset = raceset[0];\r\n\r\n            switch (props.filter) {\r\n                case \"All Players\":\r\n                    raceset = raceset.AllPlayers;\r\n                    break;\r\n                case \"Active Players\":\r\n                    raceset = raceset.ActivePlayers;\r\n                    break;\r\n                case \"Inactive Players\":\r\n                    raceset = raceset.InactivePlayers;\r\n                    break;\r\n                case \"End-game Players\":\r\n                    raceset = raceset.EndgamePlayers;\r\n                    break;\r\n                default:\r\n                    raceset = raceset.AllPlayers;\r\n                    break;\r\n            }\r\n\r\n            set_filteredRaceData([\r\n                {\r\n                    id: \"Human\",\r\n                    label: \"Human\",\r\n                    value: raceset.Human,\r\n                },\r\n                {\r\n                    id: \"Gnome\",\r\n                    label: \"Gnome\",\r\n                    value: raceset.Gnome,\r\n                },\r\n                {\r\n                    id: \"Warforged\",\r\n                    label: \"Warforged\",\r\n                    value: raceset.Warforged,\r\n                },\r\n                {\r\n                    id: \"Halfling\",\r\n                    label: \"Halfling\",\r\n                    value: raceset.Halfling,\r\n                },\r\n                {\r\n                    id: \"Elf\",\r\n                    label: \"Elf\",\r\n                    value: raceset.Elf,\r\n                },\r\n                {\r\n                    id: \"Dwarf\",\r\n                    label: \"Dwarf\",\r\n                    value: raceset.Dwarf,\r\n                },\r\n                {\r\n                    id: \"Drow Elf\",\r\n                    label: \"Drow Elf\",\r\n                    value: raceset.DrowElf,\r\n                },\r\n                {\r\n                    id: \"Tiefling\",\r\n                    label: \"Tiefling\",\r\n                    value: raceset.Tiefling,\r\n                },\r\n                {\r\n                    id: \"Half Elf\",\r\n                    label: \"Half Elf\",\r\n                    value: raceset.HalfElf,\r\n                },\r\n                {\r\n                    id: \"Half Orc\",\r\n                    label: \"Half Orc\",\r\n                    value: raceset.HalfOrc,\r\n                },\r\n                {\r\n                    id: \"Bladeforged\",\r\n                    label: \"Bladeforged\",\r\n                    value: raceset.Bladeforged,\r\n                },\r\n                {\r\n                    id: \"Shadar-kai\",\r\n                    label: \"Shadar-kai\",\r\n                    value: raceset.Shadarkai,\r\n                },\r\n                {\r\n                    id: \"PDK\",\r\n                    label: \"PDK\",\r\n                    value: raceset.PurpleDragonKnight,\r\n                },\r\n                {\r\n                    id: \"Sun Elf\",\r\n                    label: \"Sun Elf\",\r\n                    value: raceset.SunElf,\r\n                },\r\n                {\r\n                    id: \"Deep Gnome\",\r\n                    label: \"Deep Gnome\",\r\n                    value: raceset.DeepGnome,\r\n                },\r\n                {\r\n                    id: \"Dragonborn\",\r\n                    label: \"Dragonborn\",\r\n                    value: raceset.Dragonborn,\r\n                },\r\n                {\r\n                    id: \"Aasimar\",\r\n                    label: \"Aasimar\",\r\n                    value: raceset.Aasimar,\r\n                },\r\n                {\r\n                    id: \"Aasimar Scourge\",\r\n                    label: \"Aasimar Scourge\",\r\n                    value: raceset.AasimarScourge,\r\n                },\r\n                {\r\n                    id: \"Wood Elf\",\r\n                    label: \"Wood Elf\",\r\n                    value: raceset.WoodElf,\r\n                },\r\n                {\r\n                    id: \"Tiefling Scoundrel\",\r\n                    label: \"Tiefling Scoundrel\",\r\n                    value: raceset.TieflingScoundrel,\r\n                },\r\n                {\r\n                    id: \"Shifter\",\r\n                    label: \"Shifter\",\r\n                    value: raceset.Shifter,\r\n                },\r\n                {\r\n                    id: \"Razorclaw Shifter\",\r\n                    label: \"Razorclaw Shifter\",\r\n                    value: raceset.RazorclawShifter,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        if (props.classData) {\r\n            let classset;\r\n            classset = props.classData.filter(\r\n                (set) => set.ServerName === props.server\r\n            );\r\n            if (classset) classset = classset[0];\r\n\r\n            switch (props.filter) {\r\n                case \"All Players\":\r\n                    classset = classset.AllPlayers;\r\n                    break;\r\n                case \"Active Players\":\r\n                    classset = classset.ActivePlayers;\r\n                    break;\r\n                case \"Inactive Players\":\r\n                    classset = classset.InactivePlayers;\r\n                    break;\r\n                case \"End-game Players\":\r\n                    classset = classset.EndgamePlayers;\r\n                    break;\r\n                default:\r\n                    classset = classset.AllPlayers;\r\n                    break;\r\n            }\r\n\r\n            set_filteredClassData([\r\n                {\r\n                    id: \"Sorcerer\",\r\n                    label: \"Sorcerer\",\r\n                    value: classset.Sorcerer,\r\n                },\r\n                {\r\n                    id: \"Wizard\",\r\n                    label: \"Wizard\",\r\n                    value: classset.Wizard,\r\n                },\r\n                {\r\n                    id: \"Barbarian\",\r\n                    label: \"Barbarian\",\r\n                    value: classset.Barbarian,\r\n                },\r\n                {\r\n                    id: \"Bard\",\r\n                    label: \"Bard\",\r\n                    value: classset.Bard,\r\n                },\r\n                {\r\n                    id: \"Cleric\",\r\n                    label: \"Cleric\",\r\n                    value: classset.Cleric,\r\n                },\r\n                {\r\n                    id: \"Fighter\",\r\n                    label: \"Fighter\",\r\n                    value: classset.Fighter,\r\n                },\r\n                {\r\n                    id: \"Paladin\",\r\n                    label: \"Paladin\",\r\n                    value: classset.Paladin,\r\n                },\r\n                {\r\n                    id: \"Ranger\",\r\n                    label: \"Ranger\",\r\n                    value: classset.Ranger,\r\n                },\r\n                {\r\n                    id: \"Rogue\",\r\n                    label: \"Rogue\",\r\n                    value: classset.Rogue,\r\n                },\r\n                {\r\n                    id: \"Monk\",\r\n                    label: \"Monk\",\r\n                    value: classset.Monk,\r\n                },\r\n                {\r\n                    id: \"Favored Soul\",\r\n                    label: \"Favored Soul\",\r\n                    value: classset.FavoredSoul,\r\n                },\r\n                {\r\n                    id: \"Warlock\",\r\n                    label: \"Warlock\",\r\n                    value: classset.Warlock,\r\n                },\r\n                {\r\n                    id: \"Artificer\",\r\n                    label: \"Artificer\",\r\n                    value: classset.Artificer,\r\n                },\r\n                {\r\n                    id: \"Druid\",\r\n                    label: \"Druid\",\r\n                    value: classset.Druid,\r\n                },\r\n                {\r\n                    id: \"Alchemist\",\r\n                    label: \"Alchemist\",\r\n                    value: classset.Alchemist,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        if (props.guildData) {\r\n            let guildset;\r\n            guildset = props.guildData.filter(\r\n                (set) => set.ServerName === props.server\r\n            );\r\n            if (guildset) guildset = guildset[0];\r\n\r\n            switch (props.filter) {\r\n                case \"All Players\":\r\n                    guildset = guildset.AllPlayers;\r\n                    break;\r\n                case \"Active Players\":\r\n                    guildset = guildset.ActivePlayers;\r\n                    break;\r\n                case \"Inactive Players\":\r\n                    guildset = guildset.InactivePlayers;\r\n                    break;\r\n                case \"End-game Players\":\r\n                    guildset = guildset.EndgamePlayers;\r\n                    break;\r\n                default:\r\n                    guildset = guildset.AllPlayers;\r\n                    break;\r\n            }\r\n\r\n            set_filteredGuildData([\r\n                {\r\n                    id: \"Affiliated\",\r\n                    label: \"Affiliated\",\r\n                    value: guildset.Affiliated,\r\n                },\r\n                {\r\n                    id: \"Unaffiliated\",\r\n                    label: \"Unaffiliated\",\r\n                    value: guildset.Unaffiliated,\r\n                },\r\n            ]);\r\n        }\r\n    }, [\r\n        props.genderData,\r\n        props.guildData,\r\n        props.raceData,\r\n        props.classData,\r\n        props.filter,\r\n        props.server,\r\n    ]);\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                \"server-demographic-container \" +\r\n                (props.filters ? \"chart-filterable\" : \"\")\r\n            }\r\n        >\r\n            <div className=\"server-demographic-chart\">\r\n                <div className=\"server-demographic-header\">\r\n                    <h4\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            fontWeight: \"bold\",\r\n                        }}\r\n                    >\r\n                        By Gender\r\n                    </h4>\r\n                    <p style={{ marginBottom: \"0px\" }}>\r\n                        Gender on {props.server}\r\n                    </p>\r\n                </div>\r\n                <ChartGenderPie data={filteredGenderData} />\r\n            </div>\r\n            <div className=\"server-demographic-chart\">\r\n                <div className=\"server-demographic-header\">\r\n                    <h4\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            fontWeight: \"bold\",\r\n                        }}\r\n                    >\r\n                        By Guild Affiliation\r\n                    </h4>\r\n                    <p style={{ marginBottom: \"0px\" }}>\r\n                        Guild Affiliation on {props.server}\r\n                    </p>\r\n                </div>\r\n                <ChartGuildAffiliationPie data={filteredGuildData} />\r\n            </div>\r\n            <div className=\"server-demographic-chart\">\r\n                <div className=\"server-demographic-header\">\r\n                    <h4\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            fontWeight: \"bold\",\r\n                        }}\r\n                    >\r\n                        By Activity\r\n                    </h4>\r\n                    <p style={{ marginBottom: \"0px\" }}>\r\n                        Active Players on {props.server}\r\n                    </p>\r\n                </div>\r\n                <ChartActivityPie data={filteredActivityData} />\r\n            </div>\r\n            <div className=\"server-demographic-chart\">\r\n                <div className=\"server-demographic-header\">\r\n                    <h4\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            fontWeight: \"bold\",\r\n                        }}\r\n                    >\r\n                        By Race\r\n                    </h4>\r\n                    <p style={{ marginBottom: \"0px\" }}>\r\n                        Race on {props.server}\r\n                    </p>\r\n                </div>\r\n                <ChartRacePie data={filteredRaceData} />\r\n            </div>\r\n            <div className=\"server-demographic-chart\">\r\n                <div className=\"server-demographic-header\">\r\n                    <h4\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            fontWeight: \"bold\",\r\n                        }}\r\n                    >\r\n                        By Class\r\n                    </h4>\r\n                    <p style={{ marginBottom: \"0px\" }}>\r\n                        Class on {props.server}\r\n                    </p>\r\n                </div>\r\n                <ChartRacePie data={filteredClassData} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ServerDemographicsContainer;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Card from \"../components/Card\";\r\nimport ReportIssueForm from \"./ReportIssueForm\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport UniqueCountsSubtitle from \"./UniqueCountsSubtitle\";\r\nimport ServerDemographicsContainer from \"./ServerDemographicsContainer\";\r\nimport PopupMessage from \"./PopupMessage\";\r\nimport PlayerAndLfmSubtitle from \"./PlayerAndLfmSubtitle\";\r\nimport ChartPopulationHistory from \"./ChartPopulationHistory\";\r\nimport ContentTable from \"./ContentTable\";\r\n\r\nconst TITLE = \"DDO Server Status\";\r\n\r\nconst serverNames = [\r\n    \"Argonnessen\",\r\n    \"Cannith\",\r\n    \"Ghallanda\",\r\n    \"Khyber\",\r\n    \"Orien\",\r\n    \"Sarlona\",\r\n    \"Thelanis\",\r\n    \"Wayfinder\",\r\n    \"Hardcore\",\r\n];\r\n\r\nconst ServerSpecific = (props) => {\r\n    // Data\r\n    var [serverStatusData, set_serverStatusData] = React.useState(null);\r\n    var [currentServer, set_currentServer] = React.useState(null);\r\n    var [genderData, set_genderData] = React.useState(null);\r\n    var [guildData, set_guildData] = React.useState(null);\r\n    var [activityData, set_activityData] = React.useState(null);\r\n    var [raceData, set_raceData] = React.useState(null);\r\n    var [classData, set_classData] = React.useState(null);\r\n    var [uniqueData, set_uniqueData] = React.useState(null);\r\n    const [population24HoursData, set_population24HoursData] =\r\n        React.useState(null);\r\n    const [population1WeekData, set_population1WeekData] = React.useState(null);\r\n    const [population1QuarterData, set_population1QuarterData] =\r\n        React.useState(null);\r\n    const [contentData, set_contentData] = React.useState(null);\r\n\r\n    // Filters\r\n    var [demographicsFilter, set_demographicsFilter] =\r\n        React.useState(\"All Players\");\r\n    var [contentFilter, set_contentFilter] = React.useState(\"Active Players\");\r\n    var [contentOrder, set_contentOrder] = React.useState(\"Most Popular\");\r\n\r\n    const location = useLocation().pathname.substring(\r\n        useLocation().pathname.lastIndexOf(\"/\") + 1\r\n    );\r\n\r\n    function filterDemographics(type) {\r\n        set_demographicsFilter(type);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let serverName =\r\n            location.substring(0, 1).toUpperCase() + location.substring(1);\r\n        if (serverNames.includes(serverName)) {\r\n            // Good server\r\n            set_currentServer(serverName);\r\n        } else {\r\n            // Bad server\r\n            set_currentServer(serverNames[0]); // Just default to the first server in the good list\r\n        }\r\n    }, [props.location]);\r\n\r\n    function FilterContentTable(type) {\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        if (\r\n            type === \"By Adventure Pack\" &&\r\n            contentFilter !== \"By Adventure Pack\"\r\n        ) {\r\n            fetchArbitraryData(\r\n                \"https://www.playeraudit.com/api/compendiumcount?s=adventurepacks\",\r\n                \"json\"\r\n            ).then((val) => {\r\n                set_contentData(val);\r\n                set_contentFilter(type);\r\n            });\r\n        } else if (\r\n            type !== \"By Adventure Pack\" &&\r\n            contentFilter === \"By Adventure Pack\"\r\n        ) {\r\n            fetchArbitraryData(\r\n                \"https://www.playeraudit.com/api/compendiumcount?s=\" +\r\n                    currentServer,\r\n                \"json\"\r\n            ).then((val) => {\r\n                set_contentData(val);\r\n                set_contentFilter(type);\r\n            });\r\n        } else {\r\n            set_contentFilter(type);\r\n        }\r\n    }\r\n\r\n    function OrderContentTable(type) {\r\n        set_contentOrder(type);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/serverstatus\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_serverStatusData(val);\r\n            // Display the appropriate server status message\r\n            if (!val.hasOwnProperty(\"Worlds\")) {\r\n                set_popupMessages([\r\n                    ...popupMessages,\r\n                    {\r\n                        title: \"Something went wrong!\",\r\n                        message:\r\n                            \"The server list is missing. We're not sure if the servers are online or not. You'll have to login and check.\",\r\n                        icon: \"error\",\r\n                    },\r\n                ]);\r\n            } else {\r\n                let offlineWorlds = [];\r\n                val.Worlds.forEach(function (World) {\r\n                    if (!World.hasOwnProperty(\"Status\")) {\r\n                        // Status is missing from this World\r\n                    } else if (World.Status === 0) {\r\n                        // This World is offline\r\n                        offlineWorlds.push(World.Name);\r\n                    }\r\n                });\r\n                if (offlineWorlds.length >= 8) {\r\n                    set_popupMessages([\r\n                        ...popupMessages,\r\n                        {\r\n                            messageType: \"all servers offline\",\r\n                        },\r\n                    ]);\r\n                } else if (offlineWorlds.length > 1) {\r\n                    set_popupMessages([\r\n                        ...popupMessages,\r\n                        {\r\n                            messageType: \"some servers offline\",\r\n                        },\r\n                    ]);\r\n                } else if (offlineWorlds.length === 1) {\r\n                    if (offlineWorlds[0] === \"Hardcore\") {\r\n                        // Only Hardcore is down\r\n                    } else {\r\n                        set_popupMessages([\r\n                            ...popupMessages,\r\n                            {\r\n                                title: offlineWorlds[0] + \" Offline\",\r\n                                message:\r\n                                    offlineWorlds[0] +\r\n                                    \" appears to be temporarily offline.\",\r\n                                icon: \"info\",\r\n                                fullscreen: false,\r\n                            },\r\n                        ]);\r\n                    }\r\n                } else {\r\n                    // set_popupMessages([\r\n                    //     ...popupMessages,\r\n                    //     {\r\n                    //         messageType: \"all servers online\",\r\n                    //     },\r\n                    // ]);\r\n                }\r\n            }\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/genderdistribution\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_genderData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/racedistribution\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_raceData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/guildaffiliationdistribution\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_guildData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/activitydistribution\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_activityData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/classdistributionpie\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_classData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"https://www.playeraudit.com/api/uniquedata\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_uniqueData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"http://localhost:3001/api/v1/population/day\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_population24HoursData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"http://localhost:3001/api/v1/population/week\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_population1WeekData(val);\r\n        });\r\n\r\n        fetchArbitraryData(\r\n            \"http://localhost:3001/api/v1/population/quarter\",\r\n            \"json\"\r\n        ).then((val) => {\r\n            set_population1QuarterData(val);\r\n        });\r\n\r\n        // fetchArbitraryData(\r\n        //     \"https://www.playeraudit.com/api/compendiumcount?s=\" +\r\n        //         currentServer,\r\n        //     \"json\"\r\n        // ).then((val) => {\r\n        //     set_contentData(val);\r\n        // });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (!currentServer) return;\r\n        async function fetchArbitraryData(url, type) {\r\n            let response = await fetch(url);\r\n            if (type === \"json\") response = await response.json();\r\n            else if (type === \"text\") response = await response.text();\r\n            return response;\r\n        }\r\n\r\n        setTimeout(\r\n            () =>\r\n                fetchArbitraryData(\r\n                    \"https://www.playeraudit.com/api/compendiumcount?s=\" +\r\n                        currentServer,\r\n                    \"json\"\r\n                ).then((val) => {\r\n                    set_contentData(val);\r\n                }),\r\n            1000\r\n        );\r\n    }, [currentServer]);\r\n\r\n    // Report Form\r\n    var [reportFormVisibility, setReportFormVisibility] =\r\n        React.useState(\"none\");\r\n    var [reportFormReference, setReportFormReference] = React.useState(null);\r\n    function showReportForm(reference) {\r\n        // Grab relevant info from the tile element that's being reported\r\n        let referenceInfo = {\r\n            title: reference.title,\r\n            type: reference.chartType,\r\n            displayType: reference.displayType,\r\n            trendType: reference.trendType,\r\n            showActions: reference.showActions,\r\n            //data: reference.chartData,\r\n        };\r\n        // Show the report form\r\n        setReportFormReference(referenceInfo);\r\n        setReportFormVisibility(\"block\");\r\n    }\r\n    function hideReportForm() {\r\n        setReportFormVisibility(\"none\");\r\n    }\r\n\r\n    // Popup message\r\n    var [popupMessages, set_popupMessages] = React.useState([]);\r\n\r\n    return (\r\n        currentServer && (\r\n            <div>\r\n                <Helmet>\r\n                    <title>{TITLE}</title>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Check server status, browse live server reports, view a detailed population demographics by server, and decide which server best fits your time zone.\"\r\n                    />\r\n                </Helmet>\r\n                <ReportIssueForm\r\n                    page={\"servers/\" + currentServer.toLowerCase()}\r\n                    showLink={false}\r\n                    visibility={reportFormVisibility}\r\n                    componentReference={reportFormReference}\r\n                    hideReportForm={hideReportForm}\r\n                />\r\n                <PopupMessage\r\n                    messages={popupMessages}\r\n                    popMessage={() => {\r\n                        if (popupMessages.length) {\r\n                            let newMessages = [...popupMessages];\r\n                            newMessages = newMessages.slice(1);\r\n                            set_popupMessages(newMessages);\r\n                        }\r\n                    }}\r\n                />\r\n                <Card\r\n                    pageName={\"servers/\" + currentServer.toLowerCase()}\r\n                    serverName={currentServer}\r\n                    showLink={true}\r\n                    title={\"Demographics of \" + currentServer}\r\n                    subtitle={\r\n                        <UniqueCountsSubtitle\r\n                            data={uniqueData}\r\n                            server={currentServer}\r\n                        />\r\n                    }\r\n                    tiles={[\r\n                        {\r\n                            title: \"Player Demographics\",\r\n                            description: (\r\n                                <p>\r\n                                    The last quarter of{\" \"}\r\n                                    <span className=\"blue-text\">\r\n                                        {demographicsFilter.toLowerCase()}\r\n                                    </span>{\" \"}\r\n                                    by gender, class, race, and guild\r\n                                    affiliation.\r\n                                </p>\r\n                            ),\r\n                            content: (\r\n                                <ServerDemographicsContainer\r\n                                    filter={demographicsFilter}\r\n                                    filters={[\r\n                                        {\r\n                                            name: \"Filter\",\r\n                                            reference: filterDemographics,\r\n                                            options: [\r\n                                                \"All Players\",\r\n                                                \"Active Players\",\r\n                                                \"Inactive Players\",\r\n                                                \"End-game Players\",\r\n                                            ],\r\n                                            index: 0,\r\n                                        },\r\n                                    ]}\r\n                                    server={currentServer}\r\n                                    genderData={genderData}\r\n                                    guildData={guildData}\r\n                                    activityData={activityData}\r\n                                    raceData={raceData}\r\n                                    classData={classData}\r\n                                    showActions={true}\r\n                                    showLastUpdated={false}\r\n                                    reportReference={showReportForm}\r\n                                />\r\n                            ),\r\n                        },\r\n                        {\r\n                            title: \"Most Popular Content\",\r\n                            description: (\r\n                                <p>\r\n                                    The most commonly-played quests on{\" \"}\r\n                                    {currentServer} for the last 30 days.\r\n                                    <br />\r\n                                    Click on a quest to see recent popularity\r\n                                    history.\r\n                                </p>\r\n                            ),\r\n                            content: (\r\n                                <ContentTable\r\n                                    data={contentData}\r\n                                    activeFilter={contentFilter}\r\n                                    activeOrder={contentOrder}\r\n                                    filters={[\r\n                                        {\r\n                                            name: \"Filter\",\r\n                                            reference: FilterContentTable,\r\n                                            options: [\r\n                                                \"All Content\",\r\n                                                \"Raids Only\",\r\n                                                \"Free to Play\",\r\n                                            ],\r\n                                            index: 0,\r\n                                        },\r\n                                        {\r\n                                            name: \"Order By\",\r\n                                            reference: OrderContentTable,\r\n                                            options: [\r\n                                                \"Most Popular\",\r\n                                                \"Least Popular\",\r\n                                            ],\r\n                                            index: 0,\r\n                                        },\r\n                                    ]}\r\n                                    showServerFilters={false}\r\n                                    specificServer={currentServer}\r\n                                    showActions={true}\r\n                                    showLastUpdated={false}\r\n                                    reportReference={showReportForm}\r\n                                />\r\n                            ),\r\n                        },\r\n                    ]}\r\n                />\r\n                <Card\r\n                    serverName={currentServer}\r\n                    pageName={\"servers/\" + currentServer.toLowerCase()}\r\n                    showLink={true}\r\n                    title={\"Currently on \" + currentServer}\r\n                    subtitle={\r\n                        <PlayerAndLfmSubtitle\r\n                            data={population24HoursData}\r\n                            server={currentServer}\r\n                        />\r\n                    }\r\n                    tiles={[\r\n                        {\r\n                            title: \"Players and LFMs by Minute - All Servers\",\r\n                            description: (\r\n                                <div className=\"tile-description\">\r\n                                    <p>\r\n                                        A 24-hour rolling window of the total\r\n                                        players on {currentServer}.\r\n                                    </p>\r\n                                </div>\r\n                            ),\r\n                            content: (\r\n                                <ChartPopulationHistory\r\n                                    data={population24HoursData}\r\n                                    activeFilter={currentServer}\r\n                                    trendType=\"day\"\r\n                                    showActions={true}\r\n                                    showLastUpdated={true}\r\n                                    reportReference={showReportForm}\r\n                                />\r\n                            ),\r\n                        },\r\n                    ]}\r\n                />\r\n                <Card\r\n                    serverName={currentServer}\r\n                    pageName={\"servers/\" + currentServer.toLowerCase()}\r\n                    showLink={true}\r\n                    title={\"Recently on \" + currentServer}\r\n                    subtitle=\"\"\r\n                    tiles={[\r\n                        {\r\n                            title: \"Players by Hour on \" + currentServer,\r\n                            description: (\r\n                                <div className=\"tile-description\">\r\n                                    <p>\r\n                                        A 1-week rolling window of the total\r\n                                        players on {currentServer}.{\" \"}\r\n                                        <span className=\"blue-text\">\r\n                                            Hourly averages\r\n                                        </span>{\" \"}\r\n                                        are displayed.\r\n                                    </p>\r\n                                </div>\r\n                            ),\r\n                            content: (\r\n                                <ChartPopulationHistory\r\n                                    data={population1WeekData}\r\n                                    trendType=\"week\"\r\n                                    activeFilter={currentServer}\r\n                                    showActions={true}\r\n                                    showLastUpdated={true}\r\n                                    reportReference={showReportForm}\r\n                                />\r\n                            ),\r\n                        },\r\n                        {\r\n                            title: \"Players by Day on \" + currentServer,\r\n                            description: (\r\n                                <div className=\"tile-description\">\r\n                                    <p>\r\n                                        A 90-day rolling window of the total\r\n                                        players on {currentServer}.{\" \"}\r\n                                        <span className=\"blue-text\">\r\n                                            Daily averages\r\n                                        </span>{\" \"}\r\n                                        are displayed.\r\n                                    </p>\r\n                                </div>\r\n                            ),\r\n                            content: (\r\n                                <ChartPopulationHistory\r\n                                    data={population1QuarterData}\r\n                                    trendType=\"quarter\"\r\n                                    activeFilter={currentServer}\r\n                                    showActions={true}\r\n                                    showLastUpdated={true}\r\n                                    reportReference={showReportForm}\r\n                                />\r\n                            ),\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default ServerSpecific;\r\n"],"sourceRoot":""}